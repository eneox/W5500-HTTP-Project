
EthernetW5500_HTTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e4c  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c978  0800c978  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c978  0800c978  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c978  0800c978  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c978  0800c978  0001c978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c97c  0800c97c  0001c97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800c980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f0  200000c4  0800ca44  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018b4  0800ca44  000218b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bce  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000365b  00000000  00000000  00035cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  00039318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d101  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff72  00000000  00000000  000587e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a475b  00000000  00000000  0006875b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ceb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  0010cf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000c4 	.word	0x200000c4
 8000200:	00000000 	.word	0x00000000
 8000204:	08007b14 	.word	0x08007b14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000c8 	.word	0x200000c8
 8000220:	08007b14 	.word	0x08007b14

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800024c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <__NVIC_SystemReset+0x20>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000258:	4903      	ldr	r1, [pc, #12]	; (8000268 <__NVIC_SystemReset+0x20>)
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <__NVIC_SystemReset+0x24>)
 800025c:	4313      	orrs	r3, r2
 800025e:	60cb      	str	r3, [r1, #12]
 8000260:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <__NVIC_SystemReset+0x1c>
 8000268:	e000ed00 	.word	0xe000ed00
 800026c:	05fa0004 	.word	0x05fa0004

08000270 <Init_WebAPP>:
                            .gw 	= {192, 168, 0, 1},						// Gateway address
                            .dns 	= {8, 8, 8, 8},							// DNS server
                            .dhcp 	= NETINFO_STATIC };						// DHCP enable / disable


void Init_WebAPP (void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	//INIT SPI AND CS PERIPHERAL
	W5500_Init();
 8000276:	f000 ff3f 	bl	80010f8 <W5500_Init>
	Net_Conf(gWIZNETINFO);
 800027a:	4a33      	ldr	r2, [pc, #204]	; (8000348 <Init_WebAPP+0xd8>)
 800027c:	466b      	mov	r3, sp
 800027e:	f102 0110 	add.w	r1, r2, #16
 8000282:	c903      	ldmia	r1, {r0, r1}
 8000284:	6018      	str	r0, [r3, #0]
 8000286:	3304      	adds	r3, #4
 8000288:	8019      	strh	r1, [r3, #0]
 800028a:	3302      	adds	r3, #2
 800028c:	0c09      	lsrs	r1, r1, #16
 800028e:	7019      	strb	r1, [r3, #0]
 8000290:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8000292:	f000 ff1f 	bl	80010d4 <Net_Conf>
#ifdef _MAIN_DEBUG_
	uint8_t tmpstr[6] = {0,};
 8000296:	463b      	mov	r3, r7
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	809a      	strh	r2, [r3, #4]

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800029e:	463b      	mov	r3, r7
 80002a0:	4619      	mov	r1, r3
 80002a2:	2008      	movs	r0, #8
 80002a4:	f004 f8da 	bl	800445c <ctlwizchip>

    printf("\r\n=======================================\r\n");
 80002a8:	4828      	ldr	r0, [pc, #160]	; (800034c <Init_WebAPP+0xdc>)
 80002aa:	f006 fb9b 	bl	80069e4 <puts>
	printf(" WIZnet %s EVB Demos v%d.%.2d\r\n", tmpstr, VER_H, VER_L);
 80002ae:	4639      	mov	r1, r7
 80002b0:	2300      	movs	r3, #0
 80002b2:	2201      	movs	r2, #1
 80002b4:	4826      	ldr	r0, [pc, #152]	; (8000350 <Init_WebAPP+0xe0>)
 80002b6:	f006 fb21 	bl	80068fc <iprintf>
	printf("=======================================\r\n");
 80002ba:	4826      	ldr	r0, [pc, #152]	; (8000354 <Init_WebAPP+0xe4>)
 80002bc:	f006 fb92 	bl	80069e4 <puts>
	printf(">> W5500 based Web Server Example\r\n");
 80002c0:	4825      	ldr	r0, [pc, #148]	; (8000358 <Init_WebAPP+0xe8>)
 80002c2:	f006 fb8f 	bl	80069e4 <puts>
	printf("=======================================\r\n");
 80002c6:	4823      	ldr	r0, [pc, #140]	; (8000354 <Init_WebAPP+0xe4>)
 80002c8:	f006 fb8c 	bl	80069e4 <puts>

	Display_Net_Conf(); // Print out the network information to serial terminal
 80002cc:	f000 fe8a 	bl	8000fe4 <Display_Net_Conf>
#endif


	/* HTTP Server Initialization  */
	httpServer_init(TX_BUF, RX_BUF, MAX_HTTPSOCK, socknumlist);		// Tx/Rx buffers (1kB) / The number of W5500 chip H/W sockets in use
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <Init_WebAPP+0xec>)
 80002d2:	2206      	movs	r2, #6
 80002d4:	4922      	ldr	r1, [pc, #136]	; (8000360 <Init_WebAPP+0xf0>)
 80002d6:	4823      	ldr	r0, [pc, #140]	; (8000364 <Init_WebAPP+0xf4>)
 80002d8:	f005 fa0a 	bl	80056f0 <httpServer_init>
	reg_httpServer_cbfunc(NVIC_SystemReset, NULL); 					// Callback: NXP MCU Reset
 80002dc:	2100      	movs	r1, #0
 80002de:	4822      	ldr	r0, [pc, #136]	; (8000368 <Init_WebAPP+0xf8>)
 80002e0:	f005 fa22 	bl	8005728 <reg_httpServer_cbfunc>

	{
			/* Web content registration (web content in webpage.h, Example web pages) */

			// Index page and netinfo / base64 image demo
			reg_httpServer_webContent((uint8_t *)"index.html", (uint8_t *)index_page);				// index.html 		: Main page example
 80002e4:	4921      	ldr	r1, [pc, #132]	; (800036c <Init_WebAPP+0xfc>)
 80002e6:	4822      	ldr	r0, [pc, #136]	; (8000370 <Init_WebAPP+0x100>)
 80002e8:	f006 f862 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"netinfo.html", (uint8_t *)netinfo_page);			// netinfo.html 	: Network information example page
 80002ec:	4921      	ldr	r1, [pc, #132]	; (8000374 <Init_WebAPP+0x104>)
 80002ee:	4822      	ldr	r0, [pc, #136]	; (8000378 <Init_WebAPP+0x108>)
 80002f0:	f006 f85e 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"netinfo.js", (uint8_t *)wiz550web_netinfo_js);	// netinfo.js 		: JavaScript for Read Network configuration 	(+ ajax.js)
 80002f4:	4921      	ldr	r1, [pc, #132]	; (800037c <Init_WebAPP+0x10c>)
 80002f6:	4822      	ldr	r0, [pc, #136]	; (8000380 <Init_WebAPP+0x110>)
 80002f8:	f006 f85a 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"img.html", (uint8_t *)img_page);					// img.html 		: Base64 Image data example page
 80002fc:	4921      	ldr	r1, [pc, #132]	; (8000384 <Init_WebAPP+0x114>)
 80002fe:	4822      	ldr	r0, [pc, #136]	; (8000388 <Init_WebAPP+0x118>)
 8000300:	f006 f856 	bl	80063b0 <reg_httpServer_webContent>

			// Example #1
			reg_httpServer_webContent((uint8_t *)"dio.html", (uint8_t *)dio_page);					// dio.html 		: Digital I/O control example page
 8000304:	4921      	ldr	r1, [pc, #132]	; (800038c <Init_WebAPP+0x11c>)
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <Init_WebAPP+0x120>)
 8000308:	f006 f852 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"dio.js", (uint8_t *)wiz550web_dio_js);			// dio.js 			: JavaScript for digital I/O control 	(+ ajax.js)
 800030c:	4921      	ldr	r1, [pc, #132]	; (8000394 <Init_WebAPP+0x124>)
 800030e:	4822      	ldr	r0, [pc, #136]	; (8000398 <Init_WebAPP+0x128>)
 8000310:	f006 f84e 	bl	80063b0 <reg_httpServer_webContent>

			// Example #2
			reg_httpServer_webContent((uint8_t *)"ain.html", (uint8_t *)ain_page);					// ain.html 		: Analog input monitor example page
 8000314:	4921      	ldr	r1, [pc, #132]	; (800039c <Init_WebAPP+0x12c>)
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <Init_WebAPP+0x130>)
 8000318:	f006 f84a 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"ain.js", (uint8_t *)wiz550web_ain_js);			// ain.js 			: JavaScript for Analog input monitor	(+ ajax.js)
 800031c:	4921      	ldr	r1, [pc, #132]	; (80003a4 <Init_WebAPP+0x134>)
 800031e:	4822      	ldr	r0, [pc, #136]	; (80003a8 <Init_WebAPP+0x138>)
 8000320:	f006 f846 	bl	80063b0 <reg_httpServer_webContent>

			// Example #3
			reg_httpServer_webContent((uint8_t *)"ain_gauge.html", (uint8_t *)ain_gauge_page);		// ain_gauge.html 	: Analog input monitor example page; using Google Gauge chart
 8000324:	4921      	ldr	r1, [pc, #132]	; (80003ac <Init_WebAPP+0x13c>)
 8000326:	4822      	ldr	r0, [pc, #136]	; (80003b0 <Init_WebAPP+0x140>)
 8000328:	f006 f842 	bl	80063b0 <reg_httpServer_webContent>
			reg_httpServer_webContent((uint8_t *)"ain_gauge.js", (uint8_t *)ain_gauge_js);			// ain_gauge.js 	: JavaScript for Google Gauge chart		(+ ajax.js)
 800032c:	4921      	ldr	r1, [pc, #132]	; (80003b4 <Init_WebAPP+0x144>)
 800032e:	4822      	ldr	r0, [pc, #136]	; (80003b8 <Init_WebAPP+0x148>)
 8000330:	f006 f83e 	bl	80063b0 <reg_httpServer_webContent>

			// AJAX JavaScript functions
			reg_httpServer_webContent((uint8_t *)"ajax.js", (uint8_t *)wiz550web_ajax_js);			// ajax.js			: JavaScript for AJAX request transfer
 8000334:	4921      	ldr	r1, [pc, #132]	; (80003bc <Init_WebAPP+0x14c>)
 8000336:	4822      	ldr	r0, [pc, #136]	; (80003c0 <Init_WebAPP+0x150>)
 8000338:	f006 f83a 	bl	80063b0 <reg_httpServer_webContent>

	#ifdef _MAIN_DEBUG_
			display_reg_webContent_list();
 800033c:	f006 f89a 	bl	8006474 <display_reg_webContent_list>
	#endif
		}
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000008 	.word	0x20000008
 800034c:	08007b2c 	.word	0x08007b2c
 8000350:	08007b58 	.word	0x08007b58
 8000354:	08007b78 	.word	0x08007b78
 8000358:	08007ba4 	.word	0x08007ba4
 800035c:	20000000 	.word	0x20000000
 8000360:	200005cc 	.word	0x200005cc
 8000364:	20000dcc 	.word	0x20000dcc
 8000368:	08000249 	.word	0x08000249
 800036c:	08007bc8 	.word	0x08007bc8
 8000370:	08007d80 	.word	0x08007d80
 8000374:	08007d8c 	.word	0x08007d8c
 8000378:	08008180 	.word	0x08008180
 800037c:	08008190 	.word	0x08008190
 8000380:	0800831c 	.word	0x0800831c
 8000384:	08008328 	.word	0x08008328
 8000388:	08009eec 	.word	0x08009eec
 800038c:	08009ef8 	.word	0x08009ef8
 8000390:	0800a22c 	.word	0x0800a22c
 8000394:	0800a238 	.word	0x0800a238
 8000398:	0800a518 	.word	0x0800a518
 800039c:	0800a520 	.word	0x0800a520
 80003a0:	0800a8f8 	.word	0x0800a8f8
 80003a4:	0800a904 	.word	0x0800a904
 80003a8:	0800ab50 	.word	0x0800ab50
 80003ac:	0800ab58 	.word	0x0800ab58
 80003b0:	0800ae8c 	.word	0x0800ae8c
 80003b4:	0800ae9c 	.word	0x0800ae9c
 80003b8:	0800b2c8 	.word	0x0800b2c8
 80003bc:	0800b2d8 	.word	0x0800b2d8
 80003c0:	0800b5dc 	.word	0x0800b5dc

080003c4 <Task_WebAPP>:

void Task_WebAPP (void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	// TODO: insert user's code here
	for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	80fb      	strh	r3, [r7, #6]
 80003ce:	e007      	b.n	80003e0 <Task_WebAPP+0x1c>
		httpServer_run(i); 	// HTTP Server handler
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f005 f9c1 	bl	800575c <httpServer_run>
	for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	3301      	adds	r3, #1
 80003de:	80fb      	strh	r3, [r7, #6]
 80003e0:	88fb      	ldrh	r3, [r7, #6]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d9f4      	bls.n	80003d0 <Task_WebAPP+0xc>

	loopback_tcps(SOCK_TCPS, RX_BUF, 5000);
 80003e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80003ea:	4904      	ldr	r1, [pc, #16]	; (80003fc <Task_WebAPP+0x38>)
 80003ec:	2000      	movs	r0, #0
 80003ee:	f002 ff8d 	bl	800330c <loopback_tcps>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200005cc 	.word	0x200005cc

08000400 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000408:	1d39      	adds	r1, r7, #4
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	2201      	movs	r2, #1
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <__io_putchar+0x20>)
 8000412:	f002 fe10 	bl	8003036 <HAL_UART_Transmit>
  return ch;
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20001628 	.word	0x20001628

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fec2 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f81a 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f000 f8be 	bl	80005b0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000434:	f000 f85c 	bl	80004f0 <MX_SPI2_Init>
  MX_UART4_Init();
 8000438:	f000 f890 	bl	800055c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //POWER ON ETHERNET
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <main+0x3c>)
 8000444:	f001 f969 	bl	800171a <HAL_GPIO_WritePin>
  //DELAY TO CONVERGE NETWORK
  HAL_Delay(15000);
 8000448:	f643 2098 	movw	r0, #15000	; 0x3a98
 800044c:	f000 fee2 	bl	8001214 <HAL_Delay>
  //SET IP AND MORE
  Init_WebAPP();
 8000450:	f7ff ff0e 	bl	8000270 <Init_WebAPP>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Task_WebAPP();
 8000454:	f7ff ffb6 	bl	80003c4 <Task_WebAPP>
	  HAL_Delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 fedb 	bl	8001214 <HAL_Delay>
	  Task_WebAPP();
 800045e:	e7f9      	b.n	8000454 <main+0x30>
 8000460:	40011000 	.word	0x40011000

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f006 f993 	bl	800679e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f94d 	bl	800174c <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b8:	f000 f900 	bl	80006bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2302      	movs	r3, #2
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fbb8 	bl	8001c4c <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004e2:	f000 f8eb 	bl	80006bc <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3740      	adds	r7, #64	; 0x40
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_SPI2_Init+0x64>)
 80004f6:	4a18      	ldr	r2, [pc, #96]	; (8000558 <MX_SPI2_Init+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_SPI2_Init+0x64>)
 80004fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_SPI2_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_SPI2_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_SPI2_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_SPI2_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_SPI2_Init+0x64>)
 800051c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000520:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_SPI2_Init+0x64>)
 8000524:	2210      	movs	r2, #16
 8000526:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_SPI2_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_SPI2_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <MX_SPI2_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_SPI2_Init+0x64>)
 800053c:	220a      	movs	r2, #10
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_SPI2_Init+0x64>)
 8000542:	f001 fd4f 	bl	8001fe4 <HAL_SPI_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800054c:	f000 f8b6 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200015d0 	.word	0x200015d0
 8000558:	40003800 	.word	0x40003800

0800055c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_UART4_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_UART4_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_UART4_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_UART4_Init+0x4c>)
 8000594:	f002 fd02 	bl	8002f9c <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f88d 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001628 	.word	0x20001628
 80005ac:	40004c00 	.word	0x40004c00

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xb8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <MX_GPIO_Init+0xbc>)
 8000614:	f001 f881 	bl	800171a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_Energy_GPIO_Port, Ethernet_Energy_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <MX_GPIO_Init+0xc0>)
 8000620:	f001 f87b 	bl	800171a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2302      	movs	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <MX_GPIO_Init+0xbc>)
 800063e:	f000 feeb 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_Energy_Pin */
  GPIO_InitStruct.Pin = Ethernet_Energy_Pin;
 8000642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ethernet_Energy_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_GPIO_Init+0xc0>)
 800065c:	f000 fedc 	bl	8001418 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	40010c00 	.word	0x40010c00
 8000670:	40011000 	.word	0x40011000

08000674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d111      	bne.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x36>
	TickWeb++;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000690:	801a      	strh	r2, [r3, #0]
	if (TickWeb==1000){
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800069a:	d104      	bne.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x32>
	  TickWeb=0;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	801a      	strh	r2, [r3, #0]
	  httpServer_time_handler();
 80006a2:	f005 fe6d 	bl	8006380 <httpServer_time_handler>
	}
    HAL_IncTick();
 80006a6:	f000 fd99 	bl	80011dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40001000 	.word	0x40001000
 80006b8:	200015cc 	.word	0x200015cc

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <Error_Handler+0x6>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_MspInit+0x5c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x5c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_MspInit+0x60>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_MspInit+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <HAL_SPI_MspInit+0x8c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d131      	bne.n	80007ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_SPI_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000778:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_SPI_MspInit+0x94>)
 800078e:	f000 fe43 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000792:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_SPI_MspInit+0x94>)
 80007a8:	f000 fe36 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40003800 	.word	0x40003800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d131      	bne.n	8000844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000826:	f000 fdf7 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800082a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000840:	f000 fdea 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004c00 	.word	0x40004c00
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2036      	movs	r0, #54	; 0x36
 800086e:	f000 fda8 	bl	80013c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000872:	2036      	movs	r0, #54	; 0x36
 8000874:	f000 fdc1 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_InitTick+0xa0>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_InitTick+0xa0>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_InitTick+0xa0>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000890:	f107 0210 	add.w	r2, r7, #16
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fb54 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008a0:	f001 fb2a 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 80008a4:	4603      	mov	r3, r0
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <HAL_InitTick+0xa4>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	0c9b      	lsrs	r3, r3, #18
 80008b4:	3b01      	subs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_InitTick+0xa8>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_InitTick+0xac>)
 80008bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_InitTick+0xa8>)
 80008c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_InitTick+0xa8>)
 80008c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_InitTick+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_InitTick+0xa8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <HAL_InitTick+0xa8>)
 80008da:	f002 f8ef 	bl	8002abc <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d104      	bne.n	80008ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008e4:	4806      	ldr	r0, [pc, #24]	; (8000900 <HAL_InitTick+0xa8>)
 80008e6:	f002 f941 	bl	8002b6c <HAL_TIM_Base_Start_IT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	2000166c 	.word	0x2000166c
 8000904:	40001000 	.word	0x40001000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
	...

08000958 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <TIM6_IRQHandler+0x10>)
 800095e:	f002 f965 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000166c 	.word	0x2000166c

0800096c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
	}

return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e009      	b.n	80009cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fd1d 	bl	8000400 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf1      	blt.n	80009b8 <_write+0x12>
	}
	return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_close>:

int _close(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a04:	605a      	str	r2, [r3, #4]
	return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
	return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f005 fe58 	bl	8006724 <__errno>
 8000a74:	4602      	mov	r2, r0
 8000a76:	230c      	movs	r3, #12
 8000a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20010000 	.word	0x20010000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	200000e0 	.word	0x200000e0
 8000aa8:	200018b8 	.word	0x200018b8

08000aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <predefined_get_cgi_processor>:
// Pre-defined Set CGI functions
int8_t set_diodir(uint8_t * uri);
int8_t set_diostate(uint8_t * uri);

uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	uint8_t ret = 1;	// ret = 1 means 'uri_name' matched
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t cgibuf[14] = {0, };
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	819a      	strh	r2, [r3, #12]
	int8_t cgi_dio = -1;
 8000ad8:	23ff      	movs	r3, #255	; 0xff
 8000ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int8_t cgi_ain = -1;
 8000ade:	23ff      	movs	r3, #255	; 0xff
 8000ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	uint8_t i;

	if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 8000ae4:	494a      	ldr	r1, [pc, #296]	; (8000c10 <predefined_get_cgi_processor+0x158>)
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff fb9c 	bl	8000224 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8087 	beq.w	8000c02 <predefined_get_cgi_processor+0x14a>
	{
		// to do
		;//make_json_todo(buf, len);
	}
	else if(strcmp((const char *)uri_name, "get_netinfo.cgi") == 0)
 8000af4:	4947      	ldr	r1, [pc, #284]	; (8000c14 <predefined_get_cgi_processor+0x15c>)
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff fb94 	bl	8000224 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d104      	bne.n	8000b0c <predefined_get_cgi_processor+0x54>
	{
		make_json_netinfo(buf, len);
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f000 f927 	bl	8000d58 <make_json_netinfo>
 8000b0a:	e07a      	b.n	8000c02 <predefined_get_cgi_processor+0x14a>
	}
	else
	{
		uint8_t DIOn=16;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// get_dio0.cgi ~ get_dio15.cgi
		for(i = 0; i < DIOn; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000b18:	e028      	b.n	8000b6c <predefined_get_cgi_processor+0xb4>
		{
			memset(cgibuf, 0x00, 14);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	220e      	movs	r2, #14
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f005 fe3b 	bl	800679e <memset>
			sprintf((char *)cgibuf, "get_dio%d.cgi", i);
 8000b28:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4939      	ldr	r1, [pc, #228]	; (8000c18 <predefined_get_cgi_processor+0x160>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 ff6e 	bl	8006a14 <siprintf>
			if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fb70 	bl	8000224 <strcmp>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10b      	bne.n	8000b62 <predefined_get_cgi_processor+0xaa>
			{
				make_json_dio(buf, len, i);
 8000b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b4e:	461a      	mov	r2, r3
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	f000 f8c0 	bl	8000cd8 <make_json_dio>
				cgi_dio = i;
 8000b58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8000b60:	e00a      	b.n	8000b78 <predefined_get_cgi_processor+0xc0>
		for(i = 0; i < DIOn; i++)
 8000b62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b66:	3301      	adds	r3, #1
 8000b68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000b6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3d0      	bcc.n	8000b1a <predefined_get_cgi_processor+0x62>
			}
		}

		if(cgi_dio < 0)
 8000b78:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da35      	bge.n	8000bec <predefined_get_cgi_processor+0x134>
		{
			uint8_t AINn=6;
 8000b80:	2306      	movs	r3, #6
 8000b82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			// get_ain0.cgi ~ get_ain5.cgi (A0 - A5), get_ain6.cgi for on-board potentiometer / Temp.Sensor
			for(i = 0; i < AINn; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000b8c:	e028      	b.n	8000be0 <predefined_get_cgi_processor+0x128>
			{
				memset(cgibuf, 0x00, 14);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	220e      	movs	r2, #14
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fe01 	bl	800679e <memset>
				sprintf((char *)cgibuf, "get_ain%d.cgi", i);
 8000b9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	491d      	ldr	r1, [pc, #116]	; (8000c1c <predefined_get_cgi_processor+0x164>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 ff34 	bl	8006a14 <siprintf>
				if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fb36 	bl	8000224 <strcmp>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10b      	bne.n	8000bd6 <predefined_get_cgi_processor+0x11e>
				{
					make_json_ain(buf, len, i);
 8000bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f000 f8aa 	bl	8000d20 <make_json_ain>
					cgi_ain = i;
 8000bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					break;
 8000bd4:	e00a      	b.n	8000bec <predefined_get_cgi_processor+0x134>
			for(i = 0; i < AINn; i++)
 8000bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000be0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000be4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3d0      	bcc.n	8000b8e <predefined_get_cgi_processor+0xd6>
				}
			}
		}

		if((cgi_dio < 0) && (cgi_ain < 0)) ret = 0;
 8000bec:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da06      	bge.n	8000c02 <predefined_get_cgi_processor+0x14a>
 8000bf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da02      	bge.n	8000c02 <predefined_get_cgi_processor+0x14a>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return ret;
 8000c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	0800b5e4 	.word	0x0800b5e4
 8000c14:	0800b5f0 	.word	0x0800b5f0
 8000c18:	0800b600 	.word	0x0800b600
 8000c1c:	0800b610 	.word	0x0800b610

08000c20 <predefined_set_cgi_processor>:


uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	603b      	str	r3, [r7, #0]
	uint8_t ret = 1;	// ret = '1' means 'uri_name' matched
 8000c2e:	2301      	movs	r3, #1
 8000c30:	75fb      	strb	r3, [r7, #23]
	uint8_t val = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	75bb      	strb	r3, [r7, #22]

	if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 8000c36:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <predefined_set_cgi_processor+0x90>)
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff faf3 	bl	8000224 <strcmp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02f      	beq.n	8000ca4 <predefined_set_cgi_processor+0x84>
		// to do
		;//val = todo(uri);
		//*len = sprintf((char *)buf, "%d", val);
	}
	// Digital I/O; dio_s, dio_d
	else if(strcmp((const char *)uri_name, "set_diodir.cgi") == 0)
 8000c44:	491b      	ldr	r1, [pc, #108]	; (8000cb4 <predefined_set_cgi_processor+0x94>)
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f7ff faec 	bl	8000224 <strcmp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <predefined_set_cgi_processor+0x52>
	{
		val = set_diodir(uri);
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f000 f902 	bl	8000e5c <set_diodir>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	75bb      	strb	r3, [r7, #22]
		*len = sprintf((char *)buf, "%d", val);
 8000c5c:	7dbb      	ldrb	r3, [r7, #22]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4915      	ldr	r1, [pc, #84]	; (8000cb8 <predefined_set_cgi_processor+0x98>)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f005 fed6 	bl	8006a14 <siprintf>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	e018      	b.n	8000ca4 <predefined_set_cgi_processor+0x84>
	}
	else if(strcmp((const char *)uri_name, "set_diostate.cgi") == 0)
 8000c72:	4912      	ldr	r1, [pc, #72]	; (8000cbc <predefined_set_cgi_processor+0x9c>)
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff fad5 	bl	8000224 <strcmp>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10f      	bne.n	8000ca0 <predefined_set_cgi_processor+0x80>
	{
		val = set_diostate(uri);
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f000 f91f 	bl	8000ec4 <set_diostate>
 8000c86:	4603      	mov	r3, r0
 8000c88:	75bb      	strb	r3, [r7, #22]
		*len = sprintf((char *)buf, "%d", val);
 8000c8a:	7dbb      	ldrb	r3, [r7, #22]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	490a      	ldr	r1, [pc, #40]	; (8000cb8 <predefined_set_cgi_processor+0x98>)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f005 febf 	bl	8006a14 <siprintf>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	e001      	b.n	8000ca4 <predefined_set_cgi_processor+0x84>
	}
	else
	{
		ret = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800b5e4 	.word	0x0800b5e4
 8000cb4:	0800b620 	.word	0x0800b620
 8000cb8:	0800b630 	.word	0x0800b630
 8000cbc:	0800b634 	.word	0x0800b634

08000cc0 <get_ADC_val>:

//propio del PLC
uint16_t get_ADC_val(pin){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	uint16_t ADC_Value;
	//hal drivers could be
	ADC_Value=147;
 8000cc8:	2393      	movs	r3, #147	; 0x93
 8000cca:	81fb      	strh	r3, [r7, #14]
	return ADC_Value;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <make_json_dio>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pre-defined Get CGI functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void make_json_dio(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t pin_state;
	uint8_t pin_dir;

	pin_state 	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <make_json_dio+0x40>)
 8000cea:	f000 fcff 	bl	80016ec <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	75fb      	strb	r3, [r7, #23]
	pin_dir 	= 1;//HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);//INPUT OR OUTPUT
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75bb      	strb	r3, [r7, #22]

	*len = sprintf((char *)buf, "DioCallback({\"dio_p\":\"%d\",\
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	7df9      	ldrb	r1, [r7, #23]
 8000cfa:	7dbb      	ldrb	r3, [r7, #22]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <make_json_dio+0x44>)
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f005 fe86 	bl	8006a14 <siprintf>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	801a      	strh	r2, [r3, #0]
											});",
											pin,					// Digital io pin number
											pin_state,				// Digital io status
											pin_dir					// Digital io directions
											);
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	0800b648 	.word	0x0800b648

08000d20 <make_json_ain>:

void make_json_ain(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	71fb      	strb	r3, [r7, #7]
	*len = sprintf((char *)buf, "AinCallback({\"ain_p\":\"%d\",\
 8000d2e:	79fc      	ldrb	r4, [r7, #7]
											\"ain_v\":\"%d\"\
											});",
											pin,					// ADC input pin number
											get_ADC_val(pin)		// ADC input value
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffc4 	bl	8000cc0 <get_ADC_val>
 8000d38:	4603      	mov	r3, r0
	*len = sprintf((char *)buf, "AinCallback({\"ain_p\":\"%d\",\
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	4905      	ldr	r1, [pc, #20]	; (8000d54 <make_json_ain+0x34>)
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f005 fe68 	bl	8006a14 <siprintf>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	801a      	strh	r2, [r3, #0]
											);
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	0800b6a0 	.word	0x0800b6a0

08000d58 <make_json_netinfo>:

void make_json_netinfo(uint8_t * buf, uint16_t * len)
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	b0ad      	sub	sp, #180	; 0xb4
 8000d5c:	af16      	add	r7, sp, #88	; 0x58
 8000d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d60:	63b9      	str	r1, [r7, #56]	; 0x38
	wiz_NetInfo netinfo;
	ctlnetwork(CN_GET_NETINFO, (void*) &netinfo);
 8000d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d66:	4619      	mov	r1, r3
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f003 fc59 	bl	8004620 <ctlnetwork>
											\"gw\":\"%d.%d.%d.%d\",\
											\"sn\":\"%d.%d.%d.%d\",\
											\"dns\":\"%d.%d.%d.%d\",\
											\"dhcp\":\"%d\"\
											});",
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d72:	469c      	mov	ip, r3
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d74:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d78:	469e      	mov	lr, r3
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d86:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 8000d8c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 8000d92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 8000d98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000d9c:	623b      	str	r3, [r7, #32]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 8000d9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000da2:	61fb      	str	r3, [r7, #28]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 8000da4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000da8:	61bb      	str	r3, [r7, #24]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 8000daa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dae:	617b      	str	r3, [r7, #20]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 8000db0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000db4:	613b      	str	r3, [r7, #16]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 8000db6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dba:	60fb      	str	r3, [r7, #12]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 8000dbc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dc0:	60bb      	str	r3, [r7, #8]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000dc2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dc6:	607b      	str	r3, [r7, #4]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000dc8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dcc:	603b      	str	r3, [r7, #0]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000dce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dd2:	461e      	mov	r6, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000dd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dd8:	461d      	mov	r5, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000dda:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dde:	461c      	mov	r4, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000de0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000de4:	4618      	mov	r0, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000de6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000dea:	4619      	mov	r1, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000dec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000df0:	461a      	mov	r2, r3
											netinfo.dhcp
 8000df2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000df6:	9314      	str	r3, [sp, #80]	; 0x50
 8000df8:	9213      	str	r2, [sp, #76]	; 0x4c
 8000dfa:	9112      	str	r1, [sp, #72]	; 0x48
 8000dfc:	9011      	str	r0, [sp, #68]	; 0x44
 8000dfe:	9410      	str	r4, [sp, #64]	; 0x40
 8000e00:	950f      	str	r5, [sp, #60]	; 0x3c
 8000e02:	960e      	str	r6, [sp, #56]	; 0x38
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	920d      	str	r2, [sp, #52]	; 0x34
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	920c      	str	r2, [sp, #48]	; 0x30
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	920a      	str	r2, [sp, #40]	; 0x28
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	9209      	str	r2, [sp, #36]	; 0x24
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	9208      	str	r2, [sp, #32]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	9207      	str	r2, [sp, #28]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	9206      	str	r2, [sp, #24]
 8000e24:	6a3a      	ldr	r2, [r7, #32]
 8000e26:	9205      	str	r2, [sp, #20]
 8000e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2a:	9204      	str	r2, [sp, #16]
 8000e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2e:	9203      	str	r2, [sp, #12]
 8000e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e32:	9202      	str	r2, [sp, #8]
 8000e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4673      	mov	r3, lr
 8000e3e:	4662      	mov	r2, ip
 8000e40:	4905      	ldr	r1, [pc, #20]	; (8000e58 <make_json_netinfo+0x100>)
 8000e42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e44:	f005 fde6 	bl	8006a14 <siprintf>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e4e:	801a      	strh	r2, [r3, #0]
											);
}
 8000e50:	bf00      	nop
 8000e52:	375c      	adds	r7, #92	; 0x5c
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	0800b6e0 	.word	0x0800b6e0

08000e5c <set_diodir>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pre-defined Set CGI functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int8_t set_diodir(uint8_t * uri)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint8_t * param;
	uint8_t pin = 0, val = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]

	if((param = get_http_param_value((char *)uri, "pin"))) // GPIO; D0 ~ D15
 8000e6c:	4913      	ldr	r1, [pc, #76]	; (8000ebc <set_diodir+0x60>)
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f004 fa98 	bl	80053a4 <get_http_param_value>
 8000e74:	60b8      	str	r0, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d019      	beq.n	8000eb0 <set_diodir+0x54>
	{
		pin = (uint8_t)ATOI(param, 10);
 8000e7c:	210a      	movs	r1, #10
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f004 fb3e 	bl	8005500 <ATOI>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
		if(pin > 15) return -1;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d902      	bls.n	8000e94 <set_diodir+0x38>
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e00f      	b.n	8000eb4 <set_diodir+0x58>

		if((param = get_http_param_value((char *)uri, "val")))  // Direction; NotUsed/Input/Output
 8000e94:	490a      	ldr	r1, [pc, #40]	; (8000ec0 <set_diodir+0x64>)
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f004 fa84 	bl	80053a4 <get_http_param_value>
 8000e9c:	60b8      	str	r0, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <set_diodir+0x54>
		{
			val = (uint8_t)ATOI(param, 10);
 8000ea4:	210a      	movs	r1, #10
 8000ea6:	68b8      	ldr	r0, [r7, #8]
 8000ea8:	f004 fb2a 	bl	8005500 <ATOI>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73bb      	strb	r3, [r7, #14]

	//DRIVERS FOR LPC CHIP
	//if(val == Input) 		Chip_GPIO_SetPinDIRInput(LPC_GPIO, dio_ports[pin], dio_pins[pin]);	// Input
	//else 					Chip_GPIO_SetPinDIROutput(LPC_GPIO, dio_ports[pin], dio_pins[pin]); // Output

	return pin;
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0800b7b8 	.word	0x0800b7b8
 8000ec0:	0800b7bc 	.word	0x0800b7bc

08000ec4 <set_diostate>:

int8_t set_diostate(uint8_t * uri)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint8_t * param;
	uint8_t pin = 0, val = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73bb      	strb	r3, [r7, #14]

	if((param = get_http_param_value((char *)uri, "pin"))) // GPIO; D0 ~ D15
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <set_diostate+0x60>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f004 fa64 	bl	80053a4 <get_http_param_value>
 8000edc:	60b8      	str	r0, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <set_diostate+0x54>
	{
		pin = (uint8_t)ATOI(param, 10);
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	68b8      	ldr	r0, [r7, #8]
 8000ee8:	f004 fb0a 	bl	8005500 <ATOI>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
		if(pin > 15) return -1;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d902      	bls.n	8000efc <set_diostate+0x38>
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e00f      	b.n	8000f1c <set_diostate+0x58>

		if((param = get_http_param_value((char *)uri, "val")))  // State; high(on)/low(off)
 8000efc:	490a      	ldr	r1, [pc, #40]	; (8000f28 <set_diostate+0x64>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f004 fa50 	bl	80053a4 <get_http_param_value>
 8000f04:	60b8      	str	r0, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <set_diostate+0x54>
		{
			val = (uint8_t)ATOI(param, 10);
 8000f0c:	210a      	movs	r1, #10
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f004 faf6 	bl	8005500 <ATOI>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73bb      	strb	r3, [r7, #14]

		//if(val == On) 		Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], true); 	// High
		//else				Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], false);	// Low
	}

	return pin;
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800b7b8 	.word	0x0800b7b8
 8000f28:	0800b7bc 	.word	0x0800b7bc

08000f2c <wizchip_select>:

//MCU STM32 variables
extern SPI_HandleTypeDef hspi2;

/* W5500 Call Back Functions */
void  wizchip_select(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <wizchip_select+0x14>)
 8000f38:	f000 fbef 	bl	800171a <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <wizchip_deselect>:
void  wizchip_deselect(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <wizchip_deselect+0x14>)
 8000f50:	f000 fbe3 	bl	800171a <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <wizchip_read>:
uint8_t wizchip_read(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t rb;
	wizchip_readburst(&rb, sizeof(rb));
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	2101      	movs	r1, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f814 	bl	8000f94 <wizchip_readburst>
	return rb;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <wizchip_write>:
void  wizchip_write(uint8_t wb){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	wizchip_writeburst(&wb, sizeof(wb));
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f819 	bl	8000fbc <wizchip_writeburst>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <wizchip_readburst>:
void wizchip_readburst(uint8_t* pBuf, uint16_t len){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, pBuf, len, HAL_MAX_DELAY);
 8000fa0:	887a      	ldrh	r2, [r7, #2]
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <wizchip_readburst+0x24>)
 8000faa:	f001 f9db 	bl	8002364 <HAL_SPI_Receive>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200015d0 	.word	0x200015d0

08000fbc <wizchip_writeburst>:
void  wizchip_writeburst(uint8_t* pBuf, uint16_t len){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pBuf, len, HAL_MAX_DELAY);
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <wizchip_writeburst+0x24>)
 8000fd2:	f001 f88b 	bl	80020ec <HAL_SPI_Transmit>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200015d0 	.word	0x200015d0

08000fe4 <Display_Net_Conf>:
void delay_cnt(volatile unsigned int nCount){
	for(; nCount!= 0;nCount--);
}
void Display_Net_Conf(void){
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t tmpstr[6] = {0,};
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	809a      	strh	r2, [r3, #4]
	wiz_NetInfo gWIZNETINFO;

	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f003 fb11 	bl	8004620 <ctlnetwork>
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4619      	mov	r1, r3
 8001004:	2008      	movs	r0, #8
 8001006:	f003 fa29 	bl	800445c <ctlwizchip>

	// Display Network Information
	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d106      	bne.n	800101e <Display_Net_Conf+0x3a>
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	4619      	mov	r1, r3
 8001016:	4828      	ldr	r0, [pc, #160]	; (80010b8 <Display_Net_Conf+0xd4>)
 8001018:	f005 fc70 	bl	80068fc <iprintf>
 800101c:	e005      	b.n	800102a <Display_Net_Conf+0x46>
		else printf("\r\n===== %s NET CONF : Static =====\r\n",(char*)tmpstr);
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4619      	mov	r1, r3
 8001024:	4825      	ldr	r0, [pc, #148]	; (80010bc <Display_Net_Conf+0xd8>)
 8001026:	f005 fc69 	bl	80068fc <iprintf>

	printf("\r\nMAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 800102a:	783b      	ldrb	r3, [r7, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	461c      	mov	r4, r3
 8001032:	78bb      	ldrb	r3, [r7, #2]
 8001034:	461d      	mov	r5, r3
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	793a      	ldrb	r2, [r7, #4]
 800103a:	7979      	ldrb	r1, [r7, #5]
 800103c:	9102      	str	r1, [sp, #8]
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	462b      	mov	r3, r5
 8001044:	4622      	mov	r2, r4
 8001046:	4601      	mov	r1, r0
 8001048:	481d      	ldr	r0, [pc, #116]	; (80010c0 <Display_Net_Conf+0xdc>)
 800104a:	f005 fc57 	bl	80068fc <iprintf>
	printf("IP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	4619      	mov	r1, r3
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	461a      	mov	r2, r3
 8001056:	7a3b      	ldrb	r3, [r7, #8]
 8001058:	4618      	mov	r0, r3
 800105a:	7a7b      	ldrb	r3, [r7, #9]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <Display_Net_Conf+0xe0>)
 8001062:	f005 fc4b 	bl	80068fc <iprintf>
	printf("GW: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	4619      	mov	r1, r3
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	461a      	mov	r2, r3
 800106e:	7c3b      	ldrb	r3, [r7, #16]
 8001070:	4618      	mov	r0, r3
 8001072:	7c7b      	ldrb	r3, [r7, #17]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4603      	mov	r3, r0
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <Display_Net_Conf+0xe4>)
 800107a:	f005 fc3f 	bl	80068fc <iprintf>
	printf("SN: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	4619      	mov	r1, r3
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	461a      	mov	r2, r3
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4603      	mov	r3, r0
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <Display_Net_Conf+0xe8>)
 8001092:	f005 fc33 	bl	80068fc <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 8001096:	7cbb      	ldrb	r3, [r7, #18]
 8001098:	4619      	mov	r1, r3
 800109a:	7cfb      	ldrb	r3, [r7, #19]
 800109c:	461a      	mov	r2, r3
 800109e:	7d3b      	ldrb	r3, [r7, #20]
 80010a0:	4618      	mov	r0, r3
 80010a2:	7d7b      	ldrb	r3, [r7, #21]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <Display_Net_Conf+0xec>)
 80010aa:	f005 fc27 	bl	80068fc <iprintf>
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800b7c0 	.word	0x0800b7c0
 80010bc:	0800b7e4 	.word	0x0800b7e4
 80010c0:	0800b80c 	.word	0x0800b80c
 80010c4:	0800b834 	.word	0x0800b834
 80010c8:	0800b848 	.word	0x0800b848
 80010cc:	0800b85c 	.word	0x0800b85c
 80010d0:	0800b870 	.word	0x0800b870

080010d4 <Net_Conf>:
void Net_Conf(wiz_NetInfo netinfo){
 80010d4:	b084      	sub	sp, #16
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
 80010da:	f107 0c08 	add.w	ip, r7, #8
 80010de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		{ 255, 255, 255, 0},								// Subnet mask
		{ 192, 168, 0, 1},									// Gateway
		{ 8, 8, 8, 8},										// DNS Server
	};
	*/
	ctlnetwork(CN_SET_NETINFO, (void*) &netinfo);
 80010e2:	f107 0108 	add.w	r1, r7, #8
 80010e6:	2000      	movs	r0, #0
 80010e8:	f003 fa9a 	bl	8004620 <ctlnetwork>
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr

080010f8 <W5500_Init>:
void W5500_Init(void){
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <W5500_Init+0x4c>)
 8001100:	463c      	mov	r4, r7
 8001102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* Register Call back function */
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001108:	490f      	ldr	r1, [pc, #60]	; (8001148 <W5500_Init+0x50>)
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <W5500_Init+0x54>)
 800110c:	f003 f92e 	bl	800436c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001110:	490f      	ldr	r1, [pc, #60]	; (8001150 <W5500_Init+0x58>)
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <W5500_Init+0x5c>)
 8001114:	f003 f94e 	bl	80043b4 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8001118:	490f      	ldr	r1, [pc, #60]	; (8001158 <W5500_Init+0x60>)
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <W5500_Init+0x64>)
 800111c:	f003 f974 	bl	8004408 <reg_wizchip_spiburst_cbfunc>

	/* W5500 Chip Initialization */
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	2001      	movs	r0, #1
 8001126:	f003 f999 	bl	800445c <ctlwizchip>
 800112a:	4603      	mov	r3, r0
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d103      	bne.n	800113a <W5500_Init+0x42>
		printf("WIZCHIP Initialized fail.\r\n");
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <W5500_Init+0x68>)
 8001134:	f005 fc56 	bl	80069e4 <puts>
		while (1);
 8001138:	e7fe      	b.n	8001138 <W5500_Init+0x40>
	}
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	0800b8a0 	.word	0x0800b8a0
 8001148:	08000f45 	.word	0x08000f45
 800114c:	08000f2d 	.word	0x08000f2d
 8001150:	08000f77 	.word	0x08000f77
 8001154:	08000f5d 	.word	0x08000f5d
 8001158:	08000fbd 	.word	0x08000fbd
 800115c:	08000f95 	.word	0x08000f95
 8001160:	0800b884 	.word	0x0800b884

08001164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118a:	f7ff fc8f 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f005 facf 	bl	8006730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff f947 	bl	8000424 <main>
  bx lr
 8001196:	4770      	bx	lr
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80011a0:	0800c980 	.word	0x0800c980
  ldr r2, =_sbss
 80011a4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80011a8:	200018b4 	.word	0x200018b4

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f8f3 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fb46 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fa7a 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_IncTick+0x20>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000028 	.word	0x20000028
 80011fc:	200016b4 	.word	0x200016b4

08001200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	200016b4 	.word	0x200016b4

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fff0 	bl	8001200 <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_Delay+0x40>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffe0 	bl	8001200 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000028 	.word	0x20000028

08001258 <__NVIC_SetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4906      	ldr	r1, [pc, #24]	; (80012f0 <__NVIC_EnableIRQ+0x34>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff4f 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff64 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ffb2 	bl	8001348 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff81 	bl	80012f4 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff57 	bl	80012bc <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b08b      	sub	sp, #44	; 0x2c
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e133      	b.n	8001694 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800142c:	2201      	movs	r2, #1
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8122 	bne.w	800168e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b12      	cmp	r3, #18
 8001450:	d034      	beq.n	80014bc <HAL_GPIO_Init+0xa4>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d80d      	bhi.n	8001472 <HAL_GPIO_Init+0x5a>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x9a>
 800145a:	2b02      	cmp	r3, #2
 800145c:	d804      	bhi.n	8001468 <HAL_GPIO_Init+0x50>
 800145e:	2b00      	cmp	r3, #0
 8001460:	d031      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
 8001462:	2b01      	cmp	r3, #1
 8001464:	d01c      	beq.n	80014a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001466:	e048      	b.n	80014fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001468:	2b03      	cmp	r3, #3
 800146a:	d043      	beq.n	80014f4 <HAL_GPIO_Init+0xdc>
 800146c:	2b11      	cmp	r3, #17
 800146e:	d01b      	beq.n	80014a8 <HAL_GPIO_Init+0x90>
          break;
 8001470:	e043      	b.n	80014fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001472:	4a8f      	ldr	r2, [pc, #572]	; (80016b0 <HAL_GPIO_Init+0x298>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d026      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
 8001478:	4a8d      	ldr	r2, [pc, #564]	; (80016b0 <HAL_GPIO_Init+0x298>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d806      	bhi.n	800148c <HAL_GPIO_Init+0x74>
 800147e:	4a8d      	ldr	r2, [pc, #564]	; (80016b4 <HAL_GPIO_Init+0x29c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d020      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
 8001484:	4a8c      	ldr	r2, [pc, #560]	; (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01d      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
          break;
 800148a:	e036      	b.n	80014fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148c:	4a8b      	ldr	r2, [pc, #556]	; (80016bc <HAL_GPIO_Init+0x2a4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
 8001492:	4a8b      	ldr	r2, [pc, #556]	; (80016c0 <HAL_GPIO_Init+0x2a8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d016      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
 8001498:	4a8a      	ldr	r2, [pc, #552]	; (80016c4 <HAL_GPIO_Init+0x2ac>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0xae>
          break;
 800149e:	e02c      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e028      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	3304      	adds	r3, #4
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e023      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	3308      	adds	r3, #8
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e01e      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	330c      	adds	r3, #12
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e019      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ce:	2304      	movs	r3, #4
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e012      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	611a      	str	r2, [r3, #16]
          break;
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e8:	2308      	movs	r3, #8
 80014ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	615a      	str	r2, [r3, #20]
          break;
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2bff      	cmp	r3, #255	; 0xff
 80014fe:	d801      	bhi.n	8001504 <HAL_GPIO_Init+0xec>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	e001      	b.n	8001508 <HAL_GPIO_Init+0xf0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3304      	adds	r3, #4
 8001508:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2bff      	cmp	r3, #255	; 0xff
 800150e:	d802      	bhi.n	8001516 <HAL_GPIO_Init+0xfe>
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x104>
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3b08      	subs	r3, #8
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	210f      	movs	r1, #15
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	6a39      	ldr	r1, [r7, #32]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	431a      	orrs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a2 	beq.w	800168e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a5e      	ldr	r2, [pc, #376]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001562:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x2b4>)
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x1b6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x1b2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_GPIO_Init+0x2c0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x1ae>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <HAL_GPIO_Init+0x2c4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x1aa>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x2c8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x1a6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x2cc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x1a2>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e00a      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015be:	2304      	movs	r3, #4
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x1b8>
 80015ce:	2300      	movs	r3, #0
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e0:	493a      	ldr	r1, [pc, #232]	; (80016cc <HAL_GPIO_Init+0x2b4>)
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	493a      	ldr	r1, [pc, #232]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4930      	ldr	r1, [pc, #192]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	492b      	ldr	r1, [pc, #172]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800163a:	4013      	ands	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	4926      	ldr	r1, [pc, #152]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	4921      	ldr	r1, [pc, #132]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001662:	4013      	ands	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	491c      	ldr	r1, [pc, #112]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	60cb      	str	r3, [r1, #12]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4917      	ldr	r1, [pc, #92]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800168a:	4013      	ands	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f aec4 	bne.w	800142c <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	372c      	adds	r7, #44	; 0x2c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10320000 	.word	0x10320000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40011800 	.word	0x40011800
 80016e4:	40011c00 	.word	0x40011c00
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001736:	e003      	b.n	8001740 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e26c      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001778:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d112      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <HAL_RCC_OscConfig+0x12c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d168      	bne.n	8001878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e246      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x76>
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e02e      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0xbc>
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6a      	ldr	r2, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fcea 	bl	8001200 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fce6 	bl	8001200 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1fa      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xe4>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fcd6 	bl	8001200 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fcd2 	bl	8001200 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1e6      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x10c>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1ba      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4939      	ldr	r1, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fc8b 	bl	8001200 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc87 	bl	8001200 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e19b      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc6a 	bl	8001200 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fc66 	bl	8001200 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e17a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03a      	beq.n	80019d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fc4a 	bl	8001200 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fc46 	bl	8001200 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e15a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 fb0a 	bl	8001fa8 <RCC_Delay>
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fc30 	bl	8001200 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	e00f      	b.n	80019c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc2c 	bl	8001200 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d908      	bls.n	80019c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e140      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000
 80019c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e9      	bne.n	80019a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a6 	beq.w	8001b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a93      	ldr	r2, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a8a      	ldr	r2, [pc, #552]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fbed 	bl	8001200 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff fbe9 	bl	8001200 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0fd      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x312>
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e02d      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x356>
 8001a88:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a69      	ldr	r2, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a63      	ldr	r2, [pc, #396]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb9d 	bl	8001200 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb99 	bl	8001200 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0ab      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x37e>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb87 	bl	8001200 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb83 	bl	8001200 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e095      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a47      	ldr	r2, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8081 	beq.w	8001c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d061      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d146      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb57 	bl	8001200 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb53 	bl	8001200 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e067      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	492d      	ldr	r1, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a19      	ldr	r1, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fb27 	bl	8001200 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff fb23 	bl	8001200 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e037      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46a>
 8001bd4:	e02f      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb10 	bl	8001200 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff fb0c 	bl	8001200 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e020      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x498>
 8001c02:	e018      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42420060 	.word	0x42420060

08001c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d0      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d040      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e073      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06b      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fa60 	bl	8001200 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff fa5c 	bl	8001200 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e053      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d210      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4601      	mov	r1, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	fa21 f303 	lsr.w	r3, r1, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1cc>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fd2c 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	0800c7b4 	.word	0x0800c7b4
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	20000024 	.word	0x20000024

08001e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e28:	1d3c      	adds	r4, r7, #4
 8001e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5e:	e02d      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e62:	623b      	str	r3, [r7, #32]
      break;
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e72:	4413      	add	r3, r2
 8001e74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c5b      	lsrs	r3, r3, #17
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e92:	4413      	add	r3, r2
 8001e94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	623b      	str	r3, [r7, #32]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc90      	pop	{r4, r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	0800b8b0 	.word	0x0800b8b0
 8001ed4:	0800b8c0 	.word	0x0800b8c0
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	003d0900 	.word	0x003d0900

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000020 	.word	0x20000020

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001efc:	f7ff fff2 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f00:	4601      	mov	r1, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	0800c7c4 	.word	0x0800c7c4

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f28:	4601      	mov	r1, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0adb      	lsrs	r3, r3, #11
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	0800c7c4 	.word	0x0800c7c4

08001f48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_GetClockConfig+0x58>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0207 	and.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <RCC_Delay+0x34>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <RCC_Delay+0x38>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0a5b      	lsrs	r3, r3, #9
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fc4:	bf00      	nop
  }
  while (Delay --);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	60fa      	str	r2, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <RCC_Delay+0x1c>
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	10624dd3 	.word	0x10624dd3

08001fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e076      	b.n	80020e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002006:	d009      	beq.n	800201c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
 800200e:	e005      	b.n	800201c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fb76 	bl	8000728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	ea42 0103 	orr.w	r1, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	0c1a      	lsrs	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f002 0204 	and.w	r2, r2, #4
 80020c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_SPI_Transmit+0x22>
 800210a:	2302      	movs	r3, #2
 800210c:	e126      	b.n	800235c <HAL_SPI_Transmit+0x270>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002116:	f7ff f873 	bl	8001200 <HAL_GetTick>
 800211a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d002      	beq.n	8002132 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800212c:	2302      	movs	r3, #2
 800212e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002130:	e10b      	b.n	800234a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_SPI_Transmit+0x52>
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002142:	e102      	b.n	800234a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2203      	movs	r2, #3
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218a:	d10f      	bne.n	80021ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d007      	beq.n	80021ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d2:	d14b      	bne.n	800226c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_Transmit+0xf6>
 80021dc:	8afb      	ldrh	r3, [r7, #22]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d13e      	bne.n	8002260 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	1c9a      	adds	r2, r3, #2
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002206:	e02b      	b.n	8002260 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d112      	bne.n	800223c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	1c9a      	adds	r2, r3, #2
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	86da      	strh	r2, [r3, #54]	; 0x36
 800223a:	e011      	b.n	8002260 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800223c:	f7fe ffe0 	bl	8001200 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d803      	bhi.n	8002254 <HAL_SPI_Transmit+0x168>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002252:	d102      	bne.n	800225a <HAL_SPI_Transmit+0x16e>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800225e:	e074      	b.n	800234a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ce      	bne.n	8002208 <HAL_SPI_Transmit+0x11c>
 800226a:	e04c      	b.n	8002306 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_Transmit+0x18e>
 8002274:	8afb      	ldrh	r3, [r7, #22]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d140      	bne.n	80022fc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a0:	e02c      	b.n	80022fc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d113      	bne.n	80022d8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80022d6:	e011      	b.n	80022fc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d8:	f7fe ff92 	bl	8001200 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <HAL_SPI_Transmit+0x204>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Transmit+0x20a>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022fa:	e026      	b.n	800234a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cd      	bne.n	80022a2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fbb8 	bl	8002a80 <SPI_EndRxTxTransaction>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	e000      	b.n	800234a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002348:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800235a:	7ffb      	ldrb	r3, [r7, #31]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002380:	d112      	bne.n	80023a8 <HAL_SPI_Receive+0x44>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10e      	bne.n	80023a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2204      	movs	r2, #4
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8f1 	bl	8002586 <HAL_SPI_TransmitReceive>
 80023a4:	4603      	mov	r3, r0
 80023a6:	e0ea      	b.n	800257e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_SPI_Receive+0x52>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0e3      	b.n	800257e <HAL_SPI_Receive+0x21a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023be:	f7fe ff1f 	bl	8001200 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023d4:	e0ca      	b.n	800256c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_Receive+0x7e>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023e6:	e0c1      	b.n	800256c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2204      	movs	r2, #4
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d10f      	bne.n	8002450 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d007      	beq.n	800246e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d162      	bne.n	800253c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002476:	e02e      	b.n	80024d6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d115      	bne.n	80024b2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f103 020c 	add.w	r2, r3, #12
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b0:	e011      	b.n	80024d6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b2:	f7fe fea5 	bl	8001200 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d803      	bhi.n	80024ca <HAL_SPI_Receive+0x166>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d102      	bne.n	80024d0 <HAL_SPI_Receive+0x16c>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024d4:	e04a      	b.n	800256c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1cb      	bne.n	8002478 <HAL_SPI_Receive+0x114>
 80024e0:	e031      	b.n	8002546 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d113      	bne.n	8002518 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	b292      	uxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	1c9a      	adds	r2, r3, #2
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002516:	e011      	b.n	800253c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002518:	f7fe fe72 	bl	8001200 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d803      	bhi.n	8002530 <HAL_SPI_Receive+0x1cc>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d102      	bne.n	8002536 <HAL_SPI_Receive+0x1d2>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800253a:	e017      	b.n	800256c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1cd      	bne.n	80024e2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fa46 	bl	80029dc <SPI_EndRxTransaction>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	e000      	b.n	800256c <HAL_SPI_Receive+0x208>
  }

error :
 800256a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800257c:	7dfb      	ldrb	r3, [r7, #23]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08c      	sub	sp, #48	; 0x30
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x26>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e18a      	b.n	80028c2 <HAL_SPI_TransmitReceive+0x33c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b4:	f7fe fe24 	bl	8001200 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d00f      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025dc:	d107      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025f4:	e15b      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260e:	e14e      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b04      	cmp	r3, #4
 800261a:	d003      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d007      	beq.n	8002678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d178      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x10a>
 800268a:	8b7b      	ldrh	r3, [r7, #26]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d166      	bne.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	e053      	b.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11b      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d113      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d119      	bne.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d014      	beq.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800273e:	f7fe fd5f 	bl	8001200 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274a:	429a      	cmp	r2, r3
 800274c:	d807      	bhi.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d003      	beq.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800275c:	e0a7      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1a6      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1a1      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002772:	e07c      	b.n	800286e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x1fc>
 800277c:	8b7b      	ldrh	r3, [r7, #26]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d16b      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a8:	e057      	b.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d11c      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d114      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d014      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002830:	2301      	movs	r3, #1
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002834:	f7fe fce4 	bl	8001200 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002840:	429a      	cmp	r2, r3
 8002842:	d803      	bhi.n	800284c <HAL_SPI_TransmitReceive+0x2c6>
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d102      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x2cc>
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002858:	e029      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1a2      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d19d      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f904 	bl	8002a80 <SPI_EndRxTxTransaction>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800288a:	e010      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	e000      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3730      	adds	r7, #48	; 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028dc:	f7fe fc90 	bl	8001200 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ec:	f7fe fc88 	bl	8001200 <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002902:	e054      	b.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d050      	beq.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290c:	f7fe fc78 	bl	8001200 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d902      	bls.n	8002922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13d      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d111      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002944:	d004      	beq.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d107      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d10f      	bne.n	800298a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e017      	b.n	80029ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d19b      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000020 	.word	0x20000020

080029dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f0:	d111      	bne.n	8002a16 <SPI_EndRxTransaction+0x3a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fa:	d004      	beq.n	8002a06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d107      	bne.n	8002a16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1e:	d117      	bne.n	8002a50 <SPI_EndRxTransaction+0x74>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d112      	bne.n	8002a50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2101      	movs	r1, #1
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff ff49 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01a      	beq.n	8002a76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e013      	b.n	8002a78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff ff36 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e000      	b.n	8002a78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff ff18 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e000      	b.n	8002ab4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f839 	bl	8002b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 f9c2 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e044      	b.n	8002c0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_TIM_Base_Start_IT+0xac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_TIM_Base_Start_IT+0xb0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_TIM_Base_Start_IT+0xb8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_TIM_Base_Start_IT+0xbc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d010      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e007      	b.n	8002c0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40013400 	.word	0x40013400
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00

08002c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d122      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d11b      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0202 	mvn.w	r2, #2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8ed 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8e0 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8ef 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d122      	bne.n	8002cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0204 	mvn.w	r2, #4
 8002cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8c3 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002cc8:	e005      	b.n	8002cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8b6 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8c5 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d122      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f899 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f88c 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f89b 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d122      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d11b      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0210 	mvn.w	r2, #16
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f86f 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f862 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f871 	bl	8002e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0201 	mvn.w	r2, #1
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fc62 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8d7 	bl	8002f8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f835 	bl	8002e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0220 	mvn.w	r2, #32
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8a2 	bl	8002f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a33      	ldr	r2, [pc, #204]	; (8002f64 <TIM_Base_SetConfig+0xe0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a32      	ldr	r2, [pc, #200]	; (8002f68 <TIM_Base_SetConfig+0xe4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <TIM_Base_SetConfig+0xe8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <TIM_Base_SetConfig+0xec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <TIM_Base_SetConfig+0xf0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <TIM_Base_SetConfig+0xe0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x82>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <TIM_Base_SetConfig+0xe4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x82>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x82>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <TIM_Base_SetConfig+0xe8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x82>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <TIM_Base_SetConfig+0xec>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x82>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <TIM_Base_SetConfig+0xf0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <TIM_Base_SetConfig+0xe0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0xc8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <TIM_Base_SetConfig+0xe4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00

08002f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e03f      	b.n	800302e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fbfc 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f905 	bl	80031f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08a      	sub	sp, #40	; 0x28
 800303a:	af02      	add	r7, sp, #8
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	d17c      	bne.n	8003150 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_UART_Transmit+0x2c>
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e075      	b.n	8003152 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_UART_Transmit+0x3e>
 8003070:	2302      	movs	r3, #2
 8003072:	e06e      	b.n	8003152 <HAL_UART_Transmit+0x11c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2221      	movs	r2, #33	; 0x21
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308a:	f7fe f8b9 	bl	8001200 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a4:	d108      	bne.n	80030b8 <HAL_UART_Transmit+0x82>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e003      	b.n	80030c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030c8:	e02a      	b.n	8003120 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f840 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e036      	b.n	8003152 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	3302      	adds	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e007      	b.n	8003112 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1cf      	bne.n	80030ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f810 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e006      	b.n	8003152 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e02c      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d028      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
 800317a:	f7fe f841 	bl	8001200 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	429a      	cmp	r2, r3
 8003188:	d21d      	bcs.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003198:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e00f      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d0c3      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800322a:	f023 030c 	bic.w	r3, r3, #12
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	430b      	orrs	r3, r1
 8003236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <UART_SetConfig+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d103      	bne.n	8003260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7fe fe62 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	e002      	b.n	8003266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7fe fe4a 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8003264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	0119      	lsls	r1, r3, #4
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a15      	ldr	r2, [pc, #84]	; (8003308 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	4419      	add	r1, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <UART_SetConfig+0x118>)
 80032d6:	fba3 0302 	umull	r0, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2064      	movs	r0, #100	; 0x64
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <UART_SetConfig+0x118>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	440a      	add	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013800 	.word	0x40013800
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af04      	add	r7, sp, #16
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	4613      	mov	r3, r2
 800331a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 800331c:	2300      	movs	r3, #0
 800331e:	82fb      	strh	r3, [r7, #22]
 8003320:	2300      	movs	r3, #0
 8003322:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	3301      	adds	r3, #1
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f915 	bl	8003560 <WIZCHIP_READ>
 8003336:	4603      	mov	r3, r0
 8003338:	2b1c      	cmp	r3, #28
 800333a:	f200 80fe 	bhi.w	800353a <loopback_tcps+0x22e>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <loopback_tcps+0x38>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	0800351f 	.word	0x0800351f
 8003348:	0800353b 	.word	0x0800353b
 800334c:	0800353b 	.word	0x0800353b
 8003350:	0800353b 	.word	0x0800353b
 8003354:	0800353b 	.word	0x0800353b
 8003358:	0800353b 	.word	0x0800353b
 800335c:	0800353b 	.word	0x0800353b
 8003360:	0800353b 	.word	0x0800353b
 8003364:	0800353b 	.word	0x0800353b
 8003368:	0800353b 	.word	0x0800353b
 800336c:	0800353b 	.word	0x0800353b
 8003370:	0800353b 	.word	0x0800353b
 8003374:	0800353b 	.word	0x0800353b
 8003378:	0800353b 	.word	0x0800353b
 800337c:	0800353b 	.word	0x0800353b
 8003380:	0800353b 	.word	0x0800353b
 8003384:	0800353b 	.word	0x0800353b
 8003388:	0800353b 	.word	0x0800353b
 800338c:	0800353b 	.word	0x0800353b
 8003390:	080034fd 	.word	0x080034fd
 8003394:	0800353b 	.word	0x0800353b
 8003398:	0800353b 	.word	0x0800353b
 800339c:	0800353b 	.word	0x0800353b
 80033a0:	080033b9 	.word	0x080033b9
 80033a4:	0800353b 	.word	0x0800353b
 80033a8:	0800353b 	.word	0x0800353b
 80033ac:	0800353b 	.word	0x0800353b
 80033b0:	0800353b 	.word	0x0800353b
 80033b4:	080034db 	.word	0x080034db
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3301      	adds	r3, #1
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f8cb 	bl	8003560 <WIZCHIP_READ>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d042      	beq.n	800345a <loopback_tcps+0x14e>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3301      	adds	r3, #1
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80033e0:	4618      	mov	r0, r3
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	2204      	movs	r2, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	f000 f953 	bl	8003694 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f8b0 	bl	8003560 <WIZCHIP_READ>
 8003400:	4603      	mov	r3, r0
 8003402:	b29b      	uxth	r3, r3
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b29c      	uxth	r4, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3301      	adds	r3, #1
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f8a3 	bl	8003560 <WIZCHIP_READ>
 800341a:	4603      	mov	r3, r0
 800341c:	b29b      	uxth	r3, r3
 800341e:	4423      	add	r3, r4
 8003420:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8003422:	79f9      	ldrb	r1, [r7, #7]
 8003424:	7a3b      	ldrb	r3, [r7, #8]
 8003426:	461c      	mov	r4, r3
 8003428:	7a7b      	ldrb	r3, [r7, #9]
 800342a:	461d      	mov	r5, r3
 800342c:	7abb      	ldrb	r3, [r7, #10]
 800342e:	461a      	mov	r2, r3
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	4618      	mov	r0, r3
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	9001      	str	r0, [sp, #4]
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	462b      	mov	r3, r5
 800343e:	4622      	mov	r2, r4
 8003440:	4844      	ldr	r0, [pc, #272]	; (8003554 <loopback_tcps+0x248>)
 8003442:	f003 fa5b 	bl	80068fc <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3301      	adds	r3, #1
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f8cf 	bl	80035f8 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fa24 	bl	80038aa <getSn_RX_RSR>
 8003462:	4603      	mov	r3, r0
 8003464:	82fb      	strh	r3, [r7, #22]
 8003466:	8afb      	ldrh	r3, [r7, #22]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d068      	beq.n	800353e <loopback_tcps+0x232>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800346c:	8afb      	ldrh	r3, [r7, #22]
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d902      	bls.n	800347a <loopback_tcps+0x16e>
 8003474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003478:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 800347a:	8afa      	ldrh	r2, [r7, #22]
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fe63 	bl	800414c <recv>
 8003486:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	dc01      	bgt.n	8003492 <loopback_tcps+0x186>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	e05b      	b.n	800354a <loopback_tcps+0x23e>
			size = (uint16_t) ret;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 800349a:	e019      	b.n	80034d0 <loopback_tcps+0x1c4>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 800349c:	8abb      	ldrh	r3, [r7, #20]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	18d1      	adds	r1, r2, r3
 80034a2:	8afa      	ldrh	r2, [r7, #22]
 80034a4:	8abb      	ldrh	r3, [r7, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fd53 	bl	8003f58 <send>
 80034b2:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da05      	bge.n	80034c6 <loopback_tcps+0x1ba>
				{
					close(sn);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc0d 	bl	8003cdc <close>
					return ret;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	e041      	b.n	800354a <loopback_tcps+0x23e>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	8abb      	ldrh	r3, [r7, #20]
 80034cc:	4413      	add	r3, r2
 80034ce:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 80034d0:	8afa      	ldrh	r2, [r7, #22]
 80034d2:	8abb      	ldrh	r3, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1e1      	bne.n	800349c <loopback_tcps+0x190>
			}
         }
         break;
 80034d8:	e031      	b.n	800353e <loopback_tcps+0x232>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fcc5 	bl	8003e6c <disconnect>
 80034e2:	4603      	mov	r3, r0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <loopback_tcps+0x1e4>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	e02c      	b.n	800354a <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4619      	mov	r1, r3
 80034f4:	4818      	ldr	r0, [pc, #96]	; (8003558 <loopback_tcps+0x24c>)
 80034f6:	f003 fa01 	bl	80068fc <iprintf>
#endif
         break;
 80034fa:	e025      	b.n	8003548 <loopback_tcps+0x23c>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	88ba      	ldrh	r2, [r7, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	4816      	ldr	r0, [pc, #88]	; (800355c <loopback_tcps+0x250>)
 8003504:	f003 f9fa 	bl	80068fc <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fc54 	bl	8003db8 <listen>
 8003510:	4603      	mov	r3, r0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d013      	beq.n	8003542 <loopback_tcps+0x236>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	e015      	b.n	800354a <loopback_tcps+0x23e>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 800351e:	88ba      	ldrh	r2, [r7, #4]
 8003520:	79f8      	ldrb	r0, [r7, #7]
 8003522:	2300      	movs	r3, #0
 8003524:	2101      	movs	r1, #1
 8003526:	f000 fac3 	bl	8003ab0 <socket>
 800352a:	4603      	mov	r3, r0
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d007      	beq.n	8003546 <loopback_tcps+0x23a>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	e007      	b.n	800354a <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 800353a:	bf00      	nop
 800353c:	e004      	b.n	8003548 <loopback_tcps+0x23c>
         break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <loopback_tcps+0x23c>
         break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <loopback_tcps+0x23c>
         break;
 8003546:	bf00      	nop
   }
   return 1;
 8003548:	2301      	movs	r3, #1
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bdb0      	pop	{r4, r5, r7, pc}
 8003552:	bf00      	nop
 8003554:	0800b8c4 	.word	0x0800b8c4
 8003558:	0800b8e8 	.word	0x0800b8e8
 800355c:	0800b8fc 	.word	0x0800b8fc

08003560 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <WIZCHIP_READ+0x94>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <WIZCHIP_READ+0x94>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <WIZCHIP_READ+0x94>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <WIZCHIP_READ+0x24>
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <WIZCHIP_READ+0x94>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d114      	bne.n	80035ae <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <WIZCHIP_READ+0x94>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	0c12      	lsrs	r2, r2, #16
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	4610      	mov	r0, r2
 8003590:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <WIZCHIP_READ+0x94>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	0a12      	lsrs	r2, r2, #8
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <WIZCHIP_READ+0x94>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
 80035ac:	e011      	b.n	80035d2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <WIZCHIP_READ+0x94>)
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f107 020c 	add.w	r2, r7, #12
 80035cc:	2103      	movs	r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <WIZCHIP_READ+0x94>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4798      	blx	r3
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <WIZCHIP_READ+0x94>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <WIZCHIP_READ+0x94>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4798      	blx	r3
   return ret;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000002c 	.word	0x2000002c

080035f8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <WIZCHIP_WRITE+0x98>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4798      	blx	r3
   WIZCHIP.CS._select();
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <WIZCHIP_WRITE+0x98>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <WIZCHIP_WRITE+0x98>)
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d119      	bne.n	8003654 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <WIZCHIP_WRITE+0x98>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	0c12      	lsrs	r2, r2, #16
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	4610      	mov	r0, r2
 800362c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <WIZCHIP_WRITE+0x98>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	0a12      	lsrs	r2, r2, #8
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	4610      	mov	r0, r2
 800363a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <WIZCHIP_WRITE+0x98>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4610      	mov	r0, r2
 8003646:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <WIZCHIP_WRITE+0x98>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	4610      	mov	r0, r2
 8003650:	4798      	blx	r3
 8003652:	e013      	b.n	800367c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b2db      	uxtb	r3, r3
 8003662:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <WIZCHIP_WRITE+0x98>)
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f107 020c 	add.w	r2, r7, #12
 8003676:	2104      	movs	r1, #4
 8003678:	4610      	mov	r0, r2
 800367a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <WIZCHIP_WRITE+0x98>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003682:	4b03      	ldr	r3, [pc, #12]	; (8003690 <WIZCHIP_WRITE+0x98>)
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4798      	blx	r3
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	2000002c 	.word	0x2000002c

08003694 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <WIZCHIP_READ_BUF+0x2a>
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d126      	bne.n	800370c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	0c12      	lsrs	r2, r2, #16
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	0a12      	lsrs	r2, r2, #8
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	4610      	mov	r0, r2
 80036e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	82fb      	strh	r3, [r7, #22]
 80036ea:	e00a      	b.n	8003702 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	8afa      	ldrh	r2, [r7, #22]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	188c      	adds	r4, r1, r2
 80036f6:	4798      	blx	r3
 80036f8:	4603      	mov	r3, r0
 80036fa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80036fc:	8afb      	ldrh	r3, [r7, #22]
 80036fe:	3301      	adds	r3, #1
 8003700:	82fb      	strh	r3, [r7, #22]
 8003702:	8afa      	ldrh	r2, [r7, #22]
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	429a      	cmp	r2, r3
 8003708:	d3f0      	bcc.n	80036ec <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800370a:	e017      	b.n	800373c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2db      	uxtb	r3, r3
 8003712:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2db      	uxtb	r3, r3
 800371a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	f107 0210 	add.w	r2, r7, #16
 800372a:	2103      	movs	r1, #3
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	4611      	mov	r1, r2
 8003738:	68b8      	ldr	r0, [r7, #8]
 800373a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003742:	4b03      	ldr	r3, [pc, #12]	; (8003750 <WIZCHIP_READ_BUF+0xbc>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4798      	blx	r3
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	2000002c 	.word	0x2000002c

08003754 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003768:	4b29      	ldr	r3, [pc, #164]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d126      	bne.n	80037cc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	0c12      	lsrs	r2, r2, #16
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4610      	mov	r0, r2
 800378a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800378c:	4b20      	ldr	r3, [pc, #128]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	0a12      	lsrs	r2, r2, #8
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4610      	mov	r0, r2
 8003798:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	82fb      	strh	r3, [r7, #22]
 80037aa:	e00a      	b.n	80037c2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	8afa      	ldrh	r2, [r7, #22]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	440a      	add	r2, r1
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80037bc:	8afb      	ldrh	r3, [r7, #22]
 80037be:	3301      	adds	r3, #1
 80037c0:	82fb      	strh	r3, [r7, #22]
 80037c2:	8afa      	ldrh	r2, [r7, #22]
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3f0      	bcc.n	80037ac <WIZCHIP_WRITE_BUF+0x58>
 80037ca:	e017      	b.n	80037fc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f107 0210 	add.w	r2, r7, #16
 80037ea:	2103      	movs	r1, #3
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	4611      	mov	r1, r2
 80037f8:	68b8      	ldr	r0, [r7, #8]
 80037fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003802:	4b03      	ldr	r3, [pc, #12]	; (8003810 <WIZCHIP_WRITE_BUF+0xbc>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4798      	blx	r3
}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	2000002c 	.word	0x2000002c

08003814 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800381e:	2300      	movs	r3, #0
 8003820:	81fb      	strh	r3, [r7, #14]
 8003822:	2300      	movs	r3, #0
 8003824:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3301      	adds	r3, #1
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fe94 	bl	8003560 <WIZCHIP_READ>
 8003838:	4603      	mov	r3, r0
 800383a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800383c:	89bb      	ldrh	r3, [r7, #12]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b29c      	uxth	r4, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3301      	adds	r3, #1
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fe86 	bl	8003560 <WIZCHIP_READ>
 8003854:	4603      	mov	r3, r0
 8003856:	b29b      	uxth	r3, r3
 8003858:	4423      	add	r3, r4
 800385a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800385c:	89bb      	ldrh	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01a      	beq.n	8003898 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	3301      	adds	r3, #1
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fe76 	bl	8003560 <WIZCHIP_READ>
 8003874:	4603      	mov	r3, r0
 8003876:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	b29c      	uxth	r4, r3
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	3301      	adds	r3, #1
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe68 	bl	8003560 <WIZCHIP_READ>
 8003890:	4603      	mov	r3, r0
 8003892:	b29b      	uxth	r3, r3
 8003894:	4423      	add	r3, r4
 8003896:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	89bb      	ldrh	r3, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d1c2      	bne.n	8003826 <getSn_TX_FSR+0x12>
   return val;
 80038a0:	89fb      	ldrh	r3, [r7, #14]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}

080038aa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80038aa:	b590      	push	{r4, r7, lr}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	81fb      	strh	r3, [r7, #14]
 80038b8:	2300      	movs	r3, #0
 80038ba:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3301      	adds	r3, #1
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fe49 	bl	8003560 <WIZCHIP_READ>
 80038ce:	4603      	mov	r3, r0
 80038d0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80038d2:	89bb      	ldrh	r3, [r7, #12]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	b29c      	uxth	r4, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3301      	adds	r3, #1
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fe3b 	bl	8003560 <WIZCHIP_READ>
 80038ea:	4603      	mov	r3, r0
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4423      	add	r3, r4
 80038f0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80038f2:	89bb      	ldrh	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	3301      	adds	r3, #1
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fe2b 	bl	8003560 <WIZCHIP_READ>
 800390a:	4603      	mov	r3, r0
 800390c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800390e:	89fb      	ldrh	r3, [r7, #14]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b29c      	uxth	r4, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	3301      	adds	r3, #1
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fe1d 	bl	8003560 <WIZCHIP_READ>
 8003926:	4603      	mov	r3, r0
 8003928:	b29b      	uxth	r3, r3
 800392a:	4423      	add	r3, r4
 800392c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800392e:	89fa      	ldrh	r2, [r7, #14]
 8003930:	89bb      	ldrh	r3, [r7, #12]
 8003932:	429a      	cmp	r2, r3
 8003934:	d1c2      	bne.n	80038bc <getSn_RX_RSR+0x12>
   return val;
 8003936:	89fb      	ldrh	r3, [r7, #14]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}

08003940 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003958:	88bb      	ldrh	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d048      	beq.n	80039f0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3301      	adds	r3, #1
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fdf8 	bl	8003560 <WIZCHIP_READ>
 8003970:	4603      	mov	r3, r0
 8003972:	b29b      	uxth	r3, r3
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	b29c      	uxth	r4, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	3301      	adds	r3, #1
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fdeb 	bl	8003560 <WIZCHIP_READ>
 800398a:	4603      	mov	r3, r0
 800398c:	b29b      	uxth	r3, r3
 800398e:	4423      	add	r3, r4
 8003990:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003992:	89fb      	ldrh	r3, [r7, #14]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	79fa      	ldrb	r2, [r7, #7]
 8003998:	0092      	lsls	r2, r2, #2
 800399a:	3202      	adds	r2, #2
 800399c:	00d2      	lsls	r2, r2, #3
 800399e:	4413      	add	r3, r2
 80039a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80039a2:	88bb      	ldrh	r3, [r7, #4]
 80039a4:	461a      	mov	r2, r3
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	68b8      	ldr	r0, [r7, #8]
 80039aa:	f7ff fed3 	bl	8003754 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80039ae:	89fa      	ldrh	r2, [r7, #14]
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3301      	adds	r3, #1
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80039c2:	461a      	mov	r2, r3
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7ff fe12 	bl	80035f8 <WIZCHIP_WRITE>
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	3301      	adds	r3, #1
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80039e0:	461a      	mov	r2, r3
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f7ff fe05 	bl	80035f8 <WIZCHIP_WRITE>
 80039ee:	e000      	b.n	80039f2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80039f0:	bf00      	nop
}
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003a10:	88bb      	ldrh	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d048      	beq.n	8003aa8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fd9c 	bl	8003560 <WIZCHIP_READ>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	b29c      	uxth	r4, r3
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	3301      	adds	r3, #1
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fd8f 	bl	8003560 <WIZCHIP_READ>
 8003a42:	4603      	mov	r3, r0
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4423      	add	r3, r4
 8003a48:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	79fa      	ldrb	r2, [r7, #7]
 8003a50:	0092      	lsls	r2, r2, #2
 8003a52:	3203      	adds	r2, #3
 8003a54:	00d2      	lsls	r2, r2, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003a5a:	88bb      	ldrh	r3, [r7, #4]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	68b8      	ldr	r0, [r7, #8]
 8003a62:	f7ff fe17 	bl	8003694 <WIZCHIP_READ_BUF>
   ptr += len;
 8003a66:	89fa      	ldrh	r2, [r7, #14]
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	3301      	adds	r3, #1
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7ff fdb6 	bl	80035f8 <WIZCHIP_WRITE>
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	3301      	adds	r3, #1
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003a98:	461a      	mov	r2, r3
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7ff fda9 	bl	80035f8 <WIZCHIP_WRITE>
 8003aa6:	e000      	b.n	8003aaa <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003aa8:	bf00      	nop
}
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}

08003ab0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	71fb      	strb	r3, [r7, #7]
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71bb      	strb	r3, [r7, #6]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	80bb      	strh	r3, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d902      	bls.n	8003ada <socket+0x2a>
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e0f1      	b.n	8003cbe <socket+0x20e>
	switch(protocol)
 8003ada:	79bb      	ldrb	r3, [r7, #6]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d004      	beq.n	8003aea <socket+0x3a>
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	db10      	blt.n	8003b06 <socket+0x56>
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	dc0e      	bgt.n	8003b06 <socket+0x56>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003ae8:	e011      	b.n	8003b0e <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	2204      	movs	r2, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003af6:	f7ff fdcd 	bl	8003694 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <socket+0x5c>
 8003b00:	f06f 0302 	mvn.w	r3, #2
 8003b04:	e0db      	b.n	8003cbe <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003b06:	f06f 0304 	mvn.w	r3, #4
 8003b0a:	e0d8      	b.n	8003cbe <socket+0x20e>
	    break;
 8003b0c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <socket+0x6e>
 8003b18:	f06f 0305 	mvn.w	r3, #5
 8003b1c:	e0cf      	b.n	8003cbe <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d025      	beq.n	8003b70 <socket+0xc0>
	{
   	switch(protocol)
 8003b24:	79bb      	ldrb	r3, [r7, #6]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d002      	beq.n	8003b30 <socket+0x80>
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d008      	beq.n	8003b40 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003b2e:	e024      	b.n	8003b7a <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11c      	bne.n	8003b74 <socket+0xc4>
 8003b3a:	f06f 0305 	mvn.w	r3, #5
 8003b3e:	e0be      	b.n	8003cbe <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db02      	blt.n	8003b58 <socket+0xa8>
 8003b52:	f06f 0305 	mvn.w	r3, #5
 8003b56:	e0b2      	b.n	8003cbe <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	db06      	blt.n	8003b78 <socket+0xc8>
 8003b6a:	f06f 0305 	mvn.w	r3, #5
 8003b6e:	e0a6      	b.n	8003cbe <socket+0x20e>
   	}
   }
 8003b70:	bf00      	nop
 8003b72:	e002      	b.n	8003b7a <socket+0xca>
   	      break;
 8003b74:	bf00      	nop
 8003b76:	e000      	b.n	8003b7a <socket+0xca>
   	      break;
 8003b78:	bf00      	nop
	close(sn);
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f8ad 	bl	8003cdc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3301      	adds	r3, #1
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	b25a      	sxtb	r2, r3
 8003b96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7ff fd29 	bl	80035f8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003ba6:	88bb      	ldrh	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d110      	bne.n	8003bce <socket+0x11e>
	{
	   port = sock_any_port++;
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <socket+0x218>)
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	b291      	uxth	r1, r2
 8003bb4:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <socket+0x218>)
 8003bb6:	8011      	strh	r1, [r2, #0]
 8003bb8:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003bba:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <socket+0x218>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d103      	bne.n	8003bce <socket+0x11e>
 8003bc6:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <socket+0x218>)
 8003bc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003bcc:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	461a      	mov	r2, r3
 8003bdc:	88bb      	ldrh	r3, [r7, #4]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7ff fd06 	bl	80035f8 <WIZCHIP_WRITE>
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7ff fcf9 	bl	80035f8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fcef 	bl	80035f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003c1a:	bf00      	nop
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	3301      	adds	r3, #1
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fc99 	bl	8003560 <WIZCHIP_READ>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f3      	bne.n	8003c1c <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	2201      	movs	r2, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	b21a      	sxth	r2, r3
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <socket+0x21c>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b21b      	sxth	r3, r3
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <socket+0x21c>)
 8003c50:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 0201 	and.w	r2, r3, #1
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <socket+0x21c>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <socket+0x21c>)
 8003c6e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2201      	movs	r2, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <socket+0x220>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	4013      	ands	r3, r2
 8003c86:	b21b      	sxth	r3, r3
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <socket+0x220>)
 8003c8c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <socket+0x224>)
 8003c92:	2100      	movs	r1, #0
 8003c94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <socket+0x228>)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003ca0:	bf00      	nop
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fc56 	bl	8003560 <WIZCHIP_READ>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f3      	beq.n	8003ca2 <socket+0x1f2>
   return (int8_t)sn;
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000002a 	.word	0x2000002a
 8003ccc:	200000e4 	.word	0x200000e4
 8003cd0:	200000e6 	.word	0x200000e6
 8003cd4:	200000e8 	.word	0x200000e8
 8003cd8:	200000f8 	.word	0x200000f8

08003cdc <close>:

int8_t close(uint8_t sn)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d902      	bls.n	8003cf2 <close+0x16>
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e055      	b.n	8003d9e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cfe:	2110      	movs	r1, #16
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fc79 	bl	80035f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003d06:	bf00      	nop
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fc23 	bl	8003560 <WIZCHIP_READ>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f3      	bne.n	8003d08 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	3301      	adds	r3, #1
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d2c:	211f      	movs	r1, #31
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fc62 	bl	80035f8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <close+0xcc>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <close+0xcc>)
 8003d50:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2201      	movs	r2, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <close+0xd0>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	4013      	ands	r3, r2
 8003d68:	b21b      	sxth	r3, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <close+0xd0>)
 8003d6e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <close+0xd4>)
 8003d74:	2100      	movs	r1, #0
 8003d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <close+0xd8>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003d82:	bf00      	nop
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	3301      	adds	r3, #1
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fbe5 	bl	8003560 <WIZCHIP_READ>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f3      	bne.n	8003d84 <close+0xa8>
	return SOCK_OK;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200000e4 	.word	0x200000e4
 8003dac:	200000e6 	.word	0x200000e6
 8003db0:	200000e8 	.word	0x200000e8
 8003db4:	200000f8 	.word	0x200000f8

08003db8 <listen>:

int8_t listen(uint8_t sn)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d902      	bls.n	8003dce <listen+0x16>
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	e049      	b.n	8003e62 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fbc2 	bl	8003560 <WIZCHIP_READ>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d002      	beq.n	8003dec <listen+0x34>
 8003de6:	f06f 0304 	mvn.w	r3, #4
 8003dea:	e03a      	b.n	8003e62 <listen+0xaa>
	CHECK_SOCKINIT();
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	3301      	adds	r3, #1
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fbb1 	bl	8003560 <WIZCHIP_READ>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b13      	cmp	r3, #19
 8003e02:	d002      	beq.n	8003e0a <listen+0x52>
 8003e04:	f06f 0302 	mvn.w	r3, #2
 8003e08:	e02b      	b.n	8003e62 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	3301      	adds	r3, #1
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e16:	2102      	movs	r1, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fbed 	bl	80035f8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003e1e:	bf00      	nop
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	3301      	adds	r3, #1
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fb97 	bl	8003560 <WIZCHIP_READ>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f3      	bne.n	8003e20 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003e38:	e006      	b.n	8003e48 <listen+0x90>
   {
         close(sn);
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff4d 	bl	8003cdc <close>
         return SOCKERR_SOCKCLOSED;
 8003e42:	f06f 0303 	mvn.w	r3, #3
 8003e46:	e00c      	b.n	8003e62 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb83 	bl	8003560 <WIZCHIP_READ>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b14      	cmp	r3, #20
 8003e5e:	d1ec      	bne.n	8003e3a <listen+0x82>
   }
   return SOCK_OK;
 8003e60:	2301      	movs	r3, #1
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d902      	bls.n	8003e82 <disconnect+0x16>
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e062      	b.n	8003f48 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3301      	adds	r3, #1
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fb68 	bl	8003560 <WIZCHIP_READ>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <disconnect+0x34>
 8003e9a:	f06f 0304 	mvn.w	r3, #4
 8003e9e:	e053      	b.n	8003f48 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003eac:	2108      	movs	r1, #8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fba2 	bl	80035f8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003eb4:	bf00      	nop
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3301      	adds	r3, #1
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fb4c 	bl	8003560 <WIZCHIP_READ>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f3      	bne.n	8003eb6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	b21a      	sxth	r2, r3
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <disconnect+0xe4>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <disconnect+0xe4>)
 8003eea:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <disconnect+0xe8>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	fa42 f303 	asr.w	r3, r2, r3
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d016      	beq.n	8003f2e <disconnect+0xc2>
 8003f00:	2300      	movs	r3, #0
 8003f02:	e021      	b.n	8003f48 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3301      	adds	r3, #1
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fb25 	bl	8003560 <WIZCHIP_READ>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <disconnect+0xc2>
	   {
	      close(sn);
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff feda 	bl	8003cdc <close>
	      return SOCKERR_TIMEOUT;
 8003f28:	f06f 030c 	mvn.w	r3, #12
 8003f2c:	e00c      	b.n	8003f48 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3301      	adds	r3, #1
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fb10 	bl	8003560 <WIZCHIP_READ>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1de      	bne.n	8003f04 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003f46:	2301      	movs	r3, #1
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200000e6 	.word	0x200000e6
 8003f54:	200000e4 	.word	0x200000e4

08003f58 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	4613      	mov	r3, r2
 8003f66:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d902      	bls.n	8003f7c <send+0x24>
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	e0de      	b.n	800413a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff faeb 	bl	8003560 <WIZCHIP_READ>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d002      	beq.n	8003f9a <send+0x42>
 8003f94:	f06f 0304 	mvn.w	r3, #4
 8003f98:	e0cf      	b.n	800413a <send+0x1e2>
   CHECK_SOCKDATA();
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <send+0x4e>
 8003fa0:	f06f 030d 	mvn.w	r3, #13
 8003fa4:	e0c9      	b.n	800413a <send+0x1e2>
   tmp = getSn_SR(sn);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fad4 	bl	8003560 <WIZCHIP_READ>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b17      	cmp	r3, #23
 8003fc0:	d005      	beq.n	8003fce <send+0x76>
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b1c      	cmp	r3, #28
 8003fc6:	d002      	beq.n	8003fce <send+0x76>
 8003fc8:	f06f 0306 	mvn.w	r3, #6
 8003fcc:	e0b5      	b.n	800413a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <send+0x1ec>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	fa42 f303 	asr.w	r3, r2, r3
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d039      	beq.n	8004056 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fab6 	bl	8003560 <WIZCHIP_READ>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d019      	beq.n	800403a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3301      	adds	r3, #1
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004012:	2110      	movs	r1, #16
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff faef 	bl	80035f8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2201      	movs	r2, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	b21b      	sxth	r3, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	b21a      	sxth	r2, r3
 8004028:	4b46      	ldr	r3, [pc, #280]	; (8004144 <send+0x1ec>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b21b      	sxth	r3, r3
 800402e:	4013      	ands	r3, r2
 8004030:	b21b      	sxth	r3, r3
 8004032:	b29a      	uxth	r2, r3
 8004034:	4b43      	ldr	r3, [pc, #268]	; (8004144 <send+0x1ec>)
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	e00d      	b.n	8004056 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <send+0xfa>
      {
         close(sn);
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fe48 	bl	8003cdc <close>
         return SOCKERR_TIMEOUT;
 800404c:	f06f 030c 	mvn.w	r3, #12
 8004050:	e073      	b.n	800413a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004052:	2300      	movs	r3, #0
 8004054:	e071      	b.n	800413a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	3301      	adds	r3, #1
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fa7c 	bl	8003560 <WIZCHIP_READ>
 8004068:	4603      	mov	r3, r0
 800406a:	b29b      	uxth	r3, r3
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004070:	88ba      	ldrh	r2, [r7, #4]
 8004072:	89bb      	ldrh	r3, [r7, #12]
 8004074:	429a      	cmp	r2, r3
 8004076:	d901      	bls.n	800407c <send+0x124>
 8004078:	89bb      	ldrh	r3, [r7, #12]
 800407a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fbc8 	bl	8003814 <getSn_TX_FSR>
 8004084:	4603      	mov	r3, r0
 8004086:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3301      	adds	r3, #1
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fa63 	bl	8003560 <WIZCHIP_READ>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b17      	cmp	r3, #23
 80040a2:	d009      	beq.n	80040b8 <send+0x160>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b1c      	cmp	r3, #28
 80040a8:	d006      	beq.n	80040b8 <send+0x160>
      {
         close(sn);
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fe15 	bl	8003cdc <close>
         return SOCKERR_SOCKSTATUS;
 80040b2:	f06f 0306 	mvn.w	r3, #6
 80040b6:	e040      	b.n	800413a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <send+0x1f0>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	fa42 f303 	asr.w	r3, r2, r3
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <send+0x180>
 80040cc:	88ba      	ldrh	r2, [r7, #4]
 80040ce:	89bb      	ldrh	r3, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d901      	bls.n	80040d8 <send+0x180>
 80040d4:	2300      	movs	r3, #0
 80040d6:	e030      	b.n	800413a <send+0x1e2>
      if(len <= freesize) break;
 80040d8:	88ba      	ldrh	r2, [r7, #4]
 80040da:	89bb      	ldrh	r3, [r7, #12]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d900      	bls.n	80040e2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80040e0:	e7cc      	b.n	800407c <send+0x124>
      if(len <= freesize) break;
 80040e2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80040e4:	88ba      	ldrh	r2, [r7, #4]
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fc28 	bl	8003940 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	3301      	adds	r3, #1
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040fc:	2120      	movs	r1, #32
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fa7a 	bl	80035f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004104:	bf00      	nop
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3301      	adds	r3, #1
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fa24 	bl	8003560 <WIZCHIP_READ>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f3      	bne.n	8004106 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	b21a      	sxth	r2, r3
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <send+0x1ec>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b21b      	sxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b21b      	sxth	r3, r3
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <send+0x1ec>)
 8004136:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004138:	88bb      	ldrh	r3, [r7, #4]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200000e6 	.word	0x200000e6
 8004148:	200000e4 	.word	0x200000e4

0800414c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	6039      	str	r1, [r7, #0]
 8004156:	71fb      	strb	r3, [r7, #7]
 8004158:	4613      	mov	r3, r2
 800415a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d902      	bls.n	8004170 <recv+0x24>
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e09c      	b.n	80042aa <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	3301      	adds	r3, #1
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f9f1 	bl	8003560 <WIZCHIP_READ>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <recv+0x42>
 8004188:	f06f 0304 	mvn.w	r3, #4
 800418c:	e08d      	b.n	80042aa <recv+0x15e>
   CHECK_SOCKDATA();
 800418e:	88bb      	ldrh	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <recv+0x4e>
 8004194:	f06f 030d 	mvn.w	r3, #13
 8004198:	e087      	b.n	80042aa <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	3301      	adds	r3, #1
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f9da 	bl	8003560 <WIZCHIP_READ>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80041b4:	89ba      	ldrh	r2, [r7, #12]
 80041b6:	88bb      	ldrh	r3, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d201      	bcs.n	80041c0 <recv+0x74>
 80041bc:	89bb      	ldrh	r3, [r7, #12]
 80041be:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fb71 	bl	80038aa <getSn_RX_RSR>
 80041c8:	4603      	mov	r3, r0
 80041ca:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3301      	adds	r3, #1
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff f9c1 	bl	8003560 <WIZCHIP_READ>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b17      	cmp	r3, #23
 80041e6:	d026      	beq.n	8004236 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b1c      	cmp	r3, #28
 80041ec:	d11c      	bne.n	8004228 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80041ee:	89bb      	ldrh	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d133      	bne.n	800425c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fb0c 	bl	8003814 <getSn_TX_FSR>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461c      	mov	r4, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3301      	adds	r3, #1
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f9a7 	bl	8003560 <WIZCHIP_READ>
 8004212:	4603      	mov	r3, r0
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	429c      	cmp	r4, r3
 8004218:	d10d      	bne.n	8004236 <recv+0xea>
               {
                  close(sn);
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fd5d 	bl	8003cdc <close>
                  return SOCKERR_SOCKSTATUS;
 8004222:	f06f 0306 	mvn.w	r3, #6
 8004226:	e040      	b.n	80042aa <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fd56 	bl	8003cdc <close>
               return SOCKERR_SOCKSTATUS;
 8004230:	f06f 0306 	mvn.w	r3, #6
 8004234:	e039      	b.n	80042aa <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <recv+0x168>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	fa42 f303 	asr.w	r3, r2, r3
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <recv+0x108>
 800424a:	89bb      	ldrh	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <recv+0x108>
 8004250:	2300      	movs	r3, #0
 8004252:	e02a      	b.n	80042aa <recv+0x15e>
         if(recvsize != 0) break;
 8004254:	89bb      	ldrh	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800425a:	e7b1      	b.n	80041c0 <recv+0x74>
               if(recvsize != 0) break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <recv+0x116>
         if(recvsize != 0) break;
 8004260:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004262:	89ba      	ldrh	r2, [r7, #12]
 8004264:	88bb      	ldrh	r3, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d201      	bcs.n	800426e <recv+0x122>
 800426a:	89bb      	ldrh	r3, [r7, #12]
 800426c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800426e:	88ba      	ldrh	r2, [r7, #4]
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fbbf 	bl	80039f8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	3301      	adds	r3, #1
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004286:	2140      	movs	r1, #64	; 0x40
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff f9b5 	bl	80035f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800428e:	bf00      	nop
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3301      	adds	r3, #1
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f95f 	bl	8003560 <WIZCHIP_READ>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f3      	bne.n	8004290 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80042a8:	88bb      	ldrh	r3, [r7, #4]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200000e4 	.word	0x200000e4

080042b8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
 8004320:	2300      	movs	r3, #0
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
	...

0800436c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <reg_wizchip_cs_cbfunc+0x16>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <reg_wizchip_cs_cbfunc+0x40>)
 8004386:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <reg_wizchip_cs_cbfunc+0x3c>)
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <reg_wizchip_cs_cbfunc+0x44>)
 800438c:	619a      	str	r2, [r3, #24]
 800438e:	e005      	b.n	800439c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004390:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004396:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6193      	str	r3, [r2, #24]
   }
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000002c 	.word	0x2000002c
 80043ac:	080042d1 	.word	0x080042d1
 80043b0:	080042dd 	.word	0x080042dd

080043b4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80043be:	bf00      	nop
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <reg_wizchip_spi_cbfunc+0x48>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f9      	beq.n	80043c0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <reg_wizchip_spi_cbfunc+0x24>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <reg_wizchip_spi_cbfunc+0x48>)
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <reg_wizchip_spi_cbfunc+0x4c>)
 80043dc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <reg_wizchip_spi_cbfunc+0x48>)
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <reg_wizchip_spi_cbfunc+0x50>)
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	e005      	b.n	80043f2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80043e6:	4a05      	ldr	r2, [pc, #20]	; (80043fc <reg_wizchip_spi_cbfunc+0x48>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <reg_wizchip_spi_cbfunc+0x48>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6213      	str	r3, [r2, #32]
   }
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	2000002c 	.word	0x2000002c
 8004400:	0800431d 	.word	0x0800431d
 8004404:	0800432b 	.word	0x0800432b

08004408 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004412:	bf00      	nop
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <reg_wizchip_spiburst_cbfunc+0x48>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f9      	beq.n	8004414 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <reg_wizchip_spiburst_cbfunc+0x24>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <reg_wizchip_spiburst_cbfunc+0x48>)
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004430:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <reg_wizchip_spiburst_cbfunc+0x48>)
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e005      	b.n	8004446 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <reg_wizchip_spiburst_cbfunc+0x48>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <reg_wizchip_spiburst_cbfunc+0x48>)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	2000002c 	.word	0x2000002c
 8004454:	0800433f 	.word	0x0800433f
 8004458:	08004355 	.word	0x08004355

0800445c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	f200 80c7 	bhi.w	800460a <ctlwizchip+0x1ae>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <ctlwizchip+0x28>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044cb 	.word	0x080044cb
 800448c:	080044f7 	.word	0x080044f7
 8004490:	080044eb 	.word	0x080044eb
 8004494:	08004505 	.word	0x08004505
 8004498:	08004511 	.word	0x08004511
 800449c:	0800451f 	.word	0x0800451f
 80044a0:	08004545 	.word	0x08004545
 80044a4:	0800456b 	.word	0x0800456b
 80044a8:	080045af 	.word	0x080045af
 80044ac:	080045b5 	.word	0x080045b5
 80044b0:	080045bd 	.word	0x080045bd
 80044b4:	08004611 	.word	0x08004611
 80044b8:	080045c5 	.word	0x080045c5
 80044bc:	080045d3 	.word	0x080045d3
 80044c0:	080045ef 	.word	0x080045ef
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80044c4:	f000 f8ea 	bl	800469c <wizchip_sw_reset>
         break;
 80044c8:	e0a3      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3308      	adds	r3, #8
 80044d8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f927 	bl	8004734 <wizchip_init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	e094      	b.n	8004614 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f9ac 	bl	800484c <wizchip_clrinterrupt>
         break;
 80044f4:	e08d      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80044f6:	f000 f9dc 	bl	80048b2 <wizchip_getinterrupt>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	801a      	strh	r2, [r3, #0]
         break;
 8004502:	e086      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f9f7 	bl	80048fc <wizchip_setinterruptmask>
         break;         
 800450e:	e080      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004510:	f000 fa0f 	bl	8004932 <wizchip_getinterruptmask>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	801a      	strh	r2, [r3, #0]
         break;
 800451c:	e079      	b.n	8004612 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b29b      	uxth	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800452e:	f7ff f863 	bl	80035f8 <WIZCHIP_WRITE>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	4619      	mov	r1, r3
 800453a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800453e:	f7ff f85b 	bl	80035f8 <WIZCHIP_WRITE>
         break;
 8004542:	e066      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004544:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8004548:	f7ff f80a 	bl	8003560 <WIZCHIP_READ>
 800454c:	4603      	mov	r3, r0
 800454e:	b29b      	uxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b29c      	uxth	r4, r3
 8004554:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004558:	f7ff f802 	bl	8003560 <WIZCHIP_READ>
 800455c:	4603      	mov	r3, r0
 800455e:	b29b      	uxth	r3, r3
 8004560:	4423      	add	r3, r4
 8004562:	b29a      	uxth	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	801a      	strh	r2, [r3, #0]
         break;
 8004568:	e053      	b.n	8004612 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <ctlwizchip+0x1c0>)
 800456c:	789a      	ldrb	r2, [r3, #2]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a29      	ldr	r2, [pc, #164]	; (800461c <ctlwizchip+0x1c0>)
 8004578:	78d2      	ldrb	r2, [r2, #3]
 800457a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	3302      	adds	r3, #2
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <ctlwizchip+0x1c0>)
 8004582:	7912      	ldrb	r2, [r2, #4]
 8004584:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	3303      	adds	r3, #3
 800458a:	4a24      	ldr	r2, [pc, #144]	; (800461c <ctlwizchip+0x1c0>)
 800458c:	7952      	ldrb	r2, [r2, #5]
 800458e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <ctlwizchip+0x1c0>)
 8004596:	7992      	ldrb	r2, [r2, #6]
 8004598:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3305      	adds	r3, #5
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <ctlwizchip+0x1c0>)
 80045a0:	79d2      	ldrb	r2, [r2, #7]
 80045a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3306      	adds	r3, #6
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
         break;
 80045ac:	e031      	b.n	8004612 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80045ae:	f000 fa12 	bl	80049d6 <wizphy_reset>
         break;
 80045b2:	e02e      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80045b4:	6838      	ldr	r0, [r7, #0]
 80045b6:	f000 fa35 	bl	8004a24 <wizphy_setphyconf>
         break;
 80045ba:	e02a      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f000 fa73 	bl	8004aa8 <wizphy_getphyconf>
         break;
 80045c2:	e026      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fab6 	bl	8004b3a <wizphy_setphypmode>
 80045ce:	4603      	mov	r3, r0
 80045d0:	e020      	b.n	8004614 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80045d2:	f000 f9e7 	bl	80049a4 <wizphy_getphypmode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2bff      	cmp	r3, #255	; 0xff
 80045de:	d102      	bne.n	80045e6 <ctlwizchip+0x18a>
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
 80045e4:	e016      	b.n	8004614 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	7dfa      	ldrb	r2, [r7, #23]
 80045ea:	701a      	strb	r2, [r3, #0]
         break;
 80045ec:	e011      	b.n	8004612 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80045ee:	f000 f9c3 	bl	8004978 <wizphy_getphylink>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2bff      	cmp	r3, #255	; 0xff
 80045fa:	d102      	bne.n	8004602 <ctlwizchip+0x1a6>
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	e008      	b.n	8004614 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	7dfa      	ldrb	r2, [r7, #23]
 8004606:	701a      	strb	r2, [r3, #0]
         break;
 8004608:	e003      	b.n	8004612 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	e001      	b.n	8004614 <ctlwizchip+0x1b8>
         break;
 8004610:	bf00      	nop
   }
   return 0;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd90      	pop	{r4, r7, pc}
 800461c:	2000002c 	.word	0x2000002c

08004620 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d82c      	bhi.n	800468c <ctlnetwork+0x6c>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <ctlnetwork+0x18>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	08004651 	.word	0x08004651
 800463c:	08004659 	.word	0x08004659
 8004640:	08004661 	.word	0x08004661
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800467d 	.word	0x0800467d
 800464c:	08004685 	.word	0x08004685
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004650:	6838      	ldr	r0, [r7, #0]
 8004652:	f000 fabd 	bl	8004bd0 <wizchip_setnetinfo>
         break;
 8004656:	e01c      	b.n	8004692 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004658:	6838      	ldr	r0, [r7, #0]
 800465a:	f000 faf9 	bl	8004c50 <wizchip_getnetinfo>
         break;
 800465e:	e018      	b.n	8004692 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fb33 	bl	8004cd0 <wizchip_setnetmode>
 800466a:	4603      	mov	r3, r0
 800466c:	e012      	b.n	8004694 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800466e:	f000 fb51 	bl	8004d14 <wizchip_getnetmode>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	701a      	strb	r2, [r3, #0]
         break;
 800467a:	e00a      	b.n	8004692 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800467c:	6838      	ldr	r0, [r7, #0]
 800467e:	f000 fb51 	bl	8004d24 <wizchip_settimeout>
         break;
 8004682:	e006      	b.n	8004692 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	f000 fb6e 	bl	8004d66 <wizchip_gettimeout>
         break;
 800468a:	e002      	b.n	8004692 <ctlnetwork+0x72>
      default:
         return -1;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	e000      	b.n	8004694 <ctlnetwork+0x74>
   }
   return 0;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	2206      	movs	r2, #6
 80046a6:	4619      	mov	r1, r3
 80046a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80046ac:	f7fe fff2 	bl	8003694 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	2204      	movs	r2, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80046bc:	f7fe ffea 	bl	8003694 <WIZCHIP_READ_BUF>
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	2204      	movs	r2, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80046cc:	f7fe ffe2 	bl	8003694 <WIZCHIP_READ_BUF>
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	2204      	movs	r2, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80046dc:	f7fe ffda 	bl	8003694 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe ff88 	bl	80035f8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7fe ff39 	bl	8003560 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	2206      	movs	r2, #6
 80046f2:	4619      	mov	r1, r3
 80046f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80046f8:	f7ff f82c 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	2204      	movs	r2, #4
 8004702:	4619      	mov	r1, r3
 8004704:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004708:	f7ff f824 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	2204      	movs	r2, #4
 8004712:	4619      	mov	r1, r3
 8004714:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004718:	f7ff f81c 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	2204      	movs	r2, #4
 8004722:	4619      	mov	r1, r3
 8004724:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004728:	f7ff f814 	bl	8003754 <WIZCHIP_WRITE_BUF>
}
 800472c:	bf00      	nop
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004742:	f7ff ffab 	bl	800469c <wizchip_sw_reset>
   if(txsize)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03b      	beq.n	80047c4 <wizchip_init+0x90>
   {
      tmp = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e015      	b.n	8004782 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	7bbb      	ldrb	r3, [r7, #14]
 8004762:	4413      	add	r3, r2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8004768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800476c:	2b10      	cmp	r3, #16
 800476e:	dd02      	ble.n	8004776 <wizchip_init+0x42>
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	e066      	b.n	8004844 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3301      	adds	r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b07      	cmp	r3, #7
 8004788:	dde5      	ble.n	8004756 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
 800478e:	e015      	b.n	80047bc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	3301      	adds	r3, #1
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800479e:	4618      	mov	r0, r3
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	4619      	mov	r1, r3
 80047ac:	f7fe ff24 	bl	80035f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80047b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	dde5      	ble.n	8004790 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03b      	beq.n	8004842 <wizchip_init+0x10e>
   {
      tmp = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e015      	b.n	8004800 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80047d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	7bbb      	ldrb	r3, [r7, #14]
 80047e0:	4413      	add	r3, r2
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80047e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	dd02      	ble.n	80047f4 <wizchip_init+0xc0>
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	e027      	b.n	8004844 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80047f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004804:	2b07      	cmp	r3, #7
 8004806:	dde5      	ble.n	80047d4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	e015      	b.n	800483a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	3301      	adds	r3, #1
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800481c:	4618      	mov	r0, r3
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	f7fe fee5 	bl	80035f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800482e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3301      	adds	r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	73fb      	strb	r3, [r7, #15]
 800483a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483e:	2b07      	cmp	r3, #7
 8004840:	dde5      	ble.n	800480e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29b      	uxth	r3, r3
 8004860:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	f023 030f 	bic.w	r3, r3, #15
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8004870:	f7fe fec2 	bl	80035f8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e014      	b.n	80048a4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800487a:	7bba      	ldrb	r2, [r7, #14]
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	fa42 f303 	asr.w	r3, r2, r3
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <wizchip_clrinterrupt+0x52>
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	3301      	adds	r3, #1
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004896:	211f      	movs	r1, #31
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fead 	bl	80035f8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3301      	adds	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d9e7      	bls.n	800487a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80048c4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80048c8:	f7fe fe4a 	bl	8003560 <WIZCHIP_READ>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f023 030f 	bic.w	r3, r3, #15
 80048d2:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80048d4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80048d8:	f7fe fe42 	bl	8003560 <WIZCHIP_READ>
 80048dc:	4603      	mov	r3, r0
 80048de:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80048e0:	79bb      	ldrb	r3, [r7, #6]
 80048e2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80048e4:	88bb      	ldrh	r3, [r7, #4]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80048f2:	88bb      	ldrh	r3, [r7, #4]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	b29b      	uxth	r3, r3
 8004910:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	4619      	mov	r1, r3
 8004916:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800491a:	f7fe fe6d 	bl	80035f8 <WIZCHIP_WRITE>
   setSIMR(simr);
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	4619      	mov	r1, r3
 8004922:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004926:	f7fe fe67 	bl	80035f8 <WIZCHIP_WRITE>
#endif   
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004944:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004948:	f7fe fe0a 	bl	8003560 <WIZCHIP_READ>
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004950:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004954:	f7fe fe04 	bl	8003560 <WIZCHIP_READ>
 8004958:	4603      	mov	r3, r0
 800495a:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800495c:	79bb      	ldrb	r3, [r7, #6]
 800495e:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004960:	88bb      	ldrh	r3, [r7, #4]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	b29a      	uxth	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	b29b      	uxth	r3, r3
 800496a:	4413      	add	r3, r2
 800496c:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800496e:	88bb      	ldrh	r3, [r7, #4]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800497e:	2300      	movs	r3, #0
 8004980:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004982:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004986:	f7fe fdeb 	bl	8003560 <WIZCHIP_READ>
 800498a:	4603      	mov	r3, r0
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004994:	2301      	movs	r3, #1
 8004996:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004998:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80049ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80049b2:	f7fe fdd5 	bl	8003560 <WIZCHIP_READ>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d102      	bne.n	80049c6 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80049c0:	2301      	movs	r3, #1
 80049c2:	71fb      	strb	r3, [r7, #7]
 80049c4:	e001      	b.n	80049ca <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80049c6:	2300      	movs	r3, #0
 80049c8:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80049dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80049e0:	f7fe fdbe 	bl	8003560 <WIZCHIP_READ>
 80049e4:	4603      	mov	r3, r0
 80049e6:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ee:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	4619      	mov	r1, r3
 80049f4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80049f8:	f7fe fdfe 	bl	80035f8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80049fc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004a00:	f7fe fdae 	bl	8003560 <WIZCHIP_READ>
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a0e:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	4619      	mov	r1, r3
 8004a14:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004a18:	f7fe fdee 	bl	80035f8 <WIZCHIP_WRITE>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d104      	bne.n	8004a42 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e003      	b.n	8004a4a <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d104      	bne.n	8004a5c <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e019      	b.n	8004a90 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10d      	bne.n	8004a80 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	789b      	ldrb	r3, [r3, #2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d104      	bne.n	8004a76 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	f043 0318 	orr.w	r3, r3, #24
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e00c      	b.n	8004a90 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	f043 0308 	orr.w	r3, r3, #8
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	e007      	b.n	8004a90 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d103      	bne.n	8004a90 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	f043 0310 	orr.w	r3, r3, #16
 8004a8e:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	4619      	mov	r1, r3
 8004a94:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004a98:	f7fe fdae 	bl	80035f8 <WIZCHIP_WRITE>
   wizphy_reset();
 8004a9c:	f7ff ff9b 	bl	80049d6 <wizphy_reset>
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004ab4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004ab8:	f7fe fd52 	bl	8003560 <WIZCHIP_READ>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	119b      	asrs	r3, r3, #6
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d001      	beq.n	8004ade <wizphy_getphyconf+0x36>
 8004ada:	2b38      	cmp	r3, #56	; 0x38
 8004adc:	d103      	bne.n	8004ae6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	705a      	strb	r2, [r3, #1]
         break;
 8004ae4:	e003      	b.n	8004aee <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	705a      	strb	r2, [r3, #1]
         break;
 8004aec:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af4:	2b18      	cmp	r3, #24
 8004af6:	d003      	beq.n	8004b00 <wizphy_getphyconf+0x58>
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d001      	beq.n	8004b00 <wizphy_getphyconf+0x58>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d103      	bne.n	8004b08 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	709a      	strb	r2, [r3, #2]
         break;
 8004b06:	e003      	b.n	8004b10 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	709a      	strb	r2, [r3, #2]
         break;
 8004b0e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b16:	2b18      	cmp	r3, #24
 8004b18:	d003      	beq.n	8004b22 <wizphy_getphyconf+0x7a>
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d001      	beq.n	8004b22 <wizphy_getphyconf+0x7a>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d103      	bne.n	8004b2a <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	70da      	strb	r2, [r3, #3]
         break;
 8004b28:	e003      	b.n	8004b32 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	70da      	strb	r2, [r3, #3]
         break;
 8004b30:	bf00      	nop
   }
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	4603      	mov	r3, r0
 8004b42:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004b48:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004b4c:	f7fe fd08 	bl	8003560 <WIZCHIP_READ>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <wizphy_setphypmode+0x2a>
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e030      	b.n	8004bc6 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b6a:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d104      	bne.n	8004b7c <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	e003      	b.n	8004b84 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004b82:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	4619      	mov	r1, r3
 8004b88:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004b8c:	f7fe fd34 	bl	80035f8 <WIZCHIP_WRITE>
   wizphy_reset();
 8004b90:	f7ff ff21 	bl	80049d6 <wizphy_reset>
   tmp = getPHYCFGR();
 8004b94:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004b98:	f7fe fce2 	bl	8003560 <WIZCHIP_READ>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d106      	bne.n	8004bb4 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <wizphy_setphypmode+0x88>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e008      	b.n	8004bc6 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <wizphy_setphypmode+0x88>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e001      	b.n	8004bc6 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2206      	movs	r2, #6
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004be2:	f7fe fdb7 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	330e      	adds	r3, #14
 8004bea:	2204      	movs	r2, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004bf2:	f7fe fdaf 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	330a      	adds	r3, #10
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004c02:	f7fe fda7 	bl	8003754 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3306      	adds	r3, #6
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004c12:	f7fe fd9f 	bl	8003754 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7c9a      	ldrb	r2, [r3, #18]
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <wizchip_setnetinfo+0x78>)
 8004c1c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7cda      	ldrb	r2, [r3, #19]
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <wizchip_setnetinfo+0x78>)
 8004c24:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7d1a      	ldrb	r2, [r3, #20]
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <wizchip_setnetinfo+0x78>)
 8004c2c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7d5a      	ldrb	r2, [r3, #21]
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <wizchip_setnetinfo+0x78>)
 8004c34:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7d9a      	ldrb	r2, [r3, #22]
 8004c3a:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <wizchip_setnetinfo+0x7c>)
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000100 	.word	0x20000100
 8004c4c:	20000104 	.word	0x20000104

08004c50 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004c62:	f7fe fd17 	bl	8003694 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	330e      	adds	r3, #14
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c72:	f7fe fd0f 	bl	8003694 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	330a      	adds	r3, #10
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004c82:	f7fe fd07 	bl	8003694 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3306      	adds	r3, #6
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004c92:	f7fe fcff 	bl	8003694 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <wizchip_getnetinfo+0x78>)
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <wizchip_getnetinfo+0x78>)
 8004ca0:	785a      	ldrb	r2, [r3, #1]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <wizchip_getnetinfo+0x78>)
 8004ca8:	789a      	ldrb	r2, [r3, #2]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <wizchip_getnetinfo+0x78>)
 8004cb0:	78da      	ldrb	r2, [r3, #3]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <wizchip_getnetinfo+0x7c>)
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	759a      	strb	r2, [r3, #22]
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000100 	.word	0x20000100
 8004ccc:	20000104 	.word	0x20000104

08004cd0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <wizchip_setnetmode+0x1e>
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	e00e      	b.n	8004d0c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fe fc36 	bl	8003560 <WIZCHIP_READ>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	4619      	mov	r1, r3
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fe fc77 	bl	80035f8 <WIZCHIP_WRITE>
   return 0;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f7fe fc21 	bl	8003560 <WIZCHIP_READ>
 8004d1e:	4603      	mov	r3, r0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004d36:	f7fe fc5f 	bl	80035f8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	885b      	ldrh	r3, [r3, #2]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004d4a:	f7fe fc55 	bl	80035f8 <WIZCHIP_WRITE>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	885b      	ldrh	r3, [r3, #2]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004d5a:	f7fe fc4d 	bl	80035f8 <WIZCHIP_WRITE>
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004d66:	b590      	push	{r4, r7, lr}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004d6e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004d72:	f7fe fbf5 	bl	8003560 <WIZCHIP_READ>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004d7e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004d82:	f7fe fbed 	bl	8003560 <WIZCHIP_READ>
 8004d86:	4603      	mov	r3, r0
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	b29c      	uxth	r4, r3
 8004d8e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004d92:	f7fe fbe5 	bl	8003560 <WIZCHIP_READ>
 8004d96:	4603      	mov	r3, r0
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4423      	add	r3, r4
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	805a      	strh	r2, [r3, #2]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd90      	pop	{r4, r7, pc}

08004daa <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 8004daa:	b590      	push	{r4, r7, lr}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	e02e      	b.n	8004e1a <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	440b      	add	r3, r1
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b25      	cmp	r3, #37	; 0x25
 8004dd0:	d11d      	bne.n	8004e0e <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fc04 	bl	80055ea <C2D>
 8004de2:	4603      	mov	r3, r0
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	b2dc      	uxtb	r4, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3302      	adds	r3, #2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fbf9 	bl	80055ea <C2D>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	1862      	adds	r2, r4, r1
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
			y+=2;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ca      	bne.n	8004dbc <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd90      	pop	{r4, r7, pc}

08004e38 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	460b      	mov	r3, r1
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d102      	bne.n	8004e52 <make_http_response_head+0x1a>
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <make_http_response_head+0x120>)
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e061      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 8004e52:	7afb      	ldrb	r3, [r7, #11]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d102      	bne.n	8004e5e <make_http_response_head+0x26>
 8004e58:	4b40      	ldr	r3, [pc, #256]	; (8004f5c <make_http_response_head+0x124>)
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e05b      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 8004e5e:	7afb      	ldrb	r3, [r7, #11]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d102      	bne.n	8004e6a <make_http_response_head+0x32>
 8004e64:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <make_http_response_head+0x128>)
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e055      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d102      	bne.n	8004e76 <make_http_response_head+0x3e>
 8004e70:	4b3c      	ldr	r3, [pc, #240]	; (8004f64 <make_http_response_head+0x12c>)
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e04f      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 8004e76:	7afb      	ldrb	r3, [r7, #11]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d102      	bne.n	8004e82 <make_http_response_head+0x4a>
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <make_http_response_head+0x130>)
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e049      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	2b09      	cmp	r3, #9
 8004e86:	d102      	bne.n	8004e8e <make_http_response_head+0x56>
 8004e88:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <make_http_response_head+0x134>)
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e043      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
 8004e90:	2b0a      	cmp	r3, #10
 8004e92:	d102      	bne.n	8004e9a <make_http_response_head+0x62>
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <make_http_response_head+0x138>)
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e03d      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d102      	bne.n	8004ea6 <make_http_response_head+0x6e>
 8004ea0:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <make_http_response_head+0x13c>)
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e037      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	2b0b      	cmp	r3, #11
 8004eaa:	d102      	bne.n	8004eb2 <make_http_response_head+0x7a>
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <make_http_response_head+0x140>)
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e031      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d102      	bne.n	8004ebe <make_http_response_head+0x86>
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <make_http_response_head+0x144>)
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e02b      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	2b0d      	cmp	r3, #13
 8004ec2:	d102      	bne.n	8004eca <make_http_response_head+0x92>
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <make_http_response_head+0x148>)
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e025      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	2b0e      	cmp	r3, #14
 8004ece:	d102      	bne.n	8004ed6 <make_http_response_head+0x9e>
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <make_http_response_head+0x14c>)
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e01f      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	2b14      	cmp	r3, #20
 8004eda:	d102      	bne.n	8004ee2 <make_http_response_head+0xaa>
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <make_http_response_head+0x150>)
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e019      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	2b15      	cmp	r3, #21
 8004ee6:	d102      	bne.n	8004eee <make_http_response_head+0xb6>
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <make_http_response_head+0x154>)
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e013      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	2b16      	cmp	r3, #22
 8004ef2:	d102      	bne.n	8004efa <make_http_response_head+0xc2>
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <make_http_response_head+0x158>)
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e00d      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	2b17      	cmp	r3, #23
 8004efe:	d102      	bne.n	8004f06 <make_http_response_head+0xce>
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <make_http_response_head+0x15c>)
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e007      	b.n	8004f16 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 8004f06:	7afb      	ldrb	r3, [r7, #11]
 8004f08:	2b18      	cmp	r3, #24
 8004f0a:	d102      	bne.n	8004f12 <make_http_response_head+0xda>
 8004f0c:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <make_http_response_head+0x160>)
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e001      	b.n	8004f16 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	491f      	ldr	r1, [pc, #124]	; (8004f9c <make_http_response_head+0x164>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fd78 	bl	8006a14 <siprintf>
	strcpy(buf, head);
 8004f24:	69f9      	ldr	r1, [r7, #28]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f001 fdf3 	bl	8006b12 <strcpy>
	strcat(buf, tmp);
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	4619      	mov	r1, r3
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f001 fdd1 	bl	8006ada <strcat>
	strcat(buf, "\r\n\r\n");
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7fb f97d 	bl	8000238 <strlen>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <make_http_response_head+0x168>)
 8004f48:	6810      	ldr	r0, [r2, #0]
 8004f4a:	6018      	str	r0, [r3, #0]
 8004f4c:	7912      	ldrb	r2, [r2, #4]
 8004f4e:	711a      	strb	r2, [r3, #4]
}
 8004f50:	bf00      	nop
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	0800b9d8 	.word	0x0800b9d8
 8004f5c:	0800ba2c 	.word	0x0800ba2c
 8004f60:	0800ba68 	.word	0x0800ba68
 8004f64:	0800baa4 	.word	0x0800baa4
 8004f68:	0800bae0 	.word	0x0800bae0
 8004f6c:	0800bb30 	.word	0x0800bb30
 8004f70:	0800bb84 	.word	0x0800bb84
 8004f74:	0800bbc0 	.word	0x0800bbc0
 8004f78:	0800bc04 	.word	0x0800bc04
 8004f7c:	0800bc4c 	.word	0x0800bc4c
 8004f80:	0800bc88 	.word	0x0800bc88
 8004f84:	0800bcc4 	.word	0x0800bcc4
 8004f88:	0800bd04 	.word	0x0800bd04
 8004f8c:	0800bd54 	.word	0x0800bd54
 8004f90:	0800bda4 	.word	0x0800bda4
 8004f94:	0800bdec 	.word	0x0800bdec
 8004f98:	0800be3c 	.word	0x0800be3c
 8004f9c:	0800be7c 	.word	0x0800be7c
 8004fa0:	0800be80 	.word	0x0800be80

08004fa4 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 8004fb2:	499f      	ldr	r1, [pc, #636]	; (8005230 <find_http_uri_type+0x28c>)
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f001 fdc9 	bl	8006b4c <strstr>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <find_http_uri_type+0x2a>
 8004fc0:	499c      	ldr	r1, [pc, #624]	; (8005234 <find_http_uri_type+0x290>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f001 fdc2 	bl	8006b4c <strstr>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <find_http_uri_type+0x32>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e127      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 8004fd6:	4998      	ldr	r1, [pc, #608]	; (8005238 <find_http_uri_type+0x294>)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f001 fdb7 	bl	8006b4c <strstr>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <find_http_uri_type+0x48>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 8004fea:	e11c      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 8004fec:	4993      	ldr	r1, [pc, #588]	; (800523c <find_http_uri_type+0x298>)
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 fdac 	bl	8006b4c <strstr>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <find_http_uri_type+0x64>
 8004ffa:	4991      	ldr	r1, [pc, #580]	; (8005240 <find_http_uri_type+0x29c>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f001 fda5 	bl	8006b4c <strstr>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <find_http_uri_type+0x6c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2203      	movs	r2, #3
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e10a      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 8005010:	498c      	ldr	r1, [pc, #560]	; (8005244 <find_http_uri_type+0x2a0>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f001 fd9a 	bl	8006b4c <strstr>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <find_http_uri_type+0x88>
 800501e:	498a      	ldr	r1, [pc, #552]	; (8005248 <find_http_uri_type+0x2a4>)
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 fd93 	bl	8006b4c <strstr>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <find_http_uri_type+0x90>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2204      	movs	r2, #4
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e0f8      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8005034:	4985      	ldr	r1, [pc, #532]	; (800524c <find_http_uri_type+0x2a8>)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f001 fd88 	bl	8006b4c <strstr>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <find_http_uri_type+0xa6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2205      	movs	r2, #5
 8005046:	701a      	strb	r2, [r3, #0]
}
 8005048:	e0ed      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 800504a:	4981      	ldr	r1, [pc, #516]	; (8005250 <find_http_uri_type+0x2ac>)
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f001 fd7d 	bl	8006b4c <strstr>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <find_http_uri_type+0xc2>
 8005058:	497e      	ldr	r1, [pc, #504]	; (8005254 <find_http_uri_type+0x2b0>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 fd76 	bl	8006b4c <strstr>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <find_http_uri_type+0xca>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2208      	movs	r2, #8
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e0db      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 800506e:	497a      	ldr	r1, [pc, #488]	; (8005258 <find_http_uri_type+0x2b4>)
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f001 fd6b 	bl	8006b4c <strstr>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <find_http_uri_type+0xe6>
 800507c:	4977      	ldr	r1, [pc, #476]	; (800525c <find_http_uri_type+0x2b8>)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f001 fd64 	bl	8006b4c <strstr>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <find_http_uri_type+0xee>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	220c      	movs	r2, #12
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e0c9      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 8005092:	4973      	ldr	r1, [pc, #460]	; (8005260 <find_http_uri_type+0x2bc>)
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f001 fd59 	bl	8006b4c <strstr>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <find_http_uri_type+0x10a>
 80050a0:	4970      	ldr	r1, [pc, #448]	; (8005264 <find_http_uri_type+0x2c0>)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f001 fd52 	bl	8006b4c <strstr>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <find_http_uri_type+0x112>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	220b      	movs	r2, #11
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e0b7      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 80050b6:	4967      	ldr	r1, [pc, #412]	; (8005254 <find_http_uri_type+0x2b0>)
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f001 fd47 	bl	8006b4c <strstr>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <find_http_uri_type+0x12e>
 80050c4:	4962      	ldr	r1, [pc, #392]	; (8005250 <find_http_uri_type+0x2ac>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f001 fd40 	bl	8006b4c <strstr>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <find_http_uri_type+0x136>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e0a5      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 80050da:	4963      	ldr	r1, [pc, #396]	; (8005268 <find_http_uri_type+0x2c4>)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f001 fd35 	bl	8006b4c <strstr>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <find_http_uri_type+0x152>
 80050e8:	4960      	ldr	r1, [pc, #384]	; (800526c <find_http_uri_type+0x2c8>)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f001 fd2e 	bl	8006b4c <strstr>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <find_http_uri_type+0x15a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2209      	movs	r2, #9
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e093      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 80050fe:	495c      	ldr	r1, [pc, #368]	; (8005270 <find_http_uri_type+0x2cc>)
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f001 fd23 	bl	8006b4c <strstr>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <find_http_uri_type+0x176>
 800510c:	4959      	ldr	r1, [pc, #356]	; (8005274 <find_http_uri_type+0x2d0>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f001 fd1c 	bl	8006b4c <strstr>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <find_http_uri_type+0x17e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	220a      	movs	r2, #10
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e081      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 8005122:	4955      	ldr	r1, [pc, #340]	; (8005278 <find_http_uri_type+0x2d4>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f001 fd11 	bl	8006b4c <strstr>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <find_http_uri_type+0x19a>
 8005130:	4952      	ldr	r1, [pc, #328]	; (800527c <find_http_uri_type+0x2d8>)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f001 fd0a 	bl	8006b4c <strstr>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <find_http_uri_type+0x1a2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	220d      	movs	r2, #13
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e06f      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 8005146:	494e      	ldr	r1, [pc, #312]	; (8005280 <find_http_uri_type+0x2dc>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 fcff 	bl	8006b4c <strstr>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <find_http_uri_type+0x1be>
 8005154:	494b      	ldr	r1, [pc, #300]	; (8005284 <find_http_uri_type+0x2e0>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f001 fcf8 	bl	8006b4c <strstr>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <find_http_uri_type+0x1c6>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	220e      	movs	r2, #14
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e05d      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 800516a:	4947      	ldr	r1, [pc, #284]	; (8005288 <find_http_uri_type+0x2e4>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f001 fced 	bl	8006b4c <strstr>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <find_http_uri_type+0x1e2>
 8005178:	4944      	ldr	r1, [pc, #272]	; (800528c <find_http_uri_type+0x2e8>)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f001 fce6 	bl	8006b4c <strstr>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <find_http_uri_type+0x1ea>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2214      	movs	r2, #20
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e04b      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 800518e:	4940      	ldr	r1, [pc, #256]	; (8005290 <find_http_uri_type+0x2ec>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f001 fcdb 	bl	8006b4c <strstr>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <find_http_uri_type+0x206>
 800519c:	493d      	ldr	r1, [pc, #244]	; (8005294 <find_http_uri_type+0x2f0>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f001 fcd4 	bl	8006b4c <strstr>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <find_http_uri_type+0x20e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2215      	movs	r2, #21
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e039      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 80051b2:	4939      	ldr	r1, [pc, #228]	; (8005298 <find_http_uri_type+0x2f4>)
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f001 fcc9 	bl	8006b4c <strstr>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <find_http_uri_type+0x22a>
 80051c0:	4936      	ldr	r1, [pc, #216]	; (800529c <find_http_uri_type+0x2f8>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f001 fcc2 	bl	8006b4c <strstr>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <find_http_uri_type+0x232>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2216      	movs	r2, #22
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e027      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 80051d6:	4932      	ldr	r1, [pc, #200]	; (80052a0 <find_http_uri_type+0x2fc>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f001 fcb7 	bl	8006b4c <strstr>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <find_http_uri_type+0x24e>
 80051e4:	492f      	ldr	r1, [pc, #188]	; (80052a4 <find_http_uri_type+0x300>)
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f001 fcb0 	bl	8006b4c <strstr>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <find_http_uri_type+0x256>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2217      	movs	r2, #23
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e015      	b.n	8005226 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 80051fa:	492b      	ldr	r1, [pc, #172]	; (80052a8 <find_http_uri_type+0x304>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 fca5 	bl	8006b4c <strstr>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <find_http_uri_type+0x272>
 8005208:	4928      	ldr	r1, [pc, #160]	; (80052ac <find_http_uri_type+0x308>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 fc9e 	bl	8006b4c <strstr>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <find_http_uri_type+0x27a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2218      	movs	r2, #24
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e003      	b.n	8005226 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
}
 8005224:	e7ff      	b.n	8005226 <find_http_uri_type+0x282>
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	0800be88 	.word	0x0800be88
 8005234:	0800be90 	.word	0x0800be90
 8005238:	0800be98 	.word	0x0800be98
 800523c:	0800bea0 	.word	0x0800bea0
 8005240:	0800bea8 	.word	0x0800bea8
 8005244:	0800beb0 	.word	0x0800beb0
 8005248:	0800beb8 	.word	0x0800beb8
 800524c:	0800bec0 	.word	0x0800bec0
 8005250:	0800bec8 	.word	0x0800bec8
 8005254:	0800bed0 	.word	0x0800bed0
 8005258:	0800bed8 	.word	0x0800bed8
 800525c:	0800bee0 	.word	0x0800bee0
 8005260:	0800bee8 	.word	0x0800bee8
 8005264:	0800beec 	.word	0x0800beec
 8005268:	0800bef0 	.word	0x0800bef0
 800526c:	0800bef8 	.word	0x0800bef8
 8005270:	0800bf00 	.word	0x0800bf00
 8005274:	0800bf08 	.word	0x0800bf08
 8005278:	0800bf10 	.word	0x0800bf10
 800527c:	0800bf18 	.word	0x0800bf18
 8005280:	0800bf20 	.word	0x0800bf20
 8005284:	0800bf28 	.word	0x0800bf28
 8005288:	0800bf30 	.word	0x0800bf30
 800528c:	0800bf38 	.word	0x0800bf38
 8005290:	0800bf40 	.word	0x0800bf40
 8005294:	0800bf48 	.word	0x0800bf48
 8005298:	0800bf50 	.word	0x0800bf50
 800529c:	0800bf58 	.word	0x0800bf58
 80052a0:	0800bf60 	.word	0x0800bf60
 80052a4:	0800bf68 	.word	0x0800bf68
 80052a8:	0800bf70 	.word	0x0800bf70
 80052ac:	0800bf78 	.word	0x0800bf78

080052b0 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 80052ba:	4932      	ldr	r1, [pc, #200]	; (8005384 <parse_http_request+0xd4>)
 80052bc:	6838      	ldr	r0, [r7, #0]
 80052be:	f001 fc5f 	bl	8006b80 <strtok>
 80052c2:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
    return;
 80052d0:	e054      	b.n	800537c <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <parse_http_request+0xd8>)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7fa ffa5 	bl	8000224 <strcmp>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <parse_http_request+0x3e>
 80052e0:	492a      	ldr	r1, [pc, #168]	; (800538c <parse_http_request+0xdc>)
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7fa ff9e 	bl	8000224 <strcmp>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d108      	bne.n	8005300 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 80052f4:	4923      	ldr	r1, [pc, #140]	; (8005384 <parse_http_request+0xd4>)
 80052f6:	2000      	movs	r0, #0
 80052f8:	f001 fc42 	bl	8006b80 <strtok>
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	e030      	b.n	8005362 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 8005300:	4923      	ldr	r1, [pc, #140]	; (8005390 <parse_http_request+0xe0>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7fa ff8e 	bl	8000224 <strcmp>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d006      	beq.n	800531c <parse_http_request+0x6c>
 800530e:	4921      	ldr	r1, [pc, #132]	; (8005394 <parse_http_request+0xe4>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fa ff87 	bl	8000224 <strcmp>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8005322:	4918      	ldr	r1, [pc, #96]	; (8005384 <parse_http_request+0xd4>)
 8005324:	2000      	movs	r0, #0
 8005326:	f001 fc2b 	bl	8006b80 <strtok>
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	e019      	b.n	8005362 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 800532e:	491a      	ldr	r1, [pc, #104]	; (8005398 <parse_http_request+0xe8>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7fa ff77 	bl	8000224 <strcmp>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <parse_http_request+0x9a>
 800533c:	4917      	ldr	r1, [pc, #92]	; (800539c <parse_http_request+0xec>)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7fa ff70 	bl	8000224 <strcmp>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 800534a:	4915      	ldr	r1, [pc, #84]	; (80053a0 <parse_http_request+0xf0>)
 800534c:	2000      	movs	r0, #0
 800534e:	f001 fc17 	bl	8006b80 <strtok>
 8005352:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e002      	b.n	8005362 <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
    return;
 800536e:	e005      	b.n	800537c <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3302      	adds	r3, #2
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fbcb 	bl	8006b12 <strcpy>
}
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	0800bf80 	.word	0x0800bf80
 8005388:	0800bf84 	.word	0x0800bf84
 800538c:	0800bf88 	.word	0x0800bf88
 8005390:	0800bf8c 	.word	0x0800bf8c
 8005394:	0800bf94 	.word	0x0800bf94
 8005398:	0800bf9c 	.word	0x0800bf9c
 800539c:	0800bfa4 	.word	0x0800bfa4
 80053a0:	0800bfac 	.word	0x0800bfac

080053a4 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 80053b2:	4b3a      	ldr	r3, [pc, #232]	; (800549c <get_http_param_value+0xf8>)
 80053b4:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	837b      	strh	r3, [r7, #26]
 80053ba:	2300      	movs	r3, #0
 80053bc:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 80053be:	f107 030c 	add.w	r3, r7, #12
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	811a      	strh	r2, [r3, #8]

	if(!uri || !param_name) return 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <get_http_param_value+0x32>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <get_http_param_value+0x36>
 80053d6:	2300      	movs	r3, #0
 80053d8:	e05c      	b.n	8005494 <get_http_param_value+0xf0>

	/***************/
	mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf);
 80053da:	f107 030c 	add.w	r3, r7, #12
 80053de:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <get_http_param_value+0xfc>)
 80053e0:	4930      	ldr	r1, [pc, #192]	; (80054a4 <get_http_param_value+0x100>)
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8b1 	bl	800554a <mid>
	content_len = ATOI(tmp_buf, 10);
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	210a      	movs	r1, #10
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f886 	bl	8005500 <ATOI>
 80053f4:	4603      	mov	r3, r0
 80053f6:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 80053f8:	492b      	ldr	r1, [pc, #172]	; (80054a8 <get_http_param_value+0x104>)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fba6 	bl	8006b4c <strstr>
 8005400:	6078      	str	r0, [r7, #4]
	uri += 4;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 8005408:	8b3b      	ldrh	r3, [r7, #24]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fb99 	bl	8006b4c <strstr>
 800541a:	6238      	str	r0, [r7, #32]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d035      	beq.n	800548e <get_http_param_value+0xea>
	{
		name += strlen(param_name) + 1;
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f7fa ff08 	bl	8000238 <strlen>
 8005428:	4603      	mov	r3, r0
 800542a:	3301      	adds	r3, #1
 800542c:	6a3a      	ldr	r2, [r7, #32]
 800542e:	4413      	add	r3, r2
 8005430:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 8005432:	2126      	movs	r1, #38	; 0x26
 8005434:	6a38      	ldr	r0, [r7, #32]
 8005436:	f001 fb5f 	bl	8006af8 <strchr>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <get_http_param_value+0xac>
		{
			pos2 = name + strlen((char*)name);
 8005442:	6a38      	ldr	r0, [r7, #32]
 8005444:	f7fa fef8 	bl	8000238 <strlen>
 8005448:	4602      	mov	r2, r0
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4413      	add	r3, r2
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	837b      	strh	r3, [r7, #26]

		if(len)
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <get_http_param_value+0xe2>
		{
			ret[len] = 0;
 800545e:	8b7b      	ldrh	r3, [r7, #26]
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 8005468:	8b7b      	ldrh	r3, [r7, #26]
 800546a:	461a      	mov	r2, r3
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	69f8      	ldr	r0, [r7, #28]
 8005470:	f001 fb57 	bl	8006b22 <strncpy>
			unescape_http_url((char *)ret);
 8005474:	69f8      	ldr	r0, [r7, #28]
 8005476:	f7ff fc98 	bl	8004daa <unescape_http_url>
			replacetochar(ret, '+' ,' ');
 800547a:	2220      	movs	r2, #32
 800547c:	212b      	movs	r1, #43	; 0x2b
 800547e:	69f8      	ldr	r0, [r7, #28]
 8005480:	f000 f88e 	bl	80055a0 <replacetochar>
 8005484:	e005      	b.n	8005492 <get_http_param_value+0xee>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	e001      	b.n	8005492 <get_http_param_value+0xee>
		}
	}
	else
	{
		return 0;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <get_http_param_value+0xf0>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 8005492:	69fb      	ldr	r3, [r7, #28]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	200016b8 	.word	0x200016b8
 80054a0:	0800bfb0 	.word	0x0800bfb0
 80054a4:	0800bfb4 	.word	0x0800bfb4
 80054a8:	0800be80 	.word	0x0800be80

080054ac <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <get_http_uri_name+0x14>
 80054bc:	2300      	movs	r3, #0
 80054be:	e017      	b.n	80054f0 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	f001 fb25 	bl	8006b12 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 80054c8:	490b      	ldr	r1, [pc, #44]	; (80054f8 <get_http_uri_name+0x4c>)
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f001 fb58 	bl	8006b80 <strtok>
 80054d0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 80054d2:	490a      	ldr	r1, [pc, #40]	; (80054fc <get_http_uri_name+0x50>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7fa fea5 	bl	8000224 <strcmp>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <get_http_uri_name+0x3a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	6838      	ldr	r0, [r7, #0]
 80054ea:	f001 fb12 	bl	8006b12 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 80054ee:	2301      	movs	r3, #1
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0800bfc8 	.word	0x0800bfc8
 80054fc:	0800bfcc 	.word	0x0800bfcc

08005500 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 8005510:	e00d      	b.n	800552e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	fb02 f403 	mul.w	r4, r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f861 	bl	80055ea <C2D>
 8005528:	4603      	mov	r3, r0
 800552a:	4423      	add	r3, r4
 800552c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <ATOI+0x3e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b20      	cmp	r3, #32
 800553c:	d1e9      	bne.n	8005512 <ATOI+0x12>
	return num;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	b29b      	uxth	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b088      	sub	sp, #32
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 faf6 	bl	8006b4c <strstr>
 8005560:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f7fa fe68 	bl	8000238 <strlen>
 8005568:	4602      	mov	r2, r0
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	69f8      	ldr	r0, [r7, #28]
 8005574:	f001 faea 	bl	8006b4c <strstr>
 8005578:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 8005582:	8afb      	ldrh	r3, [r7, #22]
 8005584:	461a      	mov	r2, r3
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f001 faca 	bl	8006b22 <strncpy>
	sub[n]='\0';
 800558e:	8afb      	ldrh	r3, [r7, #22]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	4413      	add	r3, r2
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <replacetochar>:
static void replacetochar(
		uint8_t * str, 		/**< pointer to be replaced */
		uint8_t oldchar, 	/**< old character */
		uint8_t newchar	/**< new character */
	)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
 80055ac:	4613      	mov	r3, r2
 80055ae:	70bb      	strb	r3, [r7, #2]
	int x;
	for (x = 0; str[x]; x++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e00e      	b.n	80055d4 <replacetochar+0x34>
		if (str[x] == oldchar) str[x] = newchar;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d104      	bne.n	80055ce <replacetochar+0x2e>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	78ba      	ldrb	r2, [r7, #2]
 80055cc:	701a      	strb	r2, [r3, #0]
	for (x = 0; str[x]; x++)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ea      	bne.n	80055b6 <replacetochar+0x16>
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b2f      	cmp	r3, #47	; 0x2f
 80055f8:	d906      	bls.n	8005608 <C2D+0x1e>
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b39      	cmp	r3, #57	; 0x39
 80055fe:	d803      	bhi.n	8005608 <C2D+0x1e>
		return c - '0';
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	3b30      	subs	r3, #48	; 0x30
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e014      	b.n	8005632 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	2b60      	cmp	r3, #96	; 0x60
 800560c:	d906      	bls.n	800561c <C2D+0x32>
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b66      	cmp	r3, #102	; 0x66
 8005612:	d803      	bhi.n	800561c <C2D+0x32>
		return 10 + c -'a';
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	3b57      	subs	r3, #87	; 0x57
 8005618:	b2db      	uxtb	r3, r3
 800561a:	e00a      	b.n	8005632 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d906      	bls.n	8005630 <C2D+0x46>
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	2b46      	cmp	r3, #70	; 0x46
 8005626:	d803      	bhi.n	8005630 <C2D+0x46>
		return 10 + c -'A';
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	3b37      	subs	r3, #55	; 0x37
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e000      	b.n	8005632 <C2D+0x48>

	return (char)c;
 8005630:	79fb      	ldrb	r3, [r7, #7]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <default_wdt_reset>:
void default_wdt_reset(void) {;}
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e009      	b.n	800567a <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	441a      	add	r2, r3
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	7811      	ldrb	r1, [r2, #0]
 8005670:	4a06      	ldr	r2, [pc, #24]	; (800568c <httpServer_Sockinit+0x38>)
 8005672:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	3301      	adds	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3f1      	bcc.n	8005666 <httpServer_Sockinit+0x12>
	}
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	20000108 	.word	0x20000108

08005690 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4a03      	ldr	r2, [pc, #12]	; (80056ac <getHTTPSocketNum+0x1c>)
 800569e:	5cd3      	ldrb	r3, [r2, r3]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000108 	.word	0x20000108

080056b0 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e00b      	b.n	80056d8 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <getHTTPSequenceNum+0x3c>)
 80056c4:	5cd3      	ldrb	r3, [r2, r3]
 80056c6:	79fa      	ldrb	r2, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <getHTTPSequenceNum+0x22>
 80056cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d0:	e007      	b.n	80056e2 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	3301      	adds	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b07      	cmp	r3, #7
 80056dc:	d9f0      	bls.n	80056c0 <getHTTPSequenceNum+0x10>

	return -1;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	20000108 	.word	0x20000108

080056f0 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <httpServer_init+0x30>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <httpServer_init+0x34>)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ff9f 	bl	8005654 <httpServer_Sockinit>
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200017b8 	.word	0x200017b8
 8005724:	200017bc 	.word	0x200017bc

08005728 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <reg_httpServer_cbfunc+0x16>
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <reg_httpServer_cbfunc+0x2c>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <reg_httpServer_cbfunc+0x22>
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <reg_httpServer_cbfunc+0x30>)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000058 	.word	0x20000058
 8005758:	2000005c 	.word	0x2000005c

0800575c <httpServer_run>:


void httpServer_run(uint8_t seqnum)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af02      	add	r7, sp, #8
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 8005772:	4bc3      	ldr	r3, [pc, #780]	; (8005a80 <httpServer_run+0x324>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4ac3      	ldr	r2, [pc, #780]	; (8005a84 <httpServer_run+0x328>)
 8005778:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 800577a:	4bc3      	ldr	r3, [pc, #780]	; (8005a88 <httpServer_run+0x32c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4ac3      	ldr	r2, [pc, #780]	; (8005a8c <httpServer_run+0x330>)
 8005780:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff83 	bl	8005690 <getHTTPSocketNum>
 800578a:	4603      	mov	r3, r0
 800578c:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 800578e:	7b7b      	ldrb	r3, [r7, #13]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	3301      	adds	r3, #1
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800579a:	4618      	mov	r0, r3
 800579c:	f7fd fee0 	bl	8003560 <WIZCHIP_READ>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b1c      	cmp	r3, #28
 80057a4:	f200 81ab 	bhi.w	8005afe <httpServer_run+0x3a2>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <httpServer_run+0x54>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	08005ac9 	.word	0x08005ac9
 80057b4:	08005aff 	.word	0x08005aff
 80057b8:	08005aff 	.word	0x08005aff
 80057bc:	08005aff 	.word	0x08005aff
 80057c0:	08005aff 	.word	0x08005aff
 80057c4:	08005aff 	.word	0x08005aff
 80057c8:	08005aff 	.word	0x08005aff
 80057cc:	08005aff 	.word	0x08005aff
 80057d0:	08005aff 	.word	0x08005aff
 80057d4:	08005aff 	.word	0x08005aff
 80057d8:	08005aff 	.word	0x08005aff
 80057dc:	08005aff 	.word	0x08005aff
 80057e0:	08005aff 	.word	0x08005aff
 80057e4:	08005aff 	.word	0x08005aff
 80057e8:	08005aff 	.word	0x08005aff
 80057ec:	08005aff 	.word	0x08005aff
 80057f0:	08005aff 	.word	0x08005aff
 80057f4:	08005aff 	.word	0x08005aff
 80057f8:	08005aff 	.word	0x08005aff
 80057fc:	08005af5 	.word	0x08005af5
 8005800:	08005aff 	.word	0x08005aff
 8005804:	08005aff 	.word	0x08005aff
 8005808:	08005aff 	.word	0x08005aff
 800580c:	08005825 	.word	0x08005825
 8005810:	08005aff 	.word	0x08005aff
 8005814:	08005aff 	.word	0x08005aff
 8005818:	08005aff 	.word	0x08005aff
 800581c:	08005aff 	.word	0x08005aff
 8005820:	08005ab5 	.word	0x08005ab5
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 8005824:	7b7b      	ldrb	r3, [r7, #13]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3301      	adds	r3, #1
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005830:	4618      	mov	r0, r3
 8005832:	f7fd fe95 	bl	8003560 <WIZCHIP_READ>
 8005836:	4603      	mov	r3, r0
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <httpServer_run+0xf8>
			{
				setSn_IR(s, Sn_IR_CON);
 8005840:	7b7b      	ldrb	r3, [r7, #13]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3301      	adds	r3, #1
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800584c:	2101      	movs	r1, #1
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd fed2 	bl	80035f8 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4a8e      	ldr	r2, [pc, #568]	; (8005a90 <httpServer_run+0x334>)
 8005858:	2194      	movs	r1, #148	; 0x94
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b03      	cmp	r3, #3
 8005864:	f000 80b9 	beq.w	80059da <httpServer_run+0x27e>
 8005868:	2b04      	cmp	r3, #4
 800586a:	f000 80d7 	beq.w	8005a1c <httpServer_run+0x2c0>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d000      	beq.n	8005874 <httpServer_run+0x118>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 8005872:	e103      	b.n	8005a7c <httpServer_run+0x320>
					if ((len = getSn_RX_RSR(s)) > 0)
 8005874:	7b7b      	ldrb	r3, [r7, #13]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe f817 	bl	80038aa <getSn_RX_RSR>
 800587c:	4603      	mov	r3, r0
 800587e:	82fb      	strh	r3, [r7, #22]
 8005880:	8afb      	ldrh	r3, [r7, #22]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80f7 	beq.w	8005a76 <httpServer_run+0x31a>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8005888:	8afb      	ldrh	r3, [r7, #22]
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d902      	bls.n	8005896 <httpServer_run+0x13a>
 8005890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005894:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 8005896:	4b7b      	ldr	r3, [pc, #492]	; (8005a84 <httpServer_run+0x328>)
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	8afa      	ldrh	r2, [r7, #22]
 800589c:	7b7b      	ldrb	r3, [r7, #13]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fc54 	bl	800414c <recv>
 80058a4:	4603      	mov	r3, r0
 80058a6:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 80058a8:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <httpServer_run+0x328>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	8afb      	ldrh	r3, [r7, #22]
 80058ae:	4413      	add	r3, r2
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 80058b4:	4b75      	ldr	r3, [pc, #468]	; (8005a8c <httpServer_run+0x330>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b72      	ldr	r3, [pc, #456]	; (8005a84 <httpServer_run+0x328>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7ff fcf6 	bl	80052b0 <parse_http_request>
						getSn_DIPR(s, destip);
 80058c4:	7b7b      	ldrb	r3, [r7, #13]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	3301      	adds	r3, #1
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80058d0:	4618      	mov	r0, r3
 80058d2:	f107 0308 	add.w	r3, r7, #8
 80058d6:	2204      	movs	r2, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	f7fd fedb 	bl	8003694 <WIZCHIP_READ_BUF>
						destport = getSn_DPORT(s);
 80058de:	7b7b      	ldrb	r3, [r7, #13]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	3301      	adds	r3, #1
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fe38 	bl	8003560 <WIZCHIP_READ>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b29c      	uxth	r4, r3
 80058f8:	7b7b      	ldrb	r3, [r7, #13]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3301      	adds	r3, #1
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fe2b 	bl	8003560 <WIZCHIP_READ>
 800590a:	4603      	mov	r3, r0
 800590c:	b29b      	uxth	r3, r3
 800590e:	4423      	add	r3, r4
 8005910:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 8005912:	4860      	ldr	r0, [pc, #384]	; (8005a94 <httpServer_run+0x338>)
 8005914:	f001 f866 	bl	80069e4 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 8005918:	7b7b      	ldrb	r3, [r7, #13]
 800591a:	4619      	mov	r1, r3
 800591c:	485e      	ldr	r0, [pc, #376]	; (8005a98 <httpServer_run+0x33c>)
 800591e:	f000 ffed 	bl	80068fc <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8005922:	7a3b      	ldrb	r3, [r7, #8]
 8005924:	4619      	mov	r1, r3
 8005926:	7a7b      	ldrb	r3, [r7, #9]
 8005928:	4618      	mov	r0, r3
 800592a:	7abb      	ldrb	r3, [r7, #10]
 800592c:	461c      	mov	r4, r3
 800592e:	7afb      	ldrb	r3, [r7, #11]
 8005930:	461a      	mov	r2, r3
 8005932:	89fb      	ldrh	r3, [r7, #14]
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	9200      	str	r2, [sp, #0]
 8005938:	4623      	mov	r3, r4
 800593a:	4602      	mov	r2, r0
 800593c:	4857      	ldr	r0, [pc, #348]	; (8005a9c <httpServer_run+0x340>)
 800593e:	f000 ffdd 	bl	80068fc <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 8005942:	7b7b      	ldrb	r3, [r7, #13]
 8005944:	4619      	mov	r1, r3
 8005946:	4856      	ldr	r0, [pc, #344]	; (8005aa0 <httpServer_run+0x344>)
 8005948:	f000 ffd8 	bl	80068fc <iprintf>
						http_process_handler(s, parsed_http_request);
 800594c:	4b4f      	ldr	r3, [pc, #316]	; (8005a8c <httpServer_run+0x330>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	7b7b      	ldrb	r3, [r7, #13]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fafb 	bl	8005f50 <http_process_handler>
						gettime = get_httpServer_timecount();
 800595a:	f000 fd1f 	bl	800639c <get_httpServer_timecount>
 800595e:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8005960:	e00c      	b.n	800597c <httpServer_run+0x220>
							if((get_httpServer_timecount() - gettime) > 3)
 8005962:	f000 fd1b 	bl	800639c <get_httpServer_timecount>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d905      	bls.n	800597c <httpServer_run+0x220>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 8005970:	7b7b      	ldrb	r3, [r7, #13]
 8005972:	4619      	mov	r1, r3
 8005974:	484b      	ldr	r0, [pc, #300]	; (8005aa4 <httpServer_run+0x348>)
 8005976:	f000 ffc1 	bl	80068fc <iprintf>
								break;
 800597a:	e012      	b.n	80059a2 <httpServer_run+0x246>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800597c:	7b7b      	ldrb	r3, [r7, #13]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd ff48 	bl	8003814 <getSn_TX_FSR>
 8005984:	4603      	mov	r3, r0
 8005986:	461c      	mov	r4, r3
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3301      	adds	r3, #1
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005994:	4618      	mov	r0, r3
 8005996:	f7fd fde3 	bl	8003560 <WIZCHIP_READ>
 800599a:	4603      	mov	r3, r0
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	429c      	cmp	r4, r3
 80059a0:	d1df      	bne.n	8005962 <httpServer_run+0x206>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	4a3a      	ldr	r2, [pc, #232]	; (8005a90 <httpServer_run+0x334>)
 80059a6:	2194      	movs	r1, #148	; 0x94
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	3388      	adds	r3, #136	; 0x88
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <httpServer_run+0x26c>
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	4a35      	ldr	r2, [pc, #212]	; (8005a90 <httpServer_run+0x334>)
 80059ba:	2194      	movs	r1, #148	; 0x94
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	2203      	movs	r2, #3
 80059c4:	701a      	strb	r2, [r3, #0]
					break;
 80059c6:	e056      	b.n	8005a76 <httpServer_run+0x31a>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <httpServer_run+0x334>)
 80059cc:	2194      	movs	r1, #148	; 0x94
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	2204      	movs	r2, #4
 80059d6:	701a      	strb	r2, [r3, #0]
					break;
 80059d8:	e04d      	b.n	8005a76 <httpServer_run+0x31a>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	4619      	mov	r1, r3
 80059de:	4832      	ldr	r0, [pc, #200]	; (8005aa8 <httpServer_run+0x34c>)
 80059e0:	f000 ff8c 	bl	80068fc <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <httpServer_run+0x350>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	7b78      	ldrb	r0, [r7, #13]
 80059ea:	2300      	movs	r3, #0
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	2100      	movs	r1, #0
 80059f2:	f000 f911 	bl	8005c18 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <httpServer_run+0x334>)
 80059fa:	2194      	movs	r1, #148	; 0x94
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	3388      	adds	r3, #136	; 0x88
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d137      	bne.n	8005a7a <httpServer_run+0x31e>
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	4a20      	ldr	r2, [pc, #128]	; (8005a90 <httpServer_run+0x334>)
 8005a0e:	2194      	movs	r1, #148	; 0x94
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	4413      	add	r3, r2
 8005a16:	2204      	movs	r2, #4
 8005a18:	701a      	strb	r2, [r3, #0]
					break;
 8005a1a:	e02e      	b.n	8005a7a <httpServer_run+0x31e>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 8005a1c:	7b7b      	ldrb	r3, [r7, #13]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4823      	ldr	r0, [pc, #140]	; (8005ab0 <httpServer_run+0x354>)
 8005a22:	f000 ff6b 	bl	80068fc <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <httpServer_run+0x334>)
 8005a2a:	2194      	movs	r1, #148	; 0x94
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	3388      	adds	r3, #136	; 0x88
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <httpServer_run+0x334>)
 8005a3c:	2194      	movs	r1, #148	; 0x94
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	4413      	add	r3, r2
 8005a44:	338c      	adds	r3, #140	; 0x8c
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <httpServer_run+0x334>)
 8005a4e:	2194      	movs	r1, #148	; 0x94
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	4413      	add	r3, r2
 8005a56:	3384      	adds	r3, #132	; 0x84
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <httpServer_run+0x334>)
 8005a60:	2194      	movs	r1, #148	; 0x94
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 8005a6c:	7b7b      	ldrb	r3, [r7, #13]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fa4c 	bl	8005f0c <http_disconnect>
					break;
 8005a74:	e002      	b.n	8005a7c <httpServer_run+0x320>
					break;
 8005a76:	bf00      	nop
 8005a78:	e044      	b.n	8005b04 <httpServer_run+0x3a8>
					break;
 8005a7a:	bf00      	nop
			}
			break;
 8005a7c:	e042      	b.n	8005b04 <httpServer_run+0x3a8>
 8005a7e:	bf00      	nop
 8005a80:	200017bc 	.word	0x200017bc
 8005a84:	20000110 	.word	0x20000110
 8005a88:	200017b8 	.word	0x200017b8
 8005a8c:	20000114 	.word	0x20000114
 8005a90:	20000124 	.word	0x20000124
 8005a94:	0800bfd4 	.word	0x0800bfd4
 8005a98:	0800bfd8 	.word	0x0800bfd8
 8005a9c:	0800c004 	.word	0x0800c004
 8005aa0:	0800c01c 	.word	0x0800c01c
 8005aa4:	0800c050 	.word	0x0800c050
 8005aa8:	0800c09c 	.word	0x0800c09c
 8005aac:	20000118 	.word	0x20000118
 8005ab0:	0800c0d0 	.word	0x0800c0d0

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 8005ab4:	7b7b      	ldrb	r3, [r7, #13]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4814      	ldr	r0, [pc, #80]	; (8005b0c <httpServer_run+0x3b0>)
 8005aba:	f000 ff1f 	bl	80068fc <iprintf>
#endif
			disconnect(s);
 8005abe:	7b7b      	ldrb	r3, [r7, #13]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe f9d3 	bl	8003e6c <disconnect>
			break;
 8005ac6:	e01d      	b.n	8005b04 <httpServer_run+0x3a8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 8005ac8:	7b7b      	ldrb	r3, [r7, #13]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4810      	ldr	r0, [pc, #64]	; (8005b10 <httpServer_run+0x3b4>)
 8005ace:	f000 ff15 	bl	80068fc <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 8005ad2:	7b78      	ldrb	r0, [r7, #13]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2250      	movs	r2, #80	; 0x50
 8005ad8:	2101      	movs	r1, #1
 8005ada:	f7fd ffe9 	bl	8003ab0 <socket>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	7b7b      	ldrb	r3, [r7, #13]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d10c      	bne.n	8005b02 <httpServer_run+0x3a6>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 8005ae8:	7b7b      	ldrb	r3, [r7, #13]
 8005aea:	4619      	mov	r1, r3
 8005aec:	4809      	ldr	r0, [pc, #36]	; (8005b14 <httpServer_run+0x3b8>)
 8005aee:	f000 ff05 	bl	80068fc <iprintf>
#endif
			}
			break;
 8005af2:	e006      	b.n	8005b02 <httpServer_run+0x3a6>

		case SOCK_INIT:
			listen(s);
 8005af4:	7b7b      	ldrb	r3, [r7, #13]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe f95e 	bl	8003db8 <listen>
			break;
 8005afc:	e002      	b.n	8005b04 <httpServer_run+0x3a8>

		case SOCK_LISTEN:
			break;

		default :
			break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <httpServer_run+0x3a8>
			break;
 8005b02:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd90      	pop	{r4, r7, pc}
 8005b0c:	0800c104 	.word	0x0800c104
 8005b10:	0800c124 	.word	0x0800c124
 8005b14:	0800c140 	.word	0x0800c140

08005b18 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	603a      	str	r2, [r7, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
 8005b26:	460b      	mov	r3, r1
 8005b28:	71bb      	strb	r3, [r7, #6]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 8005b2e:	88bb      	ldrh	r3, [r7, #4]
 8005b30:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005b34:	d020      	beq.n	8005b78 <send_http_response_header+0x60>
 8005b36:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8005b3a:	d02c      	beq.n	8005b96 <send_http_response_header+0x7e>
 8005b3c:	2bc8      	cmp	r3, #200	; 0xc8
 8005b3e:	d000      	beq.n	8005b42 <send_http_response_header+0x2a>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 8005b40:	e038      	b.n	8005bb4 <send_http_response_header+0x9c>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 8005b42:	79bb      	ldrb	r3, [r7, #6]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d00f      	beq.n	8005b68 <send_http_response_header+0x50>
 8005b48:	79bb      	ldrb	r3, [r7, #6]
 8005b4a:	2b09      	cmp	r3, #9
 8005b4c:	d00c      	beq.n	8005b68 <send_http_response_header+0x50>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	4619      	mov	r1, r3
 8005b52:	4829      	ldr	r0, [pc, #164]	; (8005bf8 <send_http_response_header+0xe0>)
 8005b54:	f000 fed2 	bl	80068fc <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 8005b58:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <send_http_response_header+0xe4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	79b9      	ldrb	r1, [r7, #6]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff f969 	bl	8004e38 <make_http_response_head>
			break;
 8005b66:	e025      	b.n	8005bb4 <send_http_response_header+0x9c>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4824      	ldr	r0, [pc, #144]	; (8005c00 <send_http_response_header+0xe8>)
 8005b6e:	f000 fec5 	bl	80068fc <iprintf>
				http_status = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	80bb      	strh	r3, [r7, #4]
			break;
 8005b76:	e01d      	b.n	8005bb4 <send_http_response_header+0x9c>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4821      	ldr	r0, [pc, #132]	; (8005c04 <send_http_response_header+0xec>)
 8005b7e:	f000 febd 	bl	80068fc <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <send_http_response_header+0xe4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <send_http_response_header+0xf0>)
 8005b88:	4618      	mov	r0, r3
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	2376      	movs	r3, #118	; 0x76
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 fdfa 	bl	8006788 <memcpy>
			break;
 8005b94:	e00e      	b.n	8005bb4 <send_http_response_header+0x9c>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	481c      	ldr	r0, [pc, #112]	; (8005c0c <send_http_response_header+0xf4>)
 8005b9c:	f000 feae 	bl	80068fc <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <send_http_response_header+0xe4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <send_http_response_header+0xf8>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	4611      	mov	r1, r2
 8005baa:	2399      	movs	r3, #153	; 0x99
 8005bac:	461a      	mov	r2, r3
 8005bae:	f000 fdeb 	bl	8006788 <memcpy>
			break;
 8005bb2:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 8005bb4:	88bb      	ldrh	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <send_http_response_header+0xd8>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 8005bba:	79fc      	ldrb	r4, [r7, #7]
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <send_http_response_header+0xe4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fa fb39 	bl	8000238 <strlen>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4811      	ldr	r0, [pc, #68]	; (8005c14 <send_http_response_header+0xfc>)
 8005bd0:	f000 fe94 	bl	80068fc <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <send_http_response_header+0xe4>)
 8005bd6:	681c      	ldr	r4, [r3, #0]
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <send_http_response_header+0xe4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fa fb2b 	bl	8000238 <strlen>
 8005be2:	4603      	mov	r3, r0
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	4621      	mov	r1, r4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f9b4 	bl	8003f58 <send>
	}
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd90      	pop	{r4, r7, pc}
 8005bf8:	0800c15c 	.word	0x0800c15c
 8005bfc:	20000118 	.word	0x20000118
 8005c00:	0800c194 	.word	0x0800c194
 8005c04:	0800c1d4 	.word	0x0800c1d4
 8005c08:	0800c868 	.word	0x0800c868
 8005c0c:	0800c210 	.word	0x0800c210
 8005c10:	0800c7cc 	.word	0x0800c7cc
 8005c14:	0800c250 	.word	0x0800c250

08005c18 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fd3e 	bl	80056b0 <getHTTPSequenceNum>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74bb      	strb	r3, [r7, #18]
 8005c38:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	f000 811d 	beq.w	8005e7e <send_http_response_body+0x266>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 8005c44:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005c48:	4a8f      	ldr	r2, [pc, #572]	; (8005e88 <send_http_response_body+0x270>)
 8005c4a:	2194      	movs	r1, #148	; 0x94
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	3388      	adds	r3, #136	; 0x88
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d150      	bne.n	8005cfc <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c60:	d343      	bcc.n	8005cea <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 8005c62:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005c66:	4a88      	ldr	r2, [pc, #544]	; (8005e88 <send_http_response_body+0x270>)
 8005c68:	2194      	movs	r1, #148	; 0x94
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	3384      	adds	r3, #132	; 0x84
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 8005c76:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005c7a:	4a83      	ldr	r2, [pc, #524]	; (8005e88 <send_http_response_body+0x270>)
 8005c7c:	2194      	movs	r1, #148	; 0x94
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	3388      	adds	r3, #136	; 0x88
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 8005c8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005c8e:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 8005c90:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005c94:	2294      	movs	r2, #148	; 0x94
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	4a7b      	ldr	r2, [pc, #492]	; (8005e88 <send_http_response_body+0x270>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd7a 	bl	800679e <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 8005caa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005cae:	2294      	movs	r2, #148	; 0x94
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	4a74      	ldr	r2, [pc, #464]	; (8005e88 <send_http_response_body+0x270>)
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3301      	adds	r3, #1
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff28 	bl	8006b12 <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 8005cc2:	7bf9      	ldrb	r1, [r7, #15]
 8005cc4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005cc8:	2294      	movs	r2, #148	; 0x94
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	4a6e      	ldr	r2, [pc, #440]	; (8005e88 <send_http_response_body+0x270>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	486d      	ldr	r0, [pc, #436]	; (8005e8c <send_http_response_body+0x274>)
 8005cd8:	f000 fe10 	bl	80068fc <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	486b      	ldr	r0, [pc, #428]	; (8005e90 <send_http_response_body+0x278>)
 8005ce4:	f000 fe0a 	bl	80068fc <iprintf>
 8005ce8:	e03b      	b.n	8005d62 <send_http_response_body+0x14a>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4867      	ldr	r0, [pc, #412]	; (8005e94 <send_http_response_body+0x27c>)
 8005cf6:	f000 fe01 	bl	80068fc <iprintf>
 8005cfa:	e032      	b.n	8005d62 <send_http_response_body+0x14a>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8005cfc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d00:	4a61      	ldr	r2, [pc, #388]	; (8005e88 <send_http_response_body+0x270>)
 8005d02:	2194      	movs	r1, #148	; 0x94
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3388      	adds	r3, #136	; 0x88
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d12:	495d      	ldr	r1, [pc, #372]	; (8005e88 <send_http_response_body+0x270>)
 8005d14:	2094      	movs	r0, #148	; 0x94
 8005d16:	fb00 f303 	mul.w	r3, r0, r3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	338c      	adds	r3, #140	; 0x8c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2a:	d303      	bcc.n	8005d34 <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 8005d2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e010      	b.n	8005d56 <send_http_response_body+0x13e>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 8005d34:	7bf8      	ldrb	r0, [r7, #15]
 8005d36:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d3a:	4a53      	ldr	r2, [pc, #332]	; (8005e88 <send_http_response_body+0x270>)
 8005d3c:	2194      	movs	r1, #148	; 0x94
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3388      	adds	r3, #136	; 0x88
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4851      	ldr	r0, [pc, #324]	; (8005e94 <send_http_response_body+0x27c>)
 8005d4e:	f000 fdd5 	bl	80068fc <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	484e      	ldr	r0, [pc, #312]	; (8005e98 <send_http_response_body+0x280>)
 8005d5e:	f000 fdcd 	bl	80068fc <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 8005d62:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d66:	4a48      	ldr	r2, [pc, #288]	; (8005e88 <send_http_response_body+0x270>)
 8005d68:	2194      	movs	r1, #148	; 0x94
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	3390      	adds	r3, #144	; 0x90
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d125      	bne.n	8005dc4 <send_http_response_body+0x1ac>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 8005d78:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d7c:	4a42      	ldr	r2, [pc, #264]	; (8005e88 <send_http_response_body+0x270>)
 8005d7e:	2194      	movs	r1, #148	; 0x94
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	3388      	adds	r3, #136	; 0x88
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <send_http_response_body+0x18a>
 8005d8e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005d92:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <send_http_response_body+0x270>)
 8005d94:	2194      	movs	r1, #148	; 0x94
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3384      	adds	r3, #132	; 0x84
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005daa:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <send_http_response_body+0x270>)
 8005dac:	2194      	movs	r1, #148	; 0x94
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	338c      	adds	r3, #140	; 0x8c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	f000 fc09 	bl	80065d4 <read_userReg_webContent>
 8005dc2:	e001      	b.n	8005dc8 <send_http_response_body+0x1b0>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4833      	ldr	r0, [pc, #204]	; (8005e9c <send_http_response_body+0x284>)
 8005dd0:	f000 fd94 	bl	80068fc <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <send_http_response_body+0x1d2>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe f8b8 	bl	8003f58 <send>
 8005de8:	e001      	b.n	8005dee <send_http_response_body+0x1d6>
	else flag_datasend_end = 1;
 8005dea:	2301      	movs	r3, #1
 8005dec:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <send_http_response_body+0x21e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 8005df4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005df8:	4a23      	ldr	r2, [pc, #140]	; (8005e88 <send_http_response_body+0x270>)
 8005dfa:	2194      	movs	r1, #148	; 0x94
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	3384      	adds	r3, #132	; 0x84
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 8005e08:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <send_http_response_body+0x270>)
 8005e0e:	2194      	movs	r1, #148	; 0x94
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	3388      	adds	r3, #136	; 0x88
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 8005e1c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <send_http_response_body+0x270>)
 8005e22:	2194      	movs	r1, #148	; 0x94
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	338c      	adds	r3, #140	; 0x8c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	74fb      	strb	r3, [r7, #19]
 8005e34:	e024      	b.n	8005e80 <send_http_response_body+0x268>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 8005e36:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <send_http_response_body+0x270>)
 8005e3c:	2194      	movs	r1, #148	; 0x94
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	338c      	adds	r3, #140	; 0x8c
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	440a      	add	r2, r1
 8005e50:	490d      	ldr	r1, [pc, #52]	; (8005e88 <send_http_response_body+0x270>)
 8005e52:	2094      	movs	r0, #148	; 0x94
 8005e54:	fb00 f303 	mul.w	r3, r0, r3
 8005e58:	440b      	add	r3, r1
 8005e5a:	338c      	adds	r3, #140	; 0x8c
 8005e5c:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 8005e5e:	7bf8      	ldrb	r0, [r7, #15]
 8005e60:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <send_http_response_body+0x270>)
 8005e66:	2194      	movs	r1, #148	; 0x94
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	338c      	adds	r3, #140	; 0x8c
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	4601      	mov	r1, r0
 8005e76:	480a      	ldr	r0, [pc, #40]	; (8005ea0 <send_http_response_body+0x288>)
 8005e78:	f000 fd40 	bl	80068fc <iprintf>
 8005e7c:	e000      	b.n	8005e80 <send_http_response_body+0x268>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8005e7e:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000124 	.word	0x20000124
 8005e8c:	0800c28c 	.word	0x0800c28c
 8005e90:	0800c2c8 	.word	0x0800c2c8
 8005e94:	0800c308 	.word	0x0800c308
 8005e98:	0800c348 	.word	0x0800c348
 8005e9c:	0800c388 	.word	0x0800c388
 8005ea0:	0800c3c4 	.word	0x0800c3c4

08005ea4 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	480e      	ldr	r0, [pc, #56]	; (8005efc <send_http_response_cgi+0x58>)
 8005ec2:	f000 fd1b 	bl	80068fc <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 8005ec6:	89ba      	ldrh	r2, [r7, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <send_http_response_cgi+0x5c>)
 8005ed0:	490c      	ldr	r1, [pc, #48]	; (8005f04 <send_http_response_cgi+0x60>)
 8005ed2:	68b8      	ldr	r0, [r7, #8]
 8005ed4:	f000 fd9e 	bl	8006a14 <siprintf>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	8afa      	ldrh	r2, [r7, #22]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4809      	ldr	r0, [pc, #36]	; (8005f08 <send_http_response_cgi+0x64>)
 8005ee4:	f000 fd0a 	bl	80068fc <iprintf>
#endif

	send(s, buf, send_len);
 8005ee8:	8afa      	ldrh	r2, [r7, #22]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe f832 	bl	8003f58 <send>
}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	0800c400 	.word	0x0800c400
 8005f00:	0800c438 	.word	0x0800c438
 8005f04:	0800c474 	.word	0x0800c474
 8005f08:	0800c480 	.word	0x0800c480

08005f0c <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f22:	2108      	movs	r1, #8
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fd fb67 	bl	80035f8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005f2a:	bf00      	nop
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	3301      	adds	r3, #1
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fb11 	bl	8003560 <WIZCHIP_READ>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f3      	bne.n	8005f2c <http_disconnect+0x20>

	return SOCK_OK;
 8005f44:	2301      	movs	r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 8005f50:	b5b0      	push	{r4, r5, r7, lr}
 8005f52:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8005f56:	af02      	add	r7, sp, #8
 8005f58:	4602      	mov	r2, r0
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	6019      	str	r1, [r3, #0]
 8005f5e:	1dfb      	adds	r3, r7, #7
 8005f60:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	uint16_t content_num = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
	uint32_t file_len = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 8005f74:	f107 030c 	add.w	r3, r7, #12
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2100      	movs	r1, #0
 8005f82:	f000 fc0c 	bl	800679e <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8005f86:	1dfb      	adds	r3, r7, #7
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fb90 	bl	80056b0 <getHTTPSequenceNum>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 8005f96:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	f000 81e7 	beq.w	8006370 <http_process_handler+0x420>

	http_status = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
	http_response = pHTTP_RX;
 8005fa8:	4bc8      	ldr	r3, [pc, #800]	; (80062cc <http_process_handler+0x37c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4ac8      	ldr	r2, [pc, #800]	; (80062d0 <http_process_handler+0x380>)
 8005fae:	6013      	str	r3, [r2, #0]
	file_len = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	f200 81c8 	bhi.w	8006352 <http_process_handler+0x402>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <http_process_handler+0x78>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	080061fb 	.word	0x080061fb
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 8005fd8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005fdc:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8005fe0:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 8005fe4:	1dfb      	adds	r3, r7, #7
 8005fe6:	7818      	ldrb	r0, [r3, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	f7ff fd93 	bl	8005b18 <send_http_response_header>
			break;
 8005ff2:	e1c0      	b.n	8006376 <http_process_handler+0x426>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	f107 020c 	add.w	r2, r7, #12
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fa53 	bl	80054ac <get_http_uri_name>
			uri_name = uri_buf;
 8006006:	f107 030c 	add.w	r3, r7, #12
 800600a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 800600e:	49b1      	ldr	r1, [pc, #708]	; (80062d4 <http_process_handler+0x384>)
 8006010:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8006014:	f7fa f906 	bl	8000224 <strcmp>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <http_process_handler+0xe6>
 800601e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006022:	49ad      	ldr	r1, [pc, #692]	; (80062d8 <http_process_handler+0x388>)
 8006024:	461a      	mov	r2, r3
 8006026:	460b      	mov	r3, r1
 8006028:	cb03      	ldmia	r3!, {r0, r1}
 800602a:	6010      	str	r0, [r2, #0]
 800602c:	6051      	str	r1, [r2, #4]
 800602e:	8819      	ldrh	r1, [r3, #0]
 8006030:	789b      	ldrb	r3, [r3, #2]
 8006032:	8111      	strh	r1, [r2, #8]
 8006034:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 8006036:	49a9      	ldr	r1, [pc, #676]	; (80062dc <http_process_handler+0x38c>)
 8006038:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800603c:	f7fa f8f2 	bl	8000224 <strcmp>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <http_process_handler+0x10c>
 8006046:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800604a:	4aa5      	ldr	r2, [pc, #660]	; (80062e0 <http_process_handler+0x390>)
 800604c:	461c      	mov	r4, r3
 800604e:	4613      	mov	r3, r2
 8006050:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006052:	6020      	str	r0, [r4, #0]
 8006054:	6061      	str	r1, [r4, #4]
 8006056:	60a2      	str	r2, [r4, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 800605c:	49a1      	ldr	r1, [pc, #644]	; (80062e4 <http_process_handler+0x394>)
 800605e:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8006062:	f7fa f8df 	bl	8000224 <strcmp>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <http_process_handler+0x134>
 800606c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006070:	4a9d      	ldr	r2, [pc, #628]	; (80062e8 <http_process_handler+0x398>)
 8006072:	461d      	mov	r5, r3
 8006074:	4614      	mov	r4, r2
 8006076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006078:	6028      	str	r0, [r5, #0]
 800607a:	6069      	str	r1, [r5, #4]
 800607c:	60aa      	str	r2, [r5, #8]
 800607e:	60eb      	str	r3, [r5, #12]
 8006080:	8823      	ldrh	r3, [r4, #0]
 8006082:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 8006084:	463b      	mov	r3, r7
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe ff88 	bl	8004fa4 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 8006094:	1dfb      	adds	r3, r7, #7
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	4894      	ldr	r0, [pc, #592]	; (80062ec <http_process_handler+0x39c>)
 800609c:	f000 fc2e 	bl	80068fc <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 80060a0:	1dfb      	adds	r3, r7, #7
 80060a2:	7819      	ldrb	r1, [r3, #0]
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	461a      	mov	r2, r3
 80060ac:	4890      	ldr	r0, [pc, #576]	; (80062f0 <http_process_handler+0x3a0>)
 80060ae:	f000 fc25 	bl	80068fc <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 80060b2:	1dfb      	adds	r3, r7, #7
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80060ba:	4619      	mov	r1, r3
 80060bc:	488d      	ldr	r0, [pc, #564]	; (80062f4 <http_process_handler+0x3a4>)
 80060be:	f000 fc1d 	bl	80068fc <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d12b      	bne.n	8006124 <http_process_handler+0x1d4>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 80060cc:	4b8a      	ldr	r3, [pc, #552]	; (80062f8 <http_process_handler+0x3a8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80060d4:	4619      	mov	r1, r3
 80060d6:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80060da:	f000 fab9 	bl	8006650 <http_get_cgi_handler>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 80060e4:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <http_process_handler+0x1c2>
 80060ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80060f0:	f240 72be 	movw	r2, #1982	; 0x7be
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d80c      	bhi.n	8006112 <http_process_handler+0x1c2>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 80060f8:	4b75      	ldr	r3, [pc, #468]	; (80062d0 <http_process_handler+0x380>)
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <http_process_handler+0x3a8>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8006104:	b29c      	uxth	r4, r3
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	7818      	ldrb	r0, [r3, #0]
 800610a:	4623      	mov	r3, r4
 800610c:	f7ff feca 	bl	8005ea4 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 8006110:	e130      	b.n	8006374 <http_process_handler+0x424>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8006112:	1dfb      	adds	r3, r7, #7
 8006114:	7818      	ldrb	r0, [r3, #0]
 8006116:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800611a:	2200      	movs	r2, #0
 800611c:	2108      	movs	r1, #8
 800611e:	f7ff fcfb 	bl	8005b18 <send_http_response_header>
			break;
 8006122:	e127      	b.n	8006374 <http_process_handler+0x424>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 8006124:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8006128:	f207 2112 	addw	r1, r7, #530	; 0x212
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fa13 	bl	800655c <find_userReg_webContent>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d011      	beq.n	8006160 <http_process_handler+0x210>
					content_found = 1; // Web content found in code flash memory
 800613c:	2301      	movs	r3, #1
 800613e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
					content_addr = (uint32_t)content_num;
 8006142:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8006146:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 800614a:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 800614e:	4a6b      	ldr	r2, [pc, #428]	; (80062fc <http_process_handler+0x3ac>)
 8006150:	2194      	movs	r1, #148	; 0x94
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	4413      	add	r3, r2
 8006158:	3390      	adds	r3, #144	; 0x90
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e002      	b.n	8006166 <http_process_handler+0x216>
					content_found = 0; // fail to find content
 8006160:	2300      	movs	r3, #0
 8006162:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(!content_found)
 8006166:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <http_process_handler+0x234>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 800616e:	1dfb      	adds	r3, r7, #7
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	4862      	ldr	r0, [pc, #392]	; (8006300 <http_process_handler+0x3b0>)
 8006176:	f000 fbc1 	bl	80068fc <iprintf>
					http_status = STATUS_NOT_FOUND;
 800617a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800617e:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
 8006182:	e00e      	b.n	80061a2 <http_process_handler+0x252>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 8006184:	1dfb      	adds	r3, r7, #7
 8006186:	7819      	ldrb	r1, [r3, #0]
 8006188:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8006192:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006196:	485b      	ldr	r0, [pc, #364]	; (8006304 <http_process_handler+0x3b4>)
 8006198:	f000 fbb0 	bl	80068fc <iprintf>
					http_status = STATUS_OK;
 800619c:	23c8      	movs	r3, #200	; 0xc8
 800619e:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
				if(http_status)
 80061a2:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d013      	beq.n	80061d2 <http_process_handler+0x282>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80061b2:	4619      	mov	r1, r3
 80061b4:	4854      	ldr	r0, [pc, #336]	; (8006308 <http_process_handler+0x3b8>)
 80061b6:	f000 fba1 	bl	80068fc <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	7859      	ldrb	r1, [r3, #1]
 80061c0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80061c4:	f8b7 421a 	ldrh.w	r4, [r7, #538]	; 0x21a
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	7818      	ldrb	r0, [r3, #0]
 80061cc:	4623      	mov	r3, r4
 80061ce:	f7ff fca3 	bl	8005b18 <send_http_response_header>
				if(http_status == STATUS_OK)
 80061d2:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 80061d6:	2bc8      	cmp	r3, #200	; 0xc8
 80061d8:	f040 80cc 	bne.w	8006374 <http_process_handler+0x424>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 80061dc:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <http_process_handler+0x380>)
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80061e4:	1dfa      	adds	r2, r7, #7
 80061e6:	7810      	ldrb	r0, [r2, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80061ee:	460a      	mov	r2, r1
 80061f0:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80061f4:	f7ff fd10 	bl	8005c18 <send_http_response_body>
			break;
 80061f8:	e0bc      	b.n	8006374 <http_process_handler+0x424>

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 80061fa:	463b      	mov	r3, r7
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	1c98      	adds	r0, r3, #2
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4a41      	ldr	r2, [pc, #260]	; (800630c <http_process_handler+0x3bc>)
 8006206:	4933      	ldr	r1, [pc, #204]	; (80062d4 <http_process_handler+0x384>)
 8006208:	f7ff f99f 	bl	800554a <mid>
			uri_name = uri_buf;
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fec0 	bl	8004fa4 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 8006224:	1dfb      	adds	r3, r7, #7
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	4839      	ldr	r0, [pc, #228]	; (8006310 <http_process_handler+0x3c0>)
 800622c:	f000 fb66 	bl	80068fc <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 8006230:	1dfb      	adds	r3, r7, #7
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006238:	4619      	mov	r1, r3
 800623a:	4836      	ldr	r0, [pc, #216]	; (8006314 <http_process_handler+0x3c4>)
 800623c:	f000 fb5e 	bl	80068fc <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 8006240:	463b      	mov	r3, r7
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	4619      	mov	r1, r3
 8006248:	4833      	ldr	r0, [pc, #204]	; (8006318 <http_process_handler+0x3c8>)
 800624a:	f000 fb57 	bl	80068fc <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d172      	bne.n	800633e <http_process_handler+0x3ee>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <http_process_handler+0x380>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8006260:	4639      	mov	r1, r7
 8006262:	6809      	ldr	r1, [r1, #0]
 8006264:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8006268:	f000 fa1e 	bl	80066a8 <http_post_cgi_handler>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 8006272:	1dfb      	adds	r3, r7, #7
 8006274:	7819      	ldrb	r1, [r3, #0]
 8006276:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <http_process_handler+0x332>
 800627e:	4a27      	ldr	r2, [pc, #156]	; (800631c <http_process_handler+0x3cc>)
 8006280:	e000      	b.n	8006284 <http_process_handler+0x334>
 8006282:	4a27      	ldr	r2, [pc, #156]	; (8006320 <http_process_handler+0x3d0>)
 8006284:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8006288:	4826      	ldr	r0, [pc, #152]	; (8006324 <http_process_handler+0x3d4>)
 800628a:	f000 fb37 	bl	80068fc <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800628e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8006292:	2b00      	cmp	r3, #0
 8006294:	d04a      	beq.n	800632c <http_process_handler+0x3dc>
 8006296:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800629a:	f240 72be 	movw	r2, #1982	; 0x7be
 800629e:	4293      	cmp	r3, r2
 80062a0:	d844      	bhi.n	800632c <http_process_handler+0x3dc>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <http_process_handler+0x3a8>)
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <http_process_handler+0x380>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80062ae:	b29c      	uxth	r4, r3
 80062b0:	1dfb      	adds	r3, r7, #7
 80062b2:	7818      	ldrb	r0, [r3, #0]
 80062b4:	4623      	mov	r3, r4
 80062b6:	f7ff fdf5 	bl	8005ea4 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 80062ba:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d146      	bne.n	8006350 <http_process_handler+0x400>
 80062c2:	4b19      	ldr	r3, [pc, #100]	; (8006328 <http_process_handler+0x3d8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4798      	blx	r3
 80062c8:	e042      	b.n	8006350 <http_process_handler+0x400>
 80062ca:	bf00      	nop
 80062cc:	200017bc 	.word	0x200017bc
 80062d0:	20000118 	.word	0x20000118
 80062d4:	0800c4c8 	.word	0x0800c4c8
 80062d8:	0800c4cc 	.word	0x0800c4cc
 80062dc:	0800c4d8 	.word	0x0800c4d8
 80062e0:	0800c4dc 	.word	0x0800c4dc
 80062e4:	0800c4ec 	.word	0x0800c4ec
 80062e8:	0800c4f4 	.word	0x0800c4f4
 80062ec:	0800c508 	.word	0x0800c508
 80062f0:	0800c530 	.word	0x0800c530
 80062f4:	0800c558 	.word	0x0800c558
 80062f8:	200017b8 	.word	0x200017b8
 80062fc:	20000124 	.word	0x20000124
 8006300:	0800c580 	.word	0x0800c580
 8006304:	0800c5ac 	.word	0x0800c5ac
 8006308:	0800c5f4 	.word	0x0800c5f4
 800630c:	0800c630 	.word	0x0800c630
 8006310:	0800c638 	.word	0x0800c638
 8006314:	0800c660 	.word	0x0800c660
 8006318:	0800c688 	.word	0x0800c688
 800631c:	0800c694 	.word	0x0800c694
 8006320:	0800c6a4 	.word	0x0800c6a4
 8006324:	0800c6b8 	.word	0x0800c6b8
 8006328:	20000058 	.word	0x20000058
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800632c:	1dfb      	adds	r3, r7, #7
 800632e:	7818      	ldrb	r0, [r3, #0]
 8006330:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8006334:	2200      	movs	r2, #0
 8006336:	2108      	movs	r1, #8
 8006338:	f7ff fbee 	bl	8005b18 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 800633c:	e01b      	b.n	8006376 <http_process_handler+0x426>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 800633e:	1dfb      	adds	r3, r7, #7
 8006340:	7818      	ldrb	r0, [r3, #0]
 8006342:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8006346:	2200      	movs	r2, #0
 8006348:	2100      	movs	r1, #0
 800634a:	f7ff fbe5 	bl	8005b18 <send_http_response_header>
			break;
 800634e:	e012      	b.n	8006376 <http_process_handler+0x426>
 8006350:	e011      	b.n	8006376 <http_process_handler+0x426>

		default :
			http_status = STATUS_BAD_REQ;
 8006352:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006356:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 800635a:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 800635e:	1dfb      	adds	r3, r7, #7
 8006360:	7818      	ldrb	r0, [r3, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	f7ff fbd6 	bl	8005b18 <send_http_response_header>
			break;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <http_process_handler+0x426>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <http_process_handler+0x426>
			break;
 8006374:	bf00      	nop
	}
}
 8006376:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800637a:	46bd      	mov	sp, r7
 800637c:	bdb0      	pop	{r4, r5, r7, pc}
 800637e:	bf00      	nop

08006380 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <httpServer_time_handler+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a03      	ldr	r2, [pc, #12]	; (8006398 <httpServer_time_handler+0x18>)
 800638c:	6013      	str	r3, [r2, #0]
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000120 	.word	0x20000120

0800639c <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 80063a0:	4b02      	ldr	r3, [pc, #8]	; (80063ac <get_httpServer_timecount+0x10>)
 80063a2:	681b      	ldr	r3, [r3, #0]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	20000120 	.word	0x20000120

080063b0 <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d04e      	beq.n	800645e <reg_httpServer_webContent+0xae>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04b      	beq.n	800645e <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 80063c6:	4b29      	ldr	r3, [pc, #164]	; (800646c <reg_httpServer_webContent+0xbc>)
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	2b13      	cmp	r3, #19
 80063cc:	d849      	bhi.n	8006462 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7f9 ff32 	bl	8000238 <strlen>
 80063d4:	4603      	mov	r3, r0
 80063d6:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 80063d8:	6838      	ldr	r0, [r7, #0]
 80063da:	f7f9 ff2d 	bl	8000238 <strlen>
 80063de:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 80063e0:	89fb      	ldrh	r3, [r7, #14]
 80063e2:	3301      	adds	r3, #1
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <reg_httpServer_webContent+0xbc>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461c      	mov	r4, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f000 f9c3 	bl	8006778 <malloc>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4619      	mov	r1, r3
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <reg_httpServer_webContent+0xc0>)
 80063f8:	4623      	mov	r3, r4
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4423      	add	r3, r4
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <reg_httpServer_webContent+0xbc>)
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <reg_httpServer_webContent+0xc0>)
 800640c:	460b      	mov	r3, r1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	440b      	add	r3, r1
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb79 	bl	8006b12 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8006420:	4b12      	ldr	r3, [pc, #72]	; (800646c <reg_httpServer_webContent+0xbc>)
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <reg_httpServer_webContent+0xc0>)
 8006428:	460b      	mov	r3, r1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	440b      	add	r3, r1
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	3304      	adds	r3, #4
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <reg_httpServer_webContent+0xbc>)
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	4619      	mov	r1, r3
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <reg_httpServer_webContent+0xc0>)
 8006440:	460b      	mov	r3, r1
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	440b      	add	r3, r1
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	3308      	adds	r3, #8
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <reg_httpServer_webContent+0xbc>)
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	4b04      	ldr	r3, [pc, #16]	; (800646c <reg_httpServer_webContent+0xbc>)
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e002      	b.n	8006464 <reg_httpServer_webContent+0xb4>
		return;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <reg_httpServer_webContent+0xb4>
		return;
 8006462:	bf00      	nop
}
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}
 800646a:	bf00      	nop
 800646c:	2000011c 	.word	0x2000011c
 8006470:	200017c0 	.word	0x200017c0

08006474 <display_reg_webContent_list>:

uint8_t display_reg_webContent_list(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t ret;

	if(total_content_cnt == 0)
 800647a:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <display_reg_webContent_list+0xc0>)
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <display_reg_webContent_list+0x1a>
	{
		printf(">> Web content file not found\r\n");
 8006482:	482d      	ldr	r0, [pc, #180]	; (8006538 <display_reg_webContent_list+0xc4>)
 8006484:	f000 faae 	bl	80069e4 <puts>
		ret = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	717b      	strb	r3, [r7, #5]
 800648c:	e04d      	b.n	800652a <display_reg_webContent_list+0xb6>
	}
	else
	{
		printf("\r\n=== List of Web content in code flash ===\r\n");
 800648e:	482b      	ldr	r0, [pc, #172]	; (800653c <display_reg_webContent_list+0xc8>)
 8006490:	f000 faa8 	bl	80069e4 <puts>
		for(i = 0; i < total_content_cnt; i++)
 8006494:	2300      	movs	r3, #0
 8006496:	80fb      	strh	r3, [r7, #6]
 8006498:	e03d      	b.n	8006516 <display_reg_webContent_list+0xa2>
		{
			printf(" [%d] ", i+1);
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	3301      	adds	r3, #1
 800649e:	4619      	mov	r1, r3
 80064a0:	4827      	ldr	r0, [pc, #156]	; (8006540 <display_reg_webContent_list+0xcc>)
 80064a2:	f000 fa2b 	bl	80068fc <iprintf>
			printf("%s, ", web_content[i].content_name);
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	4926      	ldr	r1, [pc, #152]	; (8006544 <display_reg_webContent_list+0xd0>)
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	4823      	ldr	r0, [pc, #140]	; (8006548 <display_reg_webContent_list+0xd4>)
 80064ba:	f000 fa1f 	bl	80068fc <iprintf>
			printf("%ld byte, ", web_content[i].content_len);
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	4920      	ldr	r1, [pc, #128]	; (8006544 <display_reg_webContent_list+0xd0>)
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	3304      	adds	r3, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	481e      	ldr	r0, [pc, #120]	; (800654c <display_reg_webContent_list+0xd8>)
 80064d4:	f000 fa12 	bl	80068fc <iprintf>

			if(web_content[i].content_len < 30) printf("[%s]\r\n", web_content[i].content);
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	491a      	ldr	r1, [pc, #104]	; (8006544 <display_reg_webContent_list+0xd0>)
 80064dc:	4613      	mov	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	3304      	adds	r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b1d      	cmp	r3, #29
 80064ec:	d80d      	bhi.n	800650a <display_reg_webContent_list+0x96>
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	4914      	ldr	r1, [pc, #80]	; (8006544 <display_reg_webContent_list+0xd0>)
 80064f2:	4613      	mov	r3, r2
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3308      	adds	r3, #8
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	4813      	ldr	r0, [pc, #76]	; (8006550 <display_reg_webContent_list+0xdc>)
 8006504:	f000 f9fa 	bl	80068fc <iprintf>
 8006508:	e002      	b.n	8006510 <display_reg_webContent_list+0x9c>
			else printf("[ ... ]\r\n");
 800650a:	4812      	ldr	r0, [pc, #72]	; (8006554 <display_reg_webContent_list+0xe0>)
 800650c:	f000 fa6a 	bl	80069e4 <puts>
		for(i = 0; i < total_content_cnt; i++)
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	3301      	adds	r3, #1
 8006514:	80fb      	strh	r3, [r7, #6]
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <display_reg_webContent_list+0xc0>)
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	429a      	cmp	r2, r3
 800651e:	d3bc      	bcc.n	800649a <display_reg_webContent_list+0x26>
		}
		printf("=========================================\r\n\r\n");
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <display_reg_webContent_list+0xe4>)
 8006522:	f000 fa5f 	bl	80069e4 <puts>
		ret = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	717b      	strb	r3, [r7, #5]
	}

	return ret;
 800652a:	797b      	ldrb	r3, [r7, #5]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	2000011c 	.word	0x2000011c
 8006538:	0800c6f4 	.word	0x0800c6f4
 800653c:	0800c714 	.word	0x0800c714
 8006540:	0800c744 	.word	0x0800c744
 8006544:	200017c0 	.word	0x200017c0
 8006548:	0800c74c 	.word	0x0800c74c
 800654c:	0800c754 	.word	0x0800c754
 8006550:	0800c760 	.word	0x0800c760
 8006554:	0800c768 	.word	0x0800c768
 8006558:	0800c774 	.word	0x0800c774

0800655c <find_userReg_webContent>:

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 8006568:	2300      	movs	r3, #0
 800656a:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	82fb      	strh	r3, [r7, #22]
 8006570:	e022      	b.n	80065b8 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 8006572:	8afa      	ldrh	r2, [r7, #22]
 8006574:	4915      	ldr	r1, [pc, #84]	; (80065cc <find_userReg_webContent+0x70>)
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7f9 fe4d 	bl	8000224 <strcmp>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d110      	bne.n	80065b2 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 8006590:	8afa      	ldrh	r2, [r7, #22]
 8006592:	490e      	ldr	r1, [pc, #56]	; (80065cc <find_userReg_webContent+0x70>)
 8006594:	4613      	mov	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3304      	adds	r3, #4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
			*content_num = i;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	8afa      	ldrh	r2, [r7, #22]
 80065aa:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 80065ac:	2301      	movs	r3, #1
 80065ae:	757b      	strb	r3, [r7, #21]
			break;
 80065b0:	e007      	b.n	80065c2 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 80065b2:	8afb      	ldrh	r3, [r7, #22]
 80065b4:	3301      	adds	r3, #1
 80065b6:	82fb      	strh	r3, [r7, #22]
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <find_userReg_webContent+0x74>)
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	8afa      	ldrh	r2, [r7, #22]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d3d7      	bcc.n	8006572 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 80065c2:	7d7b      	ldrb	r3, [r7, #21]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200017c0 	.word	0x200017c0
 80065d0:	2000011c 	.word	0x2000011c

080065d4 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	461a      	mov	r2, r3
 80065e0:	4603      	mov	r3, r0
 80065e2:	81fb      	strh	r3, [r7, #14]
 80065e4:	4613      	mov	r3, r2
 80065e6:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 80065ec:	4b16      	ldr	r3, [pc, #88]	; (8006648 <read_userReg_webContent+0x74>)
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	89fa      	ldrh	r2, [r7, #14]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d901      	bls.n	80065fa <read_userReg_webContent+0x26>
 80065f6:	2300      	movs	r3, #0
 80065f8:	e021      	b.n	800663e <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 80065fa:	89fa      	ldrh	r2, [r7, #14]
 80065fc:	4913      	ldr	r1, [pc, #76]	; (800664c <read_userReg_webContent+0x78>)
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3308      	adds	r3, #8
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <read_userReg_webContent+0x48>
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 800661c:	89bb      	ldrh	r3, [r7, #12]
 800661e:	461a      	mov	r2, r3
 8006620:	6979      	ldr	r1, [r7, #20]
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f000 fa7d 	bl	8006b22 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 8006628:	89bb      	ldrh	r3, [r7, #12]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 8006632:	68b8      	ldr	r0, [r7, #8]
 8006634:	f7f9 fe00 	bl	8000238 <strlen>
 8006638:	4603      	mov	r3, r0
 800663a:	827b      	strh	r3, [r7, #18]
	return ret;
 800663c:	8a7b      	ldrh	r3, [r7, #18]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2000011c 	.word	0x2000011c
 800664c:	200017c0 	.word	0x200017c0

08006650 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	461a      	mov	r2, r3
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7fa fa23 	bl	8000ab8 <predefined_get_cgi_processor>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8006678:	490a      	ldr	r1, [pc, #40]	; (80066a4 <http_get_cgi_handler+0x54>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7f9 fdd2 	bl	8000224 <strcmp>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <http_get_cgi_handler+0x48>
 8006690:	8abb      	ldrh	r3, [r7, #20]
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
	return ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	0800c7a4 	.word	0x0800c7a4

080066a8 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1c99      	adds	r1, r3, #2
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7fa faa7 	bl	8000c20 <predefined_set_cgi_processor>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d114      	bne.n	8006702 <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 80066d8:	4910      	ldr	r1, [pc, #64]	; (800671c <http_post_cgi_handler+0x74>)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7f9 fda2 	bl	8000224 <strcmp>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 80066ea:	7dbb      	ldrb	r3, [r7, #22]
 80066ec:	461a      	mov	r2, r3
 80066ee:	490c      	ldr	r1, [pc, #48]	; (8006720 <http_post_cgi_handler+0x78>)
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f98f 	bl	8006a14 <siprintf>
 80066f6:	4603      	mov	r3, r0
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	82bb      	strh	r3, [r7, #20]
 80066fc:	e001      	b.n	8006702 <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <http_post_cgi_handler+0x68>
 8006708:	8abb      	ldrh	r3, [r7, #20]
 800670a:	461a      	mov	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	601a      	str	r2, [r3, #0]
	return ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	0800c7a4 	.word	0x0800c7a4
 8006720:	0800c7b0 	.word	0x0800c7b0

08006724 <__errno>:
 8006724:	4b01      	ldr	r3, [pc, #4]	; (800672c <__errno+0x8>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000060 	.word	0x20000060

08006730 <__libc_init_array>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	2500      	movs	r5, #0
 8006734:	4e0c      	ldr	r6, [pc, #48]	; (8006768 <__libc_init_array+0x38>)
 8006736:	4c0d      	ldr	r4, [pc, #52]	; (800676c <__libc_init_array+0x3c>)
 8006738:	1ba4      	subs	r4, r4, r6
 800673a:	10a4      	asrs	r4, r4, #2
 800673c:	42a5      	cmp	r5, r4
 800673e:	d109      	bne.n	8006754 <__libc_init_array+0x24>
 8006740:	f001 f9e8 	bl	8007b14 <_init>
 8006744:	2500      	movs	r5, #0
 8006746:	4e0a      	ldr	r6, [pc, #40]	; (8006770 <__libc_init_array+0x40>)
 8006748:	4c0a      	ldr	r4, [pc, #40]	; (8006774 <__libc_init_array+0x44>)
 800674a:	1ba4      	subs	r4, r4, r6
 800674c:	10a4      	asrs	r4, r4, #2
 800674e:	42a5      	cmp	r5, r4
 8006750:	d105      	bne.n	800675e <__libc_init_array+0x2e>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006758:	4798      	blx	r3
 800675a:	3501      	adds	r5, #1
 800675c:	e7ee      	b.n	800673c <__libc_init_array+0xc>
 800675e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006762:	4798      	blx	r3
 8006764:	3501      	adds	r5, #1
 8006766:	e7f2      	b.n	800674e <__libc_init_array+0x1e>
 8006768:	0800c978 	.word	0x0800c978
 800676c:	0800c978 	.word	0x0800c978
 8006770:	0800c978 	.word	0x0800c978
 8006774:	0800c97c 	.word	0x0800c97c

08006778 <malloc>:
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <malloc+0xc>)
 800677a:	4601      	mov	r1, r0
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	f000 b863 	b.w	8006848 <_malloc_r>
 8006782:	bf00      	nop
 8006784:	20000060 	.word	0x20000060

08006788 <memcpy>:
 8006788:	b510      	push	{r4, lr}
 800678a:	1e43      	subs	r3, r0, #1
 800678c:	440a      	add	r2, r1
 800678e:	4291      	cmp	r1, r2
 8006790:	d100      	bne.n	8006794 <memcpy+0xc>
 8006792:	bd10      	pop	{r4, pc}
 8006794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800679c:	e7f7      	b.n	800678e <memcpy+0x6>

0800679e <memset>:
 800679e:	4603      	mov	r3, r0
 80067a0:	4402      	add	r2, r0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d100      	bne.n	80067a8 <memset+0xa>
 80067a6:	4770      	bx	lr
 80067a8:	f803 1b01 	strb.w	r1, [r3], #1
 80067ac:	e7f9      	b.n	80067a2 <memset+0x4>
	...

080067b0 <_free_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4605      	mov	r5, r0
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d043      	beq.n	8006840 <_free_r+0x90>
 80067b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067bc:	1f0c      	subs	r4, r1, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfb8      	it	lt
 80067c2:	18e4      	addlt	r4, r4, r3
 80067c4:	f000 fd02 	bl	80071cc <__malloc_lock>
 80067c8:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <_free_r+0x94>)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	4610      	mov	r0, r2
 80067ce:	b933      	cbnz	r3, 80067de <_free_r+0x2e>
 80067d0:	6063      	str	r3, [r4, #4]
 80067d2:	6014      	str	r4, [r2, #0]
 80067d4:	4628      	mov	r0, r5
 80067d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067da:	f000 bcf8 	b.w	80071ce <__malloc_unlock>
 80067de:	42a3      	cmp	r3, r4
 80067e0:	d90b      	bls.n	80067fa <_free_r+0x4a>
 80067e2:	6821      	ldr	r1, [r4, #0]
 80067e4:	1862      	adds	r2, r4, r1
 80067e6:	4293      	cmp	r3, r2
 80067e8:	bf01      	itttt	eq
 80067ea:	681a      	ldreq	r2, [r3, #0]
 80067ec:	685b      	ldreq	r3, [r3, #4]
 80067ee:	1852      	addeq	r2, r2, r1
 80067f0:	6022      	streq	r2, [r4, #0]
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	6004      	str	r4, [r0, #0]
 80067f6:	e7ed      	b.n	80067d4 <_free_r+0x24>
 80067f8:	4613      	mov	r3, r2
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	b10a      	cbz	r2, 8006802 <_free_r+0x52>
 80067fe:	42a2      	cmp	r2, r4
 8006800:	d9fa      	bls.n	80067f8 <_free_r+0x48>
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	1858      	adds	r0, r3, r1
 8006806:	42a0      	cmp	r0, r4
 8006808:	d10b      	bne.n	8006822 <_free_r+0x72>
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	4401      	add	r1, r0
 800680e:	1858      	adds	r0, r3, r1
 8006810:	4282      	cmp	r2, r0
 8006812:	6019      	str	r1, [r3, #0]
 8006814:	d1de      	bne.n	80067d4 <_free_r+0x24>
 8006816:	6810      	ldr	r0, [r2, #0]
 8006818:	6852      	ldr	r2, [r2, #4]
 800681a:	4401      	add	r1, r0
 800681c:	6019      	str	r1, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
 8006820:	e7d8      	b.n	80067d4 <_free_r+0x24>
 8006822:	d902      	bls.n	800682a <_free_r+0x7a>
 8006824:	230c      	movs	r3, #12
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	e7d4      	b.n	80067d4 <_free_r+0x24>
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	1821      	adds	r1, r4, r0
 800682e:	428a      	cmp	r2, r1
 8006830:	bf01      	itttt	eq
 8006832:	6811      	ldreq	r1, [r2, #0]
 8006834:	6852      	ldreq	r2, [r2, #4]
 8006836:	1809      	addeq	r1, r1, r0
 8006838:	6021      	streq	r1, [r4, #0]
 800683a:	6062      	str	r2, [r4, #4]
 800683c:	605c      	str	r4, [r3, #4]
 800683e:	e7c9      	b.n	80067d4 <_free_r+0x24>
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	bf00      	nop
 8006844:	200005c4 	.word	0x200005c4

08006848 <_malloc_r>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	1ccd      	adds	r5, r1, #3
 800684c:	f025 0503 	bic.w	r5, r5, #3
 8006850:	3508      	adds	r5, #8
 8006852:	2d0c      	cmp	r5, #12
 8006854:	bf38      	it	cc
 8006856:	250c      	movcc	r5, #12
 8006858:	2d00      	cmp	r5, #0
 800685a:	4606      	mov	r6, r0
 800685c:	db01      	blt.n	8006862 <_malloc_r+0x1a>
 800685e:	42a9      	cmp	r1, r5
 8006860:	d903      	bls.n	800686a <_malloc_r+0x22>
 8006862:	230c      	movs	r3, #12
 8006864:	6033      	str	r3, [r6, #0]
 8006866:	2000      	movs	r0, #0
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	f000 fcaf 	bl	80071cc <__malloc_lock>
 800686e:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <_malloc_r+0xac>)
 8006870:	6814      	ldr	r4, [r2, #0]
 8006872:	4621      	mov	r1, r4
 8006874:	b991      	cbnz	r1, 800689c <_malloc_r+0x54>
 8006876:	4c20      	ldr	r4, [pc, #128]	; (80068f8 <_malloc_r+0xb0>)
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	b91b      	cbnz	r3, 8006884 <_malloc_r+0x3c>
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f8b9 	bl	80069f4 <_sbrk_r>
 8006882:	6020      	str	r0, [r4, #0]
 8006884:	4629      	mov	r1, r5
 8006886:	4630      	mov	r0, r6
 8006888:	f000 f8b4 	bl	80069f4 <_sbrk_r>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d124      	bne.n	80068da <_malloc_r+0x92>
 8006890:	230c      	movs	r3, #12
 8006892:	4630      	mov	r0, r6
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	f000 fc9a 	bl	80071ce <__malloc_unlock>
 800689a:	e7e4      	b.n	8006866 <_malloc_r+0x1e>
 800689c:	680b      	ldr	r3, [r1, #0]
 800689e:	1b5b      	subs	r3, r3, r5
 80068a0:	d418      	bmi.n	80068d4 <_malloc_r+0x8c>
 80068a2:	2b0b      	cmp	r3, #11
 80068a4:	d90f      	bls.n	80068c6 <_malloc_r+0x7e>
 80068a6:	600b      	str	r3, [r1, #0]
 80068a8:	18cc      	adds	r4, r1, r3
 80068aa:	50cd      	str	r5, [r1, r3]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 fc8e 	bl	80071ce <__malloc_unlock>
 80068b2:	f104 000b 	add.w	r0, r4, #11
 80068b6:	1d23      	adds	r3, r4, #4
 80068b8:	f020 0007 	bic.w	r0, r0, #7
 80068bc:	1ac3      	subs	r3, r0, r3
 80068be:	d0d3      	beq.n	8006868 <_malloc_r+0x20>
 80068c0:	425a      	negs	r2, r3
 80068c2:	50e2      	str	r2, [r4, r3]
 80068c4:	e7d0      	b.n	8006868 <_malloc_r+0x20>
 80068c6:	684b      	ldr	r3, [r1, #4]
 80068c8:	428c      	cmp	r4, r1
 80068ca:	bf16      	itet	ne
 80068cc:	6063      	strne	r3, [r4, #4]
 80068ce:	6013      	streq	r3, [r2, #0]
 80068d0:	460c      	movne	r4, r1
 80068d2:	e7eb      	b.n	80068ac <_malloc_r+0x64>
 80068d4:	460c      	mov	r4, r1
 80068d6:	6849      	ldr	r1, [r1, #4]
 80068d8:	e7cc      	b.n	8006874 <_malloc_r+0x2c>
 80068da:	1cc4      	adds	r4, r0, #3
 80068dc:	f024 0403 	bic.w	r4, r4, #3
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d005      	beq.n	80068f0 <_malloc_r+0xa8>
 80068e4:	1a21      	subs	r1, r4, r0
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f884 	bl	80069f4 <_sbrk_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d0cf      	beq.n	8006890 <_malloc_r+0x48>
 80068f0:	6025      	str	r5, [r4, #0]
 80068f2:	e7db      	b.n	80068ac <_malloc_r+0x64>
 80068f4:	200005c4 	.word	0x200005c4
 80068f8:	200005c8 	.word	0x200005c8

080068fc <iprintf>:
 80068fc:	b40f      	push	{r0, r1, r2, r3}
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <iprintf+0x2c>)
 8006900:	b513      	push	{r0, r1, r4, lr}
 8006902:	681c      	ldr	r4, [r3, #0]
 8006904:	b124      	cbz	r4, 8006910 <iprintf+0x14>
 8006906:	69a3      	ldr	r3, [r4, #24]
 8006908:	b913      	cbnz	r3, 8006910 <iprintf+0x14>
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fb5e 	bl	8006fcc <__sinit>
 8006910:	ab05      	add	r3, sp, #20
 8006912:	9a04      	ldr	r2, [sp, #16]
 8006914:	68a1      	ldr	r1, [r4, #8]
 8006916:	4620      	mov	r0, r4
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	f000 fdd3 	bl	80074c4 <_vfiprintf_r>
 800691e:	b002      	add	sp, #8
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	b004      	add	sp, #16
 8006926:	4770      	bx	lr
 8006928:	20000060 	.word	0x20000060

0800692c <_puts_r>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	460e      	mov	r6, r1
 8006930:	4605      	mov	r5, r0
 8006932:	b118      	cbz	r0, 800693c <_puts_r+0x10>
 8006934:	6983      	ldr	r3, [r0, #24]
 8006936:	b90b      	cbnz	r3, 800693c <_puts_r+0x10>
 8006938:	f000 fb48 	bl	8006fcc <__sinit>
 800693c:	69ab      	ldr	r3, [r5, #24]
 800693e:	68ac      	ldr	r4, [r5, #8]
 8006940:	b913      	cbnz	r3, 8006948 <_puts_r+0x1c>
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fb42 	bl	8006fcc <__sinit>
 8006948:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <_puts_r+0xac>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d117      	bne.n	800697e <_puts_r+0x52>
 800694e:	686c      	ldr	r4, [r5, #4]
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	071b      	lsls	r3, r3, #28
 8006954:	d51d      	bpl.n	8006992 <_puts_r+0x66>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	b1db      	cbz	r3, 8006992 <_puts_r+0x66>
 800695a:	3e01      	subs	r6, #1
 800695c:	68a3      	ldr	r3, [r4, #8]
 800695e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006962:	3b01      	subs	r3, #1
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	b9e9      	cbnz	r1, 80069a4 <_puts_r+0x78>
 8006968:	2b00      	cmp	r3, #0
 800696a:	da2e      	bge.n	80069ca <_puts_r+0x9e>
 800696c:	4622      	mov	r2, r4
 800696e:	210a      	movs	r1, #10
 8006970:	4628      	mov	r0, r5
 8006972:	f000 f959 	bl	8006c28 <__swbuf_r>
 8006976:	3001      	adds	r0, #1
 8006978:	d011      	beq.n	800699e <_puts_r+0x72>
 800697a:	200a      	movs	r0, #10
 800697c:	e011      	b.n	80069a2 <_puts_r+0x76>
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <_puts_r+0xb0>)
 8006980:	429c      	cmp	r4, r3
 8006982:	d101      	bne.n	8006988 <_puts_r+0x5c>
 8006984:	68ac      	ldr	r4, [r5, #8]
 8006986:	e7e3      	b.n	8006950 <_puts_r+0x24>
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <_puts_r+0xb4>)
 800698a:	429c      	cmp	r4, r3
 800698c:	bf08      	it	eq
 800698e:	68ec      	ldreq	r4, [r5, #12]
 8006990:	e7de      	b.n	8006950 <_puts_r+0x24>
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f000 f9ab 	bl	8006cf0 <__swsetup_r>
 800699a:	2800      	cmp	r0, #0
 800699c:	d0dd      	beq.n	800695a <_puts_r+0x2e>
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da04      	bge.n	80069b2 <_puts_r+0x86>
 80069a8:	69a2      	ldr	r2, [r4, #24]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	dc06      	bgt.n	80069bc <_puts_r+0x90>
 80069ae:	290a      	cmp	r1, #10
 80069b0:	d004      	beq.n	80069bc <_puts_r+0x90>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	7019      	strb	r1, [r3, #0]
 80069ba:	e7cf      	b.n	800695c <_puts_r+0x30>
 80069bc:	4622      	mov	r2, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 f932 	bl	8006c28 <__swbuf_r>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d1c9      	bne.n	800695c <_puts_r+0x30>
 80069c8:	e7e9      	b.n	800699e <_puts_r+0x72>
 80069ca:	200a      	movs	r0, #10
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	6022      	str	r2, [r4, #0]
 80069d2:	7018      	strb	r0, [r3, #0]
 80069d4:	e7e5      	b.n	80069a2 <_puts_r+0x76>
 80069d6:	bf00      	nop
 80069d8:	0800c904 	.word	0x0800c904
 80069dc:	0800c924 	.word	0x0800c924
 80069e0:	0800c8e4 	.word	0x0800c8e4

080069e4 <puts>:
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <puts+0xc>)
 80069e6:	4601      	mov	r1, r0
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	f7ff bf9f 	b.w	800692c <_puts_r>
 80069ee:	bf00      	nop
 80069f0:	20000060 	.word	0x20000060

080069f4 <_sbrk_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	2300      	movs	r3, #0
 80069f8:	4c05      	ldr	r4, [pc, #20]	; (8006a10 <_sbrk_r+0x1c>)
 80069fa:	4605      	mov	r5, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	f7fa f81e 	bl	8000a40 <_sbrk>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_sbrk_r+0x1a>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_sbrk_r+0x1a>
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	200018b0 	.word	0x200018b0

08006a14 <siprintf>:
 8006a14:	b40e      	push	{r1, r2, r3}
 8006a16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a1a:	b500      	push	{lr}
 8006a1c:	b09c      	sub	sp, #112	; 0x70
 8006a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a20:	9002      	str	r0, [sp, #8]
 8006a22:	9006      	str	r0, [sp, #24]
 8006a24:	9107      	str	r1, [sp, #28]
 8006a26:	9104      	str	r1, [sp, #16]
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <siprintf+0x38>)
 8006a2a:	4909      	ldr	r1, [pc, #36]	; (8006a50 <siprintf+0x3c>)
 8006a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	a902      	add	r1, sp, #8
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	f000 fc24 	bl	8007284 <_svfiprintf_r>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	b01c      	add	sp, #112	; 0x70
 8006a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a48:	b003      	add	sp, #12
 8006a4a:	4770      	bx	lr
 8006a4c:	20000060 	.word	0x20000060
 8006a50:	ffff0208 	.word	0xffff0208

08006a54 <__sread>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	f000 ffd0 	bl	8007a00 <_read_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	bfab      	itete	ge
 8006a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a66:	89a3      	ldrhlt	r3, [r4, #12]
 8006a68:	181b      	addge	r3, r3, r0
 8006a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6e:	bfac      	ite	ge
 8006a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a72:	81a3      	strhlt	r3, [r4, #12]
 8006a74:	bd10      	pop	{r4, pc}

08006a76 <__swrite>:
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	05db      	lsls	r3, r3, #23
 8006a82:	460c      	mov	r4, r1
 8006a84:	4616      	mov	r6, r2
 8006a86:	d505      	bpl.n	8006a94 <__swrite+0x1e>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	f000 fb26 	bl	80070e0 <_lseek_r>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	4632      	mov	r2, r6
 8006a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	f000 b90f 	b.w	8006ccc <_write_r>

08006aae <__sseek>:
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 fb13 	bl	80070e0 <_lseek_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	bf15      	itete	ne
 8006ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strheq	r3, [r4, #12]
 8006acc:	bf18      	it	ne
 8006ace:	81a3      	strhne	r3, [r4, #12]
 8006ad0:	bd10      	pop	{r4, pc}

08006ad2 <__sclose>:
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 b979 	b.w	8006dcc <_close_r>

08006ada <strcat>:
 8006ada:	4603      	mov	r3, r0
 8006adc:	b510      	push	{r4, lr}
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	1c5c      	adds	r4, r3, #1
 8006ae2:	b93a      	cbnz	r2, 8006af4 <strcat+0x1a>
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d1f9      	bne.n	8006ae6 <strcat+0xc>
 8006af2:	bd10      	pop	{r4, pc}
 8006af4:	4623      	mov	r3, r4
 8006af6:	e7f2      	b.n	8006ade <strcat+0x4>

08006af8 <strchr>:
 8006af8:	b2c9      	uxtb	r1, r1
 8006afa:	4603      	mov	r3, r0
 8006afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b00:	b11a      	cbz	r2, 8006b0a <strchr+0x12>
 8006b02:	428a      	cmp	r2, r1
 8006b04:	d1f9      	bne.n	8006afa <strchr+0x2>
 8006b06:	4618      	mov	r0, r3
 8006b08:	4770      	bx	lr
 8006b0a:	2900      	cmp	r1, #0
 8006b0c:	bf18      	it	ne
 8006b0e:	2300      	movne	r3, #0
 8006b10:	e7f9      	b.n	8006b06 <strchr+0xe>

08006b12 <strcpy>:
 8006b12:	4603      	mov	r3, r0
 8006b14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b18:	f803 2b01 	strb.w	r2, [r3], #1
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	d1f9      	bne.n	8006b14 <strcpy+0x2>
 8006b20:	4770      	bx	lr

08006b22 <strncpy>:
 8006b22:	b570      	push	{r4, r5, r6, lr}
 8006b24:	4604      	mov	r4, r0
 8006b26:	3901      	subs	r1, #1
 8006b28:	b902      	cbnz	r2, 8006b2c <strncpy+0xa>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006b32:	1e56      	subs	r6, r2, #1
 8006b34:	f803 5b01 	strb.w	r5, [r3], #1
 8006b38:	b92d      	cbnz	r5, 8006b46 <strncpy+0x24>
 8006b3a:	4414      	add	r4, r2
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d0f4      	beq.n	8006b2a <strncpy+0x8>
 8006b40:	f803 5b01 	strb.w	r5, [r3], #1
 8006b44:	e7fa      	b.n	8006b3c <strncpy+0x1a>
 8006b46:	461c      	mov	r4, r3
 8006b48:	4632      	mov	r2, r6
 8006b4a:	e7ed      	b.n	8006b28 <strncpy+0x6>

08006b4c <strstr>:
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4e:	7803      	ldrb	r3, [r0, #0]
 8006b50:	b17b      	cbz	r3, 8006b72 <strstr+0x26>
 8006b52:	4604      	mov	r4, r0
 8006b54:	7823      	ldrb	r3, [r4, #0]
 8006b56:	4620      	mov	r0, r4
 8006b58:	1c66      	adds	r6, r4, #1
 8006b5a:	b17b      	cbz	r3, 8006b7c <strstr+0x30>
 8006b5c:	1e4a      	subs	r2, r1, #1
 8006b5e:	1e63      	subs	r3, r4, #1
 8006b60:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006b64:	b14d      	cbz	r5, 8006b7a <strstr+0x2e>
 8006b66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006b6a:	4634      	mov	r4, r6
 8006b6c:	42af      	cmp	r7, r5
 8006b6e:	d0f7      	beq.n	8006b60 <strstr+0x14>
 8006b70:	e7f0      	b.n	8006b54 <strstr+0x8>
 8006b72:	780b      	ldrb	r3, [r1, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf18      	it	ne
 8006b78:	2000      	movne	r0, #0
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	e7fc      	b.n	8006b7a <strstr+0x2e>

08006b80 <strtok>:
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <strtok+0x50>)
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	681d      	ldr	r5, [r3, #0]
 8006b88:	4606      	mov	r6, r0
 8006b8a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	b9b4      	cbnz	r4, 8006bbe <strtok+0x3e>
 8006b90:	2050      	movs	r0, #80	; 0x50
 8006b92:	f7ff fdf1 	bl	8006778 <malloc>
 8006b96:	65a8      	str	r0, [r5, #88]	; 0x58
 8006b98:	e9c0 4400 	strd	r4, r4, [r0]
 8006b9c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006ba0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006ba4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006ba8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006bac:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006bb0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006bb4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006bb8:	6184      	str	r4, [r0, #24]
 8006bba:	7704      	strb	r4, [r0, #28]
 8006bbc:	6244      	str	r4, [r0, #36]	; 0x24
 8006bbe:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f000 b803 	b.w	8006bd4 <__strtok_r>
 8006bce:	bf00      	nop
 8006bd0:	20000060 	.word	0x20000060

08006bd4 <__strtok_r>:
 8006bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd6:	b918      	cbnz	r0, 8006be0 <__strtok_r+0xc>
 8006bd8:	6810      	ldr	r0, [r2, #0]
 8006bda:	b908      	cbnz	r0, 8006be0 <__strtok_r+0xc>
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	4620      	mov	r0, r4
 8006be0:	4604      	mov	r4, r0
 8006be2:	460f      	mov	r7, r1
 8006be4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006be8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006bec:	b91e      	cbnz	r6, 8006bf6 <__strtok_r+0x22>
 8006bee:	b96d      	cbnz	r5, 8006c0c <__strtok_r+0x38>
 8006bf0:	6015      	str	r5, [r2, #0]
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	e7f2      	b.n	8006bdc <__strtok_r+0x8>
 8006bf6:	42b5      	cmp	r5, r6
 8006bf8:	d1f6      	bne.n	8006be8 <__strtok_r+0x14>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1ef      	bne.n	8006bde <__strtok_r+0xa>
 8006bfe:	6014      	str	r4, [r2, #0]
 8006c00:	7003      	strb	r3, [r0, #0]
 8006c02:	e7eb      	b.n	8006bdc <__strtok_r+0x8>
 8006c04:	462b      	mov	r3, r5
 8006c06:	e00d      	b.n	8006c24 <__strtok_r+0x50>
 8006c08:	b926      	cbnz	r6, 8006c14 <__strtok_r+0x40>
 8006c0a:	461c      	mov	r4, r3
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	460f      	mov	r7, r1
 8006c10:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006c14:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006c18:	42b5      	cmp	r5, r6
 8006c1a:	d1f5      	bne.n	8006c08 <__strtok_r+0x34>
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	d0f1      	beq.n	8006c04 <__strtok_r+0x30>
 8006c20:	2100      	movs	r1, #0
 8006c22:	7021      	strb	r1, [r4, #0]
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e7d9      	b.n	8006bdc <__strtok_r+0x8>

08006c28 <__swbuf_r>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	460e      	mov	r6, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	4605      	mov	r5, r0
 8006c30:	b118      	cbz	r0, 8006c3a <__swbuf_r+0x12>
 8006c32:	6983      	ldr	r3, [r0, #24]
 8006c34:	b90b      	cbnz	r3, 8006c3a <__swbuf_r+0x12>
 8006c36:	f000 f9c9 	bl	8006fcc <__sinit>
 8006c3a:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <__swbuf_r+0x98>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d12a      	bne.n	8006c96 <__swbuf_r+0x6e>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	69a3      	ldr	r3, [r4, #24]
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	071a      	lsls	r2, r3, #28
 8006c4a:	d52e      	bpl.n	8006caa <__swbuf_r+0x82>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	b363      	cbz	r3, 8006caa <__swbuf_r+0x82>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	6820      	ldr	r0, [r4, #0]
 8006c54:	b2f6      	uxtb	r6, r6
 8006c56:	1ac0      	subs	r0, r0, r3
 8006c58:	6963      	ldr	r3, [r4, #20]
 8006c5a:	4637      	mov	r7, r6
 8006c5c:	4283      	cmp	r3, r0
 8006c5e:	dc04      	bgt.n	8006c6a <__swbuf_r+0x42>
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f948 	bl	8006ef8 <_fflush_r>
 8006c68:	bb28      	cbnz	r0, 8006cb6 <__swbuf_r+0x8e>
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	60a3      	str	r3, [r4, #8]
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	6022      	str	r2, [r4, #0]
 8006c78:	701e      	strb	r6, [r3, #0]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	4283      	cmp	r3, r0
 8006c7e:	d004      	beq.n	8006c8a <__swbuf_r+0x62>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	07db      	lsls	r3, r3, #31
 8006c84:	d519      	bpl.n	8006cba <__swbuf_r+0x92>
 8006c86:	2e0a      	cmp	r6, #10
 8006c88:	d117      	bne.n	8006cba <__swbuf_r+0x92>
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f933 	bl	8006ef8 <_fflush_r>
 8006c92:	b190      	cbz	r0, 8006cba <__swbuf_r+0x92>
 8006c94:	e00f      	b.n	8006cb6 <__swbuf_r+0x8e>
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <__swbuf_r+0x9c>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d101      	bne.n	8006ca0 <__swbuf_r+0x78>
 8006c9c:	68ac      	ldr	r4, [r5, #8]
 8006c9e:	e7d0      	b.n	8006c42 <__swbuf_r+0x1a>
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <__swbuf_r+0xa0>)
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	bf08      	it	eq
 8006ca6:	68ec      	ldreq	r4, [r5, #12]
 8006ca8:	e7cb      	b.n	8006c42 <__swbuf_r+0x1a>
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 f81f 	bl	8006cf0 <__swsetup_r>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0cc      	beq.n	8006c50 <__swbuf_r+0x28>
 8006cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8006cba:	4638      	mov	r0, r7
 8006cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	0800c904 	.word	0x0800c904
 8006cc4:	0800c924 	.word	0x0800c924
 8006cc8:	0800c8e4 	.word	0x0800c8e4

08006ccc <_write_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4c05      	ldr	r4, [pc, #20]	; (8006cec <_write_r+0x20>)
 8006cd8:	6022      	str	r2, [r4, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7f9 fe63 	bl	80009a6 <_write>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_write_r+0x1e>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_write_r+0x1e>
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200018b0 	.word	0x200018b0

08006cf0 <__swsetup_r>:
 8006cf0:	4b32      	ldr	r3, [pc, #200]	; (8006dbc <__swsetup_r+0xcc>)
 8006cf2:	b570      	push	{r4, r5, r6, lr}
 8006cf4:	681d      	ldr	r5, [r3, #0]
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	b125      	cbz	r5, 8006d06 <__swsetup_r+0x16>
 8006cfc:	69ab      	ldr	r3, [r5, #24]
 8006cfe:	b913      	cbnz	r3, 8006d06 <__swsetup_r+0x16>
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f963 	bl	8006fcc <__sinit>
 8006d06:	4b2e      	ldr	r3, [pc, #184]	; (8006dc0 <__swsetup_r+0xd0>)
 8006d08:	429c      	cmp	r4, r3
 8006d0a:	d10f      	bne.n	8006d2c <__swsetup_r+0x3c>
 8006d0c:	686c      	ldr	r4, [r5, #4]
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	0715      	lsls	r5, r2, #28
 8006d16:	d42c      	bmi.n	8006d72 <__swsetup_r+0x82>
 8006d18:	06d0      	lsls	r0, r2, #27
 8006d1a:	d411      	bmi.n	8006d40 <__swsetup_r+0x50>
 8006d1c:	2209      	movs	r2, #9
 8006d1e:	6032      	str	r2, [r6, #0]
 8006d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2a:	e03e      	b.n	8006daa <__swsetup_r+0xba>
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <__swsetup_r+0xd4>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <__swsetup_r+0x46>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7eb      	b.n	8006d0e <__swsetup_r+0x1e>
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <__swsetup_r+0xd8>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	bf08      	it	eq
 8006d3c:	68ec      	ldreq	r4, [r5, #12]
 8006d3e:	e7e6      	b.n	8006d0e <__swsetup_r+0x1e>
 8006d40:	0751      	lsls	r1, r2, #29
 8006d42:	d512      	bpl.n	8006d6a <__swsetup_r+0x7a>
 8006d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d46:	b141      	cbz	r1, 8006d5a <__swsetup_r+0x6a>
 8006d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	d002      	beq.n	8006d56 <__swsetup_r+0x66>
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff fd2d 	bl	80067b0 <_free_r>
 8006d56:	2300      	movs	r3, #0
 8006d58:	6363      	str	r3, [r4, #52]	; 0x34
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	2300      	movs	r3, #0
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f043 0308 	orr.w	r3, r3, #8
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	b94b      	cbnz	r3, 8006d8a <__swsetup_r+0x9a>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d80:	d003      	beq.n	8006d8a <__swsetup_r+0x9a>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f9e1 	bl	800714c <__smakebuf_r>
 8006d8a:	89a2      	ldrh	r2, [r4, #12]
 8006d8c:	f012 0301 	ands.w	r3, r2, #1
 8006d90:	d00c      	beq.n	8006dac <__swsetup_r+0xbc>
 8006d92:	2300      	movs	r3, #0
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	6963      	ldr	r3, [r4, #20]
 8006d98:	425b      	negs	r3, r3
 8006d9a:	61a3      	str	r3, [r4, #24]
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	b953      	cbnz	r3, 8006db6 <__swsetup_r+0xc6>
 8006da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006da8:	d1ba      	bne.n	8006d20 <__swsetup_r+0x30>
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	0792      	lsls	r2, r2, #30
 8006dae:	bf58      	it	pl
 8006db0:	6963      	ldrpl	r3, [r4, #20]
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	e7f2      	b.n	8006d9c <__swsetup_r+0xac>
 8006db6:	2000      	movs	r0, #0
 8006db8:	e7f7      	b.n	8006daa <__swsetup_r+0xba>
 8006dba:	bf00      	nop
 8006dbc:	20000060 	.word	0x20000060
 8006dc0:	0800c904 	.word	0x0800c904
 8006dc4:	0800c924 	.word	0x0800c924
 8006dc8:	0800c8e4 	.word	0x0800c8e4

08006dcc <_close_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4c05      	ldr	r4, [pc, #20]	; (8006de8 <_close_r+0x1c>)
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	f7f9 fe01 	bl	80009de <_close>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_close_r+0x1a>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_close_r+0x1a>
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200018b0 	.word	0x200018b0

08006dec <__sflush_r>:
 8006dec:	898a      	ldrh	r2, [r1, #12]
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	4605      	mov	r5, r0
 8006df4:	0710      	lsls	r0, r2, #28
 8006df6:	460c      	mov	r4, r1
 8006df8:	d458      	bmi.n	8006eac <__sflush_r+0xc0>
 8006dfa:	684b      	ldr	r3, [r1, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dc05      	bgt.n	8006e0c <__sflush_r+0x20>
 8006e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dc02      	bgt.n	8006e0c <__sflush_r+0x20>
 8006e06:	2000      	movs	r0, #0
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d0f9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e18:	682f      	ldr	r7, [r5, #0]
 8006e1a:	6a21      	ldr	r1, [r4, #32]
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	d032      	beq.n	8006e86 <__sflush_r+0x9a>
 8006e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	075a      	lsls	r2, r3, #29
 8006e26:	d505      	bpl.n	8006e34 <__sflush_r+0x48>
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	1ac0      	subs	r0, r0, r3
 8006e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e2e:	b10b      	cbz	r3, 8006e34 <__sflush_r+0x48>
 8006e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e32:	1ac0      	subs	r0, r0, r3
 8006e34:	2300      	movs	r3, #0
 8006e36:	4602      	mov	r2, r0
 8006e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3a:	6a21      	ldr	r1, [r4, #32]
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b0      	blx	r6
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	d106      	bne.n	8006e54 <__sflush_r+0x68>
 8006e46:	6829      	ldr	r1, [r5, #0]
 8006e48:	291d      	cmp	r1, #29
 8006e4a:	d848      	bhi.n	8006ede <__sflush_r+0xf2>
 8006e4c:	4a29      	ldr	r2, [pc, #164]	; (8006ef4 <__sflush_r+0x108>)
 8006e4e:	40ca      	lsrs	r2, r1
 8006e50:	07d6      	lsls	r6, r2, #31
 8006e52:	d544      	bpl.n	8006ede <__sflush_r+0xf2>
 8006e54:	2200      	movs	r2, #0
 8006e56:	6062      	str	r2, [r4, #4]
 8006e58:	6922      	ldr	r2, [r4, #16]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	d504      	bpl.n	8006e6a <__sflush_r+0x7e>
 8006e60:	1c42      	adds	r2, r0, #1
 8006e62:	d101      	bne.n	8006e68 <__sflush_r+0x7c>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b903      	cbnz	r3, 8006e6a <__sflush_r+0x7e>
 8006e68:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6c:	602f      	str	r7, [r5, #0]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d0c9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e76:	4299      	cmp	r1, r3
 8006e78:	d002      	beq.n	8006e80 <__sflush_r+0x94>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7ff fc98 	bl	80067b0 <_free_r>
 8006e80:	2000      	movs	r0, #0
 8006e82:	6360      	str	r0, [r4, #52]	; 0x34
 8006e84:	e7c0      	b.n	8006e08 <__sflush_r+0x1c>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b0      	blx	r6
 8006e8c:	1c41      	adds	r1, r0, #1
 8006e8e:	d1c8      	bne.n	8006e22 <__sflush_r+0x36>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c5      	beq.n	8006e22 <__sflush_r+0x36>
 8006e96:	2b1d      	cmp	r3, #29
 8006e98:	d001      	beq.n	8006e9e <__sflush_r+0xb2>
 8006e9a:	2b16      	cmp	r3, #22
 8006e9c:	d101      	bne.n	8006ea2 <__sflush_r+0xb6>
 8006e9e:	602f      	str	r7, [r5, #0]
 8006ea0:	e7b1      	b.n	8006e06 <__sflush_r+0x1a>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	e7ad      	b.n	8006e08 <__sflush_r+0x1c>
 8006eac:	690f      	ldr	r7, [r1, #16]
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d0a9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006eb2:	0793      	lsls	r3, r2, #30
 8006eb4:	bf18      	it	ne
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	eba6 0807 	sub.w	r8, r6, r7
 8006ec2:	600f      	str	r7, [r1, #0]
 8006ec4:	608b      	str	r3, [r1, #8]
 8006ec6:	f1b8 0f00 	cmp.w	r8, #0
 8006eca:	dd9c      	ble.n	8006e06 <__sflush_r+0x1a>
 8006ecc:	4643      	mov	r3, r8
 8006ece:	463a      	mov	r2, r7
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed6:	47b0      	blx	r6
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dc06      	bgt.n	8006eea <__sflush_r+0xfe>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	e78e      	b.n	8006e08 <__sflush_r+0x1c>
 8006eea:	4407      	add	r7, r0
 8006eec:	eba8 0800 	sub.w	r8, r8, r0
 8006ef0:	e7e9      	b.n	8006ec6 <__sflush_r+0xda>
 8006ef2:	bf00      	nop
 8006ef4:	20400001 	.word	0x20400001

08006ef8 <_fflush_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	4605      	mov	r5, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	b1db      	cbz	r3, 8006f3a <_fflush_r+0x42>
 8006f02:	b118      	cbz	r0, 8006f0c <_fflush_r+0x14>
 8006f04:	6983      	ldr	r3, [r0, #24]
 8006f06:	b90b      	cbnz	r3, 8006f0c <_fflush_r+0x14>
 8006f08:	f000 f860 	bl	8006fcc <__sinit>
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <_fflush_r+0x48>)
 8006f0e:	429c      	cmp	r4, r3
 8006f10:	d109      	bne.n	8006f26 <_fflush_r+0x2e>
 8006f12:	686c      	ldr	r4, [r5, #4]
 8006f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f18:	b17b      	cbz	r3, 8006f3a <_fflush_r+0x42>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f22:	f7ff bf63 	b.w	8006dec <__sflush_r>
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <_fflush_r+0x4c>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	d101      	bne.n	8006f30 <_fflush_r+0x38>
 8006f2c:	68ac      	ldr	r4, [r5, #8]
 8006f2e:	e7f1      	b.n	8006f14 <_fflush_r+0x1c>
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <_fflush_r+0x50>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	bf08      	it	eq
 8006f36:	68ec      	ldreq	r4, [r5, #12]
 8006f38:	e7ec      	b.n	8006f14 <_fflush_r+0x1c>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	bf00      	nop
 8006f40:	0800c904 	.word	0x0800c904
 8006f44:	0800c924 	.word	0x0800c924
 8006f48:	0800c8e4 	.word	0x0800c8e4

08006f4c <std>:
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	4604      	mov	r4, r0
 8006f52:	e9c0 3300 	strd	r3, r3, [r0]
 8006f56:	6083      	str	r3, [r0, #8]
 8006f58:	8181      	strh	r1, [r0, #12]
 8006f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f5c:	81c2      	strh	r2, [r0, #14]
 8006f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f62:	6183      	str	r3, [r0, #24]
 8006f64:	4619      	mov	r1, r3
 8006f66:	2208      	movs	r2, #8
 8006f68:	305c      	adds	r0, #92	; 0x5c
 8006f6a:	f7ff fc18 	bl	800679e <memset>
 8006f6e:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <std+0x38>)
 8006f70:	6224      	str	r4, [r4, #32]
 8006f72:	6263      	str	r3, [r4, #36]	; 0x24
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <std+0x3c>)
 8006f76:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <std+0x40>)
 8006f7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <std+0x44>)
 8006f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	08006a55 	.word	0x08006a55
 8006f88:	08006a77 	.word	0x08006a77
 8006f8c:	08006aaf 	.word	0x08006aaf
 8006f90:	08006ad3 	.word	0x08006ad3

08006f94 <_cleanup_r>:
 8006f94:	4901      	ldr	r1, [pc, #4]	; (8006f9c <_cleanup_r+0x8>)
 8006f96:	f000 b885 	b.w	80070a4 <_fwalk_reent>
 8006f9a:	bf00      	nop
 8006f9c:	08006ef9 	.word	0x08006ef9

08006fa0 <__sfmoreglue>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	2568      	movs	r5, #104	; 0x68
 8006fa4:	1e4a      	subs	r2, r1, #1
 8006fa6:	4355      	muls	r5, r2
 8006fa8:	460e      	mov	r6, r1
 8006faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fae:	f7ff fc4b 	bl	8006848 <_malloc_r>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	b140      	cbz	r0, 8006fc8 <__sfmoreglue+0x28>
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fbc:	300c      	adds	r0, #12
 8006fbe:	60a0      	str	r0, [r4, #8]
 8006fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fc4:	f7ff fbeb 	bl	800679e <memset>
 8006fc8:	4620      	mov	r0, r4
 8006fca:	bd70      	pop	{r4, r5, r6, pc}

08006fcc <__sinit>:
 8006fcc:	6983      	ldr	r3, [r0, #24]
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	bb33      	cbnz	r3, 8007022 <__sinit+0x56>
 8006fd4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006fd8:	6503      	str	r3, [r0, #80]	; 0x50
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <__sinit+0x58>)
 8006fdc:	4a12      	ldr	r2, [pc, #72]	; (8007028 <__sinit+0x5c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6282      	str	r2, [r0, #40]	; 0x28
 8006fe2:	4298      	cmp	r0, r3
 8006fe4:	bf04      	itt	eq
 8006fe6:	2301      	moveq	r3, #1
 8006fe8:	6183      	streq	r3, [r0, #24]
 8006fea:	f000 f81f 	bl	800702c <__sfp>
 8006fee:	6060      	str	r0, [r4, #4]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 f81b 	bl	800702c <__sfp>
 8006ff6:	60a0      	str	r0, [r4, #8]
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f817 	bl	800702c <__sfp>
 8006ffe:	2200      	movs	r2, #0
 8007000:	60e0      	str	r0, [r4, #12]
 8007002:	2104      	movs	r1, #4
 8007004:	6860      	ldr	r0, [r4, #4]
 8007006:	f7ff ffa1 	bl	8006f4c <std>
 800700a:	2201      	movs	r2, #1
 800700c:	2109      	movs	r1, #9
 800700e:	68a0      	ldr	r0, [r4, #8]
 8007010:	f7ff ff9c 	bl	8006f4c <std>
 8007014:	2202      	movs	r2, #2
 8007016:	2112      	movs	r1, #18
 8007018:	68e0      	ldr	r0, [r4, #12]
 800701a:	f7ff ff97 	bl	8006f4c <std>
 800701e:	2301      	movs	r3, #1
 8007020:	61a3      	str	r3, [r4, #24]
 8007022:	bd10      	pop	{r4, pc}
 8007024:	0800c8e0 	.word	0x0800c8e0
 8007028:	08006f95 	.word	0x08006f95

0800702c <__sfp>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	4b1b      	ldr	r3, [pc, #108]	; (800709c <__sfp+0x70>)
 8007030:	4607      	mov	r7, r0
 8007032:	681e      	ldr	r6, [r3, #0]
 8007034:	69b3      	ldr	r3, [r6, #24]
 8007036:	b913      	cbnz	r3, 800703e <__sfp+0x12>
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ffc7 	bl	8006fcc <__sinit>
 800703e:	3648      	adds	r6, #72	; 0x48
 8007040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007044:	3b01      	subs	r3, #1
 8007046:	d503      	bpl.n	8007050 <__sfp+0x24>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	b133      	cbz	r3, 800705a <__sfp+0x2e>
 800704c:	6836      	ldr	r6, [r6, #0]
 800704e:	e7f7      	b.n	8007040 <__sfp+0x14>
 8007050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007054:	b16d      	cbz	r5, 8007072 <__sfp+0x46>
 8007056:	3468      	adds	r4, #104	; 0x68
 8007058:	e7f4      	b.n	8007044 <__sfp+0x18>
 800705a:	2104      	movs	r1, #4
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ff9f 	bl	8006fa0 <__sfmoreglue>
 8007062:	6030      	str	r0, [r6, #0]
 8007064:	2800      	cmp	r0, #0
 8007066:	d1f1      	bne.n	800704c <__sfp+0x20>
 8007068:	230c      	movs	r3, #12
 800706a:	4604      	mov	r4, r0
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007072:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <__sfp+0x74>)
 8007074:	6665      	str	r5, [r4, #100]	; 0x64
 8007076:	e9c4 5500 	strd	r5, r5, [r4]
 800707a:	60a5      	str	r5, [r4, #8]
 800707c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007080:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007084:	2208      	movs	r2, #8
 8007086:	4629      	mov	r1, r5
 8007088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800708c:	f7ff fb87 	bl	800679e <memset>
 8007090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007098:	e7e9      	b.n	800706e <__sfp+0x42>
 800709a:	bf00      	nop
 800709c:	0800c8e0 	.word	0x0800c8e0
 80070a0:	ffff0001 	.word	0xffff0001

080070a4 <_fwalk_reent>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4680      	mov	r8, r0
 80070aa:	4689      	mov	r9, r1
 80070ac:	2600      	movs	r6, #0
 80070ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070b2:	b914      	cbnz	r4, 80070ba <_fwalk_reent+0x16>
 80070b4:	4630      	mov	r0, r6
 80070b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80070be:	3f01      	subs	r7, #1
 80070c0:	d501      	bpl.n	80070c6 <_fwalk_reent+0x22>
 80070c2:	6824      	ldr	r4, [r4, #0]
 80070c4:	e7f5      	b.n	80070b2 <_fwalk_reent+0xe>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d907      	bls.n	80070dc <_fwalk_reent+0x38>
 80070cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d0:	3301      	adds	r3, #1
 80070d2:	d003      	beq.n	80070dc <_fwalk_reent+0x38>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4640      	mov	r0, r8
 80070d8:	47c8      	blx	r9
 80070da:	4306      	orrs	r6, r0
 80070dc:	3568      	adds	r5, #104	; 0x68
 80070de:	e7ee      	b.n	80070be <_fwalk_reent+0x1a>

080070e0 <_lseek_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4605      	mov	r5, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	4c05      	ldr	r4, [pc, #20]	; (8007100 <_lseek_r+0x20>)
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7f9 fc99 	bl	8000a26 <_lseek>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_lseek_r+0x1e>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_lseek_r+0x1e>
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	200018b0 	.word	0x200018b0

08007104 <__swhatbuf_r>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	460e      	mov	r6, r1
 8007108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710c:	b096      	sub	sp, #88	; 0x58
 800710e:	2900      	cmp	r1, #0
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	da07      	bge.n	8007126 <__swhatbuf_r+0x22>
 8007116:	2300      	movs	r3, #0
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	89b3      	ldrh	r3, [r6, #12]
 800711c:	061a      	lsls	r2, r3, #24
 800711e:	d410      	bmi.n	8007142 <__swhatbuf_r+0x3e>
 8007120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007124:	e00e      	b.n	8007144 <__swhatbuf_r+0x40>
 8007126:	466a      	mov	r2, sp
 8007128:	f000 fc7c 	bl	8007a24 <_fstat_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	dbf2      	blt.n	8007116 <__swhatbuf_r+0x12>
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007136:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800713a:	425a      	negs	r2, r3
 800713c:	415a      	adcs	r2, r3
 800713e:	602a      	str	r2, [r5, #0]
 8007140:	e7ee      	b.n	8007120 <__swhatbuf_r+0x1c>
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	2000      	movs	r0, #0
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	b016      	add	sp, #88	; 0x58
 800714a:	bd70      	pop	{r4, r5, r6, pc}

0800714c <__smakebuf_r>:
 800714c:	898b      	ldrh	r3, [r1, #12]
 800714e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007150:	079d      	lsls	r5, r3, #30
 8007152:	4606      	mov	r6, r0
 8007154:	460c      	mov	r4, r1
 8007156:	d507      	bpl.n	8007168 <__smakebuf_r+0x1c>
 8007158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	2301      	movs	r3, #1
 8007162:	6163      	str	r3, [r4, #20]
 8007164:	b002      	add	sp, #8
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	ab01      	add	r3, sp, #4
 800716a:	466a      	mov	r2, sp
 800716c:	f7ff ffca 	bl	8007104 <__swhatbuf_r>
 8007170:	9900      	ldr	r1, [sp, #0]
 8007172:	4605      	mov	r5, r0
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff fb67 	bl	8006848 <_malloc_r>
 800717a:	b948      	cbnz	r0, 8007190 <__smakebuf_r+0x44>
 800717c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007180:	059a      	lsls	r2, r3, #22
 8007182:	d4ef      	bmi.n	8007164 <__smakebuf_r+0x18>
 8007184:	f023 0303 	bic.w	r3, r3, #3
 8007188:	f043 0302 	orr.w	r3, r3, #2
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	e7e3      	b.n	8007158 <__smakebuf_r+0xc>
 8007190:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <__smakebuf_r+0x7c>)
 8007192:	62b3      	str	r3, [r6, #40]	; 0x28
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	6020      	str	r0, [r4, #0]
 8007198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	6120      	str	r0, [r4, #16]
 80071a2:	6163      	str	r3, [r4, #20]
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	b15b      	cbz	r3, 80071c0 <__smakebuf_r+0x74>
 80071a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 fc4b 	bl	8007a48 <_isatty_r>
 80071b2:	b128      	cbz	r0, 80071c0 <__smakebuf_r+0x74>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	431d      	orrs	r5, r3
 80071c4:	81a5      	strh	r5, [r4, #12]
 80071c6:	e7cd      	b.n	8007164 <__smakebuf_r+0x18>
 80071c8:	08006f95 	.word	0x08006f95

080071cc <__malloc_lock>:
 80071cc:	4770      	bx	lr

080071ce <__malloc_unlock>:
 80071ce:	4770      	bx	lr

080071d0 <__ssputs_r>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	688e      	ldr	r6, [r1, #8]
 80071d6:	4682      	mov	sl, r0
 80071d8:	429e      	cmp	r6, r3
 80071da:	460c      	mov	r4, r1
 80071dc:	4690      	mov	r8, r2
 80071de:	4699      	mov	r9, r3
 80071e0:	d837      	bhi.n	8007252 <__ssputs_r+0x82>
 80071e2:	898a      	ldrh	r2, [r1, #12]
 80071e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071e8:	d031      	beq.n	800724e <__ssputs_r+0x7e>
 80071ea:	2302      	movs	r3, #2
 80071ec:	6825      	ldr	r5, [r4, #0]
 80071ee:	6909      	ldr	r1, [r1, #16]
 80071f0:	1a6f      	subs	r7, r5, r1
 80071f2:	6965      	ldr	r5, [r4, #20]
 80071f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80071fc:	f109 0301 	add.w	r3, r9, #1
 8007200:	443b      	add	r3, r7
 8007202:	429d      	cmp	r5, r3
 8007204:	bf38      	it	cc
 8007206:	461d      	movcc	r5, r3
 8007208:	0553      	lsls	r3, r2, #21
 800720a:	d530      	bpl.n	800726e <__ssputs_r+0x9e>
 800720c:	4629      	mov	r1, r5
 800720e:	f7ff fb1b 	bl	8006848 <_malloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	b950      	cbnz	r0, 800722c <__ssputs_r+0x5c>
 8007216:	230c      	movs	r3, #12
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	f8ca 3000 	str.w	r3, [sl]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722c:	463a      	mov	r2, r7
 800722e:	6921      	ldr	r1, [r4, #16]
 8007230:	f7ff faaa 	bl	8006788 <memcpy>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	6126      	str	r6, [r4, #16]
 8007242:	443e      	add	r6, r7
 8007244:	6026      	str	r6, [r4, #0]
 8007246:	464e      	mov	r6, r9
 8007248:	6165      	str	r5, [r4, #20]
 800724a:	1bed      	subs	r5, r5, r7
 800724c:	60a5      	str	r5, [r4, #8]
 800724e:	454e      	cmp	r6, r9
 8007250:	d900      	bls.n	8007254 <__ssputs_r+0x84>
 8007252:	464e      	mov	r6, r9
 8007254:	4632      	mov	r2, r6
 8007256:	4641      	mov	r1, r8
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	f000 fc13 	bl	8007a84 <memmove>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	2000      	movs	r0, #0
 8007262:	1b9b      	subs	r3, r3, r6
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	441e      	add	r6, r3
 800726a:	6026      	str	r6, [r4, #0]
 800726c:	e7dc      	b.n	8007228 <__ssputs_r+0x58>
 800726e:	462a      	mov	r2, r5
 8007270:	f000 fc21 	bl	8007ab6 <_realloc_r>
 8007274:	4606      	mov	r6, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d1e2      	bne.n	8007240 <__ssputs_r+0x70>
 800727a:	6921      	ldr	r1, [r4, #16]
 800727c:	4650      	mov	r0, sl
 800727e:	f7ff fa97 	bl	80067b0 <_free_r>
 8007282:	e7c8      	b.n	8007216 <__ssputs_r+0x46>

08007284 <_svfiprintf_r>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	461d      	mov	r5, r3
 800728a:	898b      	ldrh	r3, [r1, #12]
 800728c:	b09d      	sub	sp, #116	; 0x74
 800728e:	061f      	lsls	r7, r3, #24
 8007290:	4680      	mov	r8, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d50f      	bpl.n	80072b8 <_svfiprintf_r+0x34>
 8007298:	690b      	ldr	r3, [r1, #16]
 800729a:	b96b      	cbnz	r3, 80072b8 <_svfiprintf_r+0x34>
 800729c:	2140      	movs	r1, #64	; 0x40
 800729e:	f7ff fad3 	bl	8006848 <_malloc_r>
 80072a2:	6020      	str	r0, [r4, #0]
 80072a4:	6120      	str	r0, [r4, #16]
 80072a6:	b928      	cbnz	r0, 80072b4 <_svfiprintf_r+0x30>
 80072a8:	230c      	movs	r3, #12
 80072aa:	f8c8 3000 	str.w	r3, [r8]
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	e0c8      	b.n	8007446 <_svfiprintf_r+0x1c2>
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	2300      	movs	r3, #0
 80072ba:	9309      	str	r3, [sp, #36]	; 0x24
 80072bc:	2320      	movs	r3, #32
 80072be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072c2:	2330      	movs	r3, #48	; 0x30
 80072c4:	f04f 0b01 	mov.w	fp, #1
 80072c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072cc:	9503      	str	r5, [sp, #12]
 80072ce:	4637      	mov	r7, r6
 80072d0:	463d      	mov	r5, r7
 80072d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072d6:	b10b      	cbz	r3, 80072dc <_svfiprintf_r+0x58>
 80072d8:	2b25      	cmp	r3, #37	; 0x25
 80072da:	d13e      	bne.n	800735a <_svfiprintf_r+0xd6>
 80072dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80072e0:	d00b      	beq.n	80072fa <_svfiprintf_r+0x76>
 80072e2:	4653      	mov	r3, sl
 80072e4:	4632      	mov	r2, r6
 80072e6:	4621      	mov	r1, r4
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7ff ff71 	bl	80071d0 <__ssputs_r>
 80072ee:	3001      	adds	r0, #1
 80072f0:	f000 80a4 	beq.w	800743c <_svfiprintf_r+0x1b8>
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	4453      	add	r3, sl
 80072f8:	9309      	str	r3, [sp, #36]	; 0x24
 80072fa:	783b      	ldrb	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 809d 	beq.w	800743c <_svfiprintf_r+0x1b8>
 8007302:	2300      	movs	r3, #0
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007314:	931a      	str	r3, [sp, #104]	; 0x68
 8007316:	462f      	mov	r7, r5
 8007318:	2205      	movs	r2, #5
 800731a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800731e:	4850      	ldr	r0, [pc, #320]	; (8007460 <_svfiprintf_r+0x1dc>)
 8007320:	f000 fba2 	bl	8007a68 <memchr>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	b9d0      	cbnz	r0, 800735e <_svfiprintf_r+0xda>
 8007328:	06d9      	lsls	r1, r3, #27
 800732a:	bf44      	itt	mi
 800732c:	2220      	movmi	r2, #32
 800732e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007332:	071a      	lsls	r2, r3, #28
 8007334:	bf44      	itt	mi
 8007336:	222b      	movmi	r2, #43	; 0x2b
 8007338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800733c:	782a      	ldrb	r2, [r5, #0]
 800733e:	2a2a      	cmp	r2, #42	; 0x2a
 8007340:	d015      	beq.n	800736e <_svfiprintf_r+0xea>
 8007342:	462f      	mov	r7, r5
 8007344:	2000      	movs	r0, #0
 8007346:	250a      	movs	r5, #10
 8007348:	9a07      	ldr	r2, [sp, #28]
 800734a:	4639      	mov	r1, r7
 800734c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007350:	3b30      	subs	r3, #48	; 0x30
 8007352:	2b09      	cmp	r3, #9
 8007354:	d94d      	bls.n	80073f2 <_svfiprintf_r+0x16e>
 8007356:	b1b8      	cbz	r0, 8007388 <_svfiprintf_r+0x104>
 8007358:	e00f      	b.n	800737a <_svfiprintf_r+0xf6>
 800735a:	462f      	mov	r7, r5
 800735c:	e7b8      	b.n	80072d0 <_svfiprintf_r+0x4c>
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <_svfiprintf_r+0x1dc>)
 8007360:	463d      	mov	r5, r7
 8007362:	1a80      	subs	r0, r0, r2
 8007364:	fa0b f000 	lsl.w	r0, fp, r0
 8007368:	4318      	orrs	r0, r3
 800736a:	9004      	str	r0, [sp, #16]
 800736c:	e7d3      	b.n	8007316 <_svfiprintf_r+0x92>
 800736e:	9a03      	ldr	r2, [sp, #12]
 8007370:	1d11      	adds	r1, r2, #4
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	9103      	str	r1, [sp, #12]
 8007376:	2a00      	cmp	r2, #0
 8007378:	db01      	blt.n	800737e <_svfiprintf_r+0xfa>
 800737a:	9207      	str	r2, [sp, #28]
 800737c:	e004      	b.n	8007388 <_svfiprintf_r+0x104>
 800737e:	4252      	negs	r2, r2
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	9207      	str	r2, [sp, #28]
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	783b      	ldrb	r3, [r7, #0]
 800738a:	2b2e      	cmp	r3, #46	; 0x2e
 800738c:	d10c      	bne.n	80073a8 <_svfiprintf_r+0x124>
 800738e:	787b      	ldrb	r3, [r7, #1]
 8007390:	2b2a      	cmp	r3, #42	; 0x2a
 8007392:	d133      	bne.n	80073fc <_svfiprintf_r+0x178>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	3702      	adds	r7, #2
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9203      	str	r2, [sp, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	4d2e      	ldr	r5, [pc, #184]	; (8007464 <_svfiprintf_r+0x1e0>)
 80073aa:	2203      	movs	r2, #3
 80073ac:	7839      	ldrb	r1, [r7, #0]
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 fb5a 	bl	8007a68 <memchr>
 80073b4:	b138      	cbz	r0, 80073c6 <_svfiprintf_r+0x142>
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	1b40      	subs	r0, r0, r5
 80073ba:	fa03 f000 	lsl.w	r0, r3, r0
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	3701      	adds	r7, #1
 80073c2:	4303      	orrs	r3, r0
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	7839      	ldrb	r1, [r7, #0]
 80073c8:	2206      	movs	r2, #6
 80073ca:	4827      	ldr	r0, [pc, #156]	; (8007468 <_svfiprintf_r+0x1e4>)
 80073cc:	1c7e      	adds	r6, r7, #1
 80073ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d2:	f000 fb49 	bl	8007a68 <memchr>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d038      	beq.n	800744c <_svfiprintf_r+0x1c8>
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <_svfiprintf_r+0x1e8>)
 80073dc:	bb13      	cbnz	r3, 8007424 <_svfiprintf_r+0x1a0>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3307      	adds	r3, #7
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	3308      	adds	r3, #8
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ec:	444b      	add	r3, r9
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	e76d      	b.n	80072ce <_svfiprintf_r+0x4a>
 80073f2:	fb05 3202 	mla	r2, r5, r2, r3
 80073f6:	2001      	movs	r0, #1
 80073f8:	460f      	mov	r7, r1
 80073fa:	e7a6      	b.n	800734a <_svfiprintf_r+0xc6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	250a      	movs	r5, #10
 8007400:	4619      	mov	r1, r3
 8007402:	3701      	adds	r7, #1
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	4638      	mov	r0, r7
 8007408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800740c:	3a30      	subs	r2, #48	; 0x30
 800740e:	2a09      	cmp	r2, #9
 8007410:	d903      	bls.n	800741a <_svfiprintf_r+0x196>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0c8      	beq.n	80073a8 <_svfiprintf_r+0x124>
 8007416:	9105      	str	r1, [sp, #20]
 8007418:	e7c6      	b.n	80073a8 <_svfiprintf_r+0x124>
 800741a:	fb05 2101 	mla	r1, r5, r1, r2
 800741e:	2301      	movs	r3, #1
 8007420:	4607      	mov	r7, r0
 8007422:	e7f0      	b.n	8007406 <_svfiprintf_r+0x182>
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4622      	mov	r2, r4
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <_svfiprintf_r+0x1ec>)
 800742c:	a904      	add	r1, sp, #16
 800742e:	4640      	mov	r0, r8
 8007430:	f3af 8000 	nop.w
 8007434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007438:	4681      	mov	r9, r0
 800743a:	d1d6      	bne.n	80073ea <_svfiprintf_r+0x166>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	065b      	lsls	r3, r3, #25
 8007440:	f53f af35 	bmi.w	80072ae <_svfiprintf_r+0x2a>
 8007444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007446:	b01d      	add	sp, #116	; 0x74
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4622      	mov	r2, r4
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <_svfiprintf_r+0x1ec>)
 8007454:	a904      	add	r1, sp, #16
 8007456:	4640      	mov	r0, r8
 8007458:	f000 f9c0 	bl	80077dc <_printf_i>
 800745c:	e7ea      	b.n	8007434 <_svfiprintf_r+0x1b0>
 800745e:	bf00      	nop
 8007460:	0800c944 	.word	0x0800c944
 8007464:	0800c94a 	.word	0x0800c94a
 8007468:	0800c94e 	.word	0x0800c94e
 800746c:	00000000 	.word	0x00000000
 8007470:	080071d1 	.word	0x080071d1

08007474 <__sfputc_r>:
 8007474:	6893      	ldr	r3, [r2, #8]
 8007476:	b410      	push	{r4}
 8007478:	3b01      	subs	r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	6093      	str	r3, [r2, #8]
 800747e:	da07      	bge.n	8007490 <__sfputc_r+0x1c>
 8007480:	6994      	ldr	r4, [r2, #24]
 8007482:	42a3      	cmp	r3, r4
 8007484:	db01      	blt.n	800748a <__sfputc_r+0x16>
 8007486:	290a      	cmp	r1, #10
 8007488:	d102      	bne.n	8007490 <__sfputc_r+0x1c>
 800748a:	bc10      	pop	{r4}
 800748c:	f7ff bbcc 	b.w	8006c28 <__swbuf_r>
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	1c58      	adds	r0, r3, #1
 8007494:	6010      	str	r0, [r2, #0]
 8007496:	7019      	strb	r1, [r3, #0]
 8007498:	4608      	mov	r0, r1
 800749a:	bc10      	pop	{r4}
 800749c:	4770      	bx	lr

0800749e <__sfputs_r>:
 800749e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a0:	4606      	mov	r6, r0
 80074a2:	460f      	mov	r7, r1
 80074a4:	4614      	mov	r4, r2
 80074a6:	18d5      	adds	r5, r2, r3
 80074a8:	42ac      	cmp	r4, r5
 80074aa:	d101      	bne.n	80074b0 <__sfputs_r+0x12>
 80074ac:	2000      	movs	r0, #0
 80074ae:	e007      	b.n	80074c0 <__sfputs_r+0x22>
 80074b0:	463a      	mov	r2, r7
 80074b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ffdc 	bl	8007474 <__sfputc_r>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d1f3      	bne.n	80074a8 <__sfputs_r+0xa>
 80074c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074c4 <_vfiprintf_r>:
 80074c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	b09d      	sub	sp, #116	; 0x74
 80074cc:	4617      	mov	r7, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	4606      	mov	r6, r0
 80074d2:	b118      	cbz	r0, 80074dc <_vfiprintf_r+0x18>
 80074d4:	6983      	ldr	r3, [r0, #24]
 80074d6:	b90b      	cbnz	r3, 80074dc <_vfiprintf_r+0x18>
 80074d8:	f7ff fd78 	bl	8006fcc <__sinit>
 80074dc:	4b7c      	ldr	r3, [pc, #496]	; (80076d0 <_vfiprintf_r+0x20c>)
 80074de:	429c      	cmp	r4, r3
 80074e0:	d158      	bne.n	8007594 <_vfiprintf_r+0xd0>
 80074e2:	6874      	ldr	r4, [r6, #4]
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	0718      	lsls	r0, r3, #28
 80074e8:	d55e      	bpl.n	80075a8 <_vfiprintf_r+0xe4>
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05b      	beq.n	80075a8 <_vfiprintf_r+0xe4>
 80074f0:	2300      	movs	r3, #0
 80074f2:	9309      	str	r3, [sp, #36]	; 0x24
 80074f4:	2320      	movs	r3, #32
 80074f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074fa:	2330      	movs	r3, #48	; 0x30
 80074fc:	f04f 0b01 	mov.w	fp, #1
 8007500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007504:	9503      	str	r5, [sp, #12]
 8007506:	46b8      	mov	r8, r7
 8007508:	4645      	mov	r5, r8
 800750a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800750e:	b10b      	cbz	r3, 8007514 <_vfiprintf_r+0x50>
 8007510:	2b25      	cmp	r3, #37	; 0x25
 8007512:	d154      	bne.n	80075be <_vfiprintf_r+0xfa>
 8007514:	ebb8 0a07 	subs.w	sl, r8, r7
 8007518:	d00b      	beq.n	8007532 <_vfiprintf_r+0x6e>
 800751a:	4653      	mov	r3, sl
 800751c:	463a      	mov	r2, r7
 800751e:	4621      	mov	r1, r4
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff ffbc 	bl	800749e <__sfputs_r>
 8007526:	3001      	adds	r0, #1
 8007528:	f000 80c2 	beq.w	80076b0 <_vfiprintf_r+0x1ec>
 800752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752e:	4453      	add	r3, sl
 8007530:	9309      	str	r3, [sp, #36]	; 0x24
 8007532:	f898 3000 	ldrb.w	r3, [r8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80ba 	beq.w	80076b0 <_vfiprintf_r+0x1ec>
 800753c:	2300      	movs	r3, #0
 800753e:	f04f 32ff 	mov.w	r2, #4294967295
 8007542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800754e:	931a      	str	r3, [sp, #104]	; 0x68
 8007550:	46a8      	mov	r8, r5
 8007552:	2205      	movs	r2, #5
 8007554:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007558:	485e      	ldr	r0, [pc, #376]	; (80076d4 <_vfiprintf_r+0x210>)
 800755a:	f000 fa85 	bl	8007a68 <memchr>
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	bb78      	cbnz	r0, 80075c2 <_vfiprintf_r+0xfe>
 8007562:	06d9      	lsls	r1, r3, #27
 8007564:	bf44      	itt	mi
 8007566:	2220      	movmi	r2, #32
 8007568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800756c:	071a      	lsls	r2, r3, #28
 800756e:	bf44      	itt	mi
 8007570:	222b      	movmi	r2, #43	; 0x2b
 8007572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007576:	782a      	ldrb	r2, [r5, #0]
 8007578:	2a2a      	cmp	r2, #42	; 0x2a
 800757a:	d02a      	beq.n	80075d2 <_vfiprintf_r+0x10e>
 800757c:	46a8      	mov	r8, r5
 800757e:	2000      	movs	r0, #0
 8007580:	250a      	movs	r5, #10
 8007582:	9a07      	ldr	r2, [sp, #28]
 8007584:	4641      	mov	r1, r8
 8007586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758a:	3b30      	subs	r3, #48	; 0x30
 800758c:	2b09      	cmp	r3, #9
 800758e:	d969      	bls.n	8007664 <_vfiprintf_r+0x1a0>
 8007590:	b360      	cbz	r0, 80075ec <_vfiprintf_r+0x128>
 8007592:	e024      	b.n	80075de <_vfiprintf_r+0x11a>
 8007594:	4b50      	ldr	r3, [pc, #320]	; (80076d8 <_vfiprintf_r+0x214>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d101      	bne.n	800759e <_vfiprintf_r+0xda>
 800759a:	68b4      	ldr	r4, [r6, #8]
 800759c:	e7a2      	b.n	80074e4 <_vfiprintf_r+0x20>
 800759e:	4b4f      	ldr	r3, [pc, #316]	; (80076dc <_vfiprintf_r+0x218>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	bf08      	it	eq
 80075a4:	68f4      	ldreq	r4, [r6, #12]
 80075a6:	e79d      	b.n	80074e4 <_vfiprintf_r+0x20>
 80075a8:	4621      	mov	r1, r4
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7ff fba0 	bl	8006cf0 <__swsetup_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d09d      	beq.n	80074f0 <_vfiprintf_r+0x2c>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	b01d      	add	sp, #116	; 0x74
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075be:	46a8      	mov	r8, r5
 80075c0:	e7a2      	b.n	8007508 <_vfiprintf_r+0x44>
 80075c2:	4a44      	ldr	r2, [pc, #272]	; (80076d4 <_vfiprintf_r+0x210>)
 80075c4:	4645      	mov	r5, r8
 80075c6:	1a80      	subs	r0, r0, r2
 80075c8:	fa0b f000 	lsl.w	r0, fp, r0
 80075cc:	4318      	orrs	r0, r3
 80075ce:	9004      	str	r0, [sp, #16]
 80075d0:	e7be      	b.n	8007550 <_vfiprintf_r+0x8c>
 80075d2:	9a03      	ldr	r2, [sp, #12]
 80075d4:	1d11      	adds	r1, r2, #4
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	9103      	str	r1, [sp, #12]
 80075da:	2a00      	cmp	r2, #0
 80075dc:	db01      	blt.n	80075e2 <_vfiprintf_r+0x11e>
 80075de:	9207      	str	r2, [sp, #28]
 80075e0:	e004      	b.n	80075ec <_vfiprintf_r+0x128>
 80075e2:	4252      	negs	r2, r2
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	9207      	str	r2, [sp, #28]
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	f898 3000 	ldrb.w	r3, [r8]
 80075f0:	2b2e      	cmp	r3, #46	; 0x2e
 80075f2:	d10e      	bne.n	8007612 <_vfiprintf_r+0x14e>
 80075f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80075f8:	2b2a      	cmp	r3, #42	; 0x2a
 80075fa:	d138      	bne.n	800766e <_vfiprintf_r+0x1aa>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	f108 0802 	add.w	r8, r8, #2
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfb8      	it	lt
 800760c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	4d33      	ldr	r5, [pc, #204]	; (80076e0 <_vfiprintf_r+0x21c>)
 8007614:	2203      	movs	r2, #3
 8007616:	f898 1000 	ldrb.w	r1, [r8]
 800761a:	4628      	mov	r0, r5
 800761c:	f000 fa24 	bl	8007a68 <memchr>
 8007620:	b140      	cbz	r0, 8007634 <_vfiprintf_r+0x170>
 8007622:	2340      	movs	r3, #64	; 0x40
 8007624:	1b40      	subs	r0, r0, r5
 8007626:	fa03 f000 	lsl.w	r0, r3, r0
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	f108 0801 	add.w	r8, r8, #1
 8007630:	4303      	orrs	r3, r0
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	f898 1000 	ldrb.w	r1, [r8]
 8007638:	2206      	movs	r2, #6
 800763a:	482a      	ldr	r0, [pc, #168]	; (80076e4 <_vfiprintf_r+0x220>)
 800763c:	f108 0701 	add.w	r7, r8, #1
 8007640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007644:	f000 fa10 	bl	8007a68 <memchr>
 8007648:	2800      	cmp	r0, #0
 800764a:	d037      	beq.n	80076bc <_vfiprintf_r+0x1f8>
 800764c:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <_vfiprintf_r+0x224>)
 800764e:	bb1b      	cbnz	r3, 8007698 <_vfiprintf_r+0x1d4>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	3307      	adds	r3, #7
 8007654:	f023 0307 	bic.w	r3, r3, #7
 8007658:	3308      	adds	r3, #8
 800765a:	9303      	str	r3, [sp, #12]
 800765c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765e:	444b      	add	r3, r9
 8007660:	9309      	str	r3, [sp, #36]	; 0x24
 8007662:	e750      	b.n	8007506 <_vfiprintf_r+0x42>
 8007664:	fb05 3202 	mla	r2, r5, r2, r3
 8007668:	2001      	movs	r0, #1
 800766a:	4688      	mov	r8, r1
 800766c:	e78a      	b.n	8007584 <_vfiprintf_r+0xc0>
 800766e:	2300      	movs	r3, #0
 8007670:	250a      	movs	r5, #10
 8007672:	4619      	mov	r1, r3
 8007674:	f108 0801 	add.w	r8, r8, #1
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	4640      	mov	r0, r8
 800767c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007680:	3a30      	subs	r2, #48	; 0x30
 8007682:	2a09      	cmp	r2, #9
 8007684:	d903      	bls.n	800768e <_vfiprintf_r+0x1ca>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0c3      	beq.n	8007612 <_vfiprintf_r+0x14e>
 800768a:	9105      	str	r1, [sp, #20]
 800768c:	e7c1      	b.n	8007612 <_vfiprintf_r+0x14e>
 800768e:	fb05 2101 	mla	r1, r5, r1, r2
 8007692:	2301      	movs	r3, #1
 8007694:	4680      	mov	r8, r0
 8007696:	e7f0      	b.n	800767a <_vfiprintf_r+0x1b6>
 8007698:	ab03      	add	r3, sp, #12
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	4622      	mov	r2, r4
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <_vfiprintf_r+0x228>)
 80076a0:	a904      	add	r1, sp, #16
 80076a2:	4630      	mov	r0, r6
 80076a4:	f3af 8000 	nop.w
 80076a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076ac:	4681      	mov	r9, r0
 80076ae:	d1d5      	bne.n	800765c <_vfiprintf_r+0x198>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	065b      	lsls	r3, r3, #25
 80076b4:	f53f af7e 	bmi.w	80075b4 <_vfiprintf_r+0xf0>
 80076b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ba:	e77d      	b.n	80075b8 <_vfiprintf_r+0xf4>
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4622      	mov	r2, r4
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <_vfiprintf_r+0x228>)
 80076c4:	a904      	add	r1, sp, #16
 80076c6:	4630      	mov	r0, r6
 80076c8:	f000 f888 	bl	80077dc <_printf_i>
 80076cc:	e7ec      	b.n	80076a8 <_vfiprintf_r+0x1e4>
 80076ce:	bf00      	nop
 80076d0:	0800c904 	.word	0x0800c904
 80076d4:	0800c944 	.word	0x0800c944
 80076d8:	0800c924 	.word	0x0800c924
 80076dc:	0800c8e4 	.word	0x0800c8e4
 80076e0:	0800c94a 	.word	0x0800c94a
 80076e4:	0800c94e 	.word	0x0800c94e
 80076e8:	00000000 	.word	0x00000000
 80076ec:	0800749f 	.word	0x0800749f

080076f0 <_printf_common>:
 80076f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	4691      	mov	r9, r2
 80076f6:	461f      	mov	r7, r3
 80076f8:	688a      	ldr	r2, [r1, #8]
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	4606      	mov	r6, r0
 80076fe:	4293      	cmp	r3, r2
 8007700:	bfb8      	it	lt
 8007702:	4613      	movlt	r3, r2
 8007704:	f8c9 3000 	str.w	r3, [r9]
 8007708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800770c:	460c      	mov	r4, r1
 800770e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007712:	b112      	cbz	r2, 800771a <_printf_common+0x2a>
 8007714:	3301      	adds	r3, #1
 8007716:	f8c9 3000 	str.w	r3, [r9]
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	0699      	lsls	r1, r3, #26
 800771e:	bf42      	ittt	mi
 8007720:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007724:	3302      	addmi	r3, #2
 8007726:	f8c9 3000 	strmi.w	r3, [r9]
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	f015 0506 	ands.w	r5, r5, #6
 8007730:	d107      	bne.n	8007742 <_printf_common+0x52>
 8007732:	f104 0a19 	add.w	sl, r4, #25
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	f8d9 2000 	ldr.w	r2, [r9]
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	42ab      	cmp	r3, r5
 8007740:	dc29      	bgt.n	8007796 <_printf_common+0xa6>
 8007742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	3300      	adds	r3, #0
 800774a:	bf18      	it	ne
 800774c:	2301      	movne	r3, #1
 800774e:	0692      	lsls	r2, r2, #26
 8007750:	d42e      	bmi.n	80077b0 <_printf_common+0xc0>
 8007752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007756:	4639      	mov	r1, r7
 8007758:	4630      	mov	r0, r6
 800775a:	47c0      	blx	r8
 800775c:	3001      	adds	r0, #1
 800775e:	d021      	beq.n	80077a4 <_printf_common+0xb4>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	68e5      	ldr	r5, [r4, #12]
 8007764:	f003 0306 	and.w	r3, r3, #6
 8007768:	2b04      	cmp	r3, #4
 800776a:	bf18      	it	ne
 800776c:	2500      	movne	r5, #0
 800776e:	f8d9 2000 	ldr.w	r2, [r9]
 8007772:	f04f 0900 	mov.w	r9, #0
 8007776:	bf08      	it	eq
 8007778:	1aad      	subeq	r5, r5, r2
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	bf08      	it	eq
 8007780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007784:	4293      	cmp	r3, r2
 8007786:	bfc4      	itt	gt
 8007788:	1a9b      	subgt	r3, r3, r2
 800778a:	18ed      	addgt	r5, r5, r3
 800778c:	341a      	adds	r4, #26
 800778e:	454d      	cmp	r5, r9
 8007790:	d11a      	bne.n	80077c8 <_printf_common+0xd8>
 8007792:	2000      	movs	r0, #0
 8007794:	e008      	b.n	80077a8 <_printf_common+0xb8>
 8007796:	2301      	movs	r3, #1
 8007798:	4652      	mov	r2, sl
 800779a:	4639      	mov	r1, r7
 800779c:	4630      	mov	r0, r6
 800779e:	47c0      	blx	r8
 80077a0:	3001      	adds	r0, #1
 80077a2:	d103      	bne.n	80077ac <_printf_common+0xbc>
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ac:	3501      	adds	r5, #1
 80077ae:	e7c2      	b.n	8007736 <_printf_common+0x46>
 80077b0:	2030      	movs	r0, #48	; 0x30
 80077b2:	18e1      	adds	r1, r4, r3
 80077b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077be:	4422      	add	r2, r4
 80077c0:	3302      	adds	r3, #2
 80077c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077c6:	e7c4      	b.n	8007752 <_printf_common+0x62>
 80077c8:	2301      	movs	r3, #1
 80077ca:	4622      	mov	r2, r4
 80077cc:	4639      	mov	r1, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	47c0      	blx	r8
 80077d2:	3001      	adds	r0, #1
 80077d4:	d0e6      	beq.n	80077a4 <_printf_common+0xb4>
 80077d6:	f109 0901 	add.w	r9, r9, #1
 80077da:	e7d8      	b.n	800778e <_printf_common+0x9e>

080077dc <_printf_i>:
 80077dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077e4:	460c      	mov	r4, r1
 80077e6:	7e09      	ldrb	r1, [r1, #24]
 80077e8:	b085      	sub	sp, #20
 80077ea:	296e      	cmp	r1, #110	; 0x6e
 80077ec:	4617      	mov	r7, r2
 80077ee:	4606      	mov	r6, r0
 80077f0:	4698      	mov	r8, r3
 80077f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f4:	f000 80b3 	beq.w	800795e <_printf_i+0x182>
 80077f8:	d822      	bhi.n	8007840 <_printf_i+0x64>
 80077fa:	2963      	cmp	r1, #99	; 0x63
 80077fc:	d036      	beq.n	800786c <_printf_i+0x90>
 80077fe:	d80a      	bhi.n	8007816 <_printf_i+0x3a>
 8007800:	2900      	cmp	r1, #0
 8007802:	f000 80b9 	beq.w	8007978 <_printf_i+0x19c>
 8007806:	2958      	cmp	r1, #88	; 0x58
 8007808:	f000 8083 	beq.w	8007912 <_printf_i+0x136>
 800780c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007814:	e032      	b.n	800787c <_printf_i+0xa0>
 8007816:	2964      	cmp	r1, #100	; 0x64
 8007818:	d001      	beq.n	800781e <_printf_i+0x42>
 800781a:	2969      	cmp	r1, #105	; 0x69
 800781c:	d1f6      	bne.n	800780c <_printf_i+0x30>
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	6813      	ldr	r3, [r2, #0]
 8007822:	0605      	lsls	r5, r0, #24
 8007824:	f103 0104 	add.w	r1, r3, #4
 8007828:	d52a      	bpl.n	8007880 <_printf_i+0xa4>
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da03      	bge.n	800783a <_printf_i+0x5e>
 8007832:	222d      	movs	r2, #45	; 0x2d
 8007834:	425b      	negs	r3, r3
 8007836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800783a:	486f      	ldr	r0, [pc, #444]	; (80079f8 <_printf_i+0x21c>)
 800783c:	220a      	movs	r2, #10
 800783e:	e039      	b.n	80078b4 <_printf_i+0xd8>
 8007840:	2973      	cmp	r1, #115	; 0x73
 8007842:	f000 809d 	beq.w	8007980 <_printf_i+0x1a4>
 8007846:	d808      	bhi.n	800785a <_printf_i+0x7e>
 8007848:	296f      	cmp	r1, #111	; 0x6f
 800784a:	d020      	beq.n	800788e <_printf_i+0xb2>
 800784c:	2970      	cmp	r1, #112	; 0x70
 800784e:	d1dd      	bne.n	800780c <_printf_i+0x30>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e003      	b.n	8007862 <_printf_i+0x86>
 800785a:	2975      	cmp	r1, #117	; 0x75
 800785c:	d017      	beq.n	800788e <_printf_i+0xb2>
 800785e:	2978      	cmp	r1, #120	; 0x78
 8007860:	d1d4      	bne.n	800780c <_printf_i+0x30>
 8007862:	2378      	movs	r3, #120	; 0x78
 8007864:	4865      	ldr	r0, [pc, #404]	; (80079fc <_printf_i+0x220>)
 8007866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800786a:	e055      	b.n	8007918 <_printf_i+0x13c>
 800786c:	6813      	ldr	r3, [r2, #0]
 800786e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007872:	1d19      	adds	r1, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6011      	str	r1, [r2, #0]
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e08c      	b.n	800799a <_printf_i+0x1be>
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007886:	6011      	str	r1, [r2, #0]
 8007888:	bf18      	it	ne
 800788a:	b21b      	sxthne	r3, r3
 800788c:	e7cf      	b.n	800782e <_printf_i+0x52>
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	1d18      	adds	r0, r3, #4
 8007894:	6010      	str	r0, [r2, #0]
 8007896:	0628      	lsls	r0, r5, #24
 8007898:	d501      	bpl.n	800789e <_printf_i+0xc2>
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	e002      	b.n	80078a4 <_printf_i+0xc8>
 800789e:	0668      	lsls	r0, r5, #25
 80078a0:	d5fb      	bpl.n	800789a <_printf_i+0xbe>
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	296f      	cmp	r1, #111	; 0x6f
 80078a6:	bf14      	ite	ne
 80078a8:	220a      	movne	r2, #10
 80078aa:	2208      	moveq	r2, #8
 80078ac:	4852      	ldr	r0, [pc, #328]	; (80079f8 <_printf_i+0x21c>)
 80078ae:	2100      	movs	r1, #0
 80078b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b4:	6865      	ldr	r5, [r4, #4]
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	60a5      	str	r5, [r4, #8]
 80078ba:	f2c0 8095 	blt.w	80079e8 <_printf_i+0x20c>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	f021 0104 	bic.w	r1, r1, #4
 80078c4:	6021      	str	r1, [r4, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d13d      	bne.n	8007946 <_printf_i+0x16a>
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	f040 808e 	bne.w	80079ec <_printf_i+0x210>
 80078d0:	4665      	mov	r5, ip
 80078d2:	2a08      	cmp	r2, #8
 80078d4:	d10b      	bne.n	80078ee <_printf_i+0x112>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	07db      	lsls	r3, r3, #31
 80078da:	d508      	bpl.n	80078ee <_printf_i+0x112>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	6862      	ldr	r2, [r4, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bfde      	ittt	le
 80078e4:	2330      	movle	r3, #48	; 0x30
 80078e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078ee:	ebac 0305 	sub.w	r3, ip, r5
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	f8cd 8000 	str.w	r8, [sp]
 80078f8:	463b      	mov	r3, r7
 80078fa:	aa03      	add	r2, sp, #12
 80078fc:	4621      	mov	r1, r4
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff fef6 	bl	80076f0 <_printf_common>
 8007904:	3001      	adds	r0, #1
 8007906:	d14d      	bne.n	80079a4 <_printf_i+0x1c8>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	b005      	add	sp, #20
 800790e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007912:	4839      	ldr	r0, [pc, #228]	; (80079f8 <_printf_i+0x21c>)
 8007914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007918:	6813      	ldr	r3, [r2, #0]
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	1d1d      	adds	r5, r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6015      	str	r5, [r2, #0]
 8007922:	060a      	lsls	r2, r1, #24
 8007924:	d50b      	bpl.n	800793e <_printf_i+0x162>
 8007926:	07ca      	lsls	r2, r1, #31
 8007928:	bf44      	itt	mi
 800792a:	f041 0120 	orrmi.w	r1, r1, #32
 800792e:	6021      	strmi	r1, [r4, #0]
 8007930:	b91b      	cbnz	r3, 800793a <_printf_i+0x15e>
 8007932:	6822      	ldr	r2, [r4, #0]
 8007934:	f022 0220 	bic.w	r2, r2, #32
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	2210      	movs	r2, #16
 800793c:	e7b7      	b.n	80078ae <_printf_i+0xd2>
 800793e:	064d      	lsls	r5, r1, #25
 8007940:	bf48      	it	mi
 8007942:	b29b      	uxthmi	r3, r3
 8007944:	e7ef      	b.n	8007926 <_printf_i+0x14a>
 8007946:	4665      	mov	r5, ip
 8007948:	fbb3 f1f2 	udiv	r1, r3, r2
 800794c:	fb02 3311 	mls	r3, r2, r1, r3
 8007950:	5cc3      	ldrb	r3, [r0, r3]
 8007952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007956:	460b      	mov	r3, r1
 8007958:	2900      	cmp	r1, #0
 800795a:	d1f5      	bne.n	8007948 <_printf_i+0x16c>
 800795c:	e7b9      	b.n	80078d2 <_printf_i+0xf6>
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	1d18      	adds	r0, r3, #4
 8007964:	6961      	ldr	r1, [r4, #20]
 8007966:	6010      	str	r0, [r2, #0]
 8007968:	0628      	lsls	r0, r5, #24
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	d501      	bpl.n	8007972 <_printf_i+0x196>
 800796e:	6019      	str	r1, [r3, #0]
 8007970:	e002      	b.n	8007978 <_printf_i+0x19c>
 8007972:	066a      	lsls	r2, r5, #25
 8007974:	d5fb      	bpl.n	800796e <_printf_i+0x192>
 8007976:	8019      	strh	r1, [r3, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	4665      	mov	r5, ip
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	e7b9      	b.n	80078f4 <_printf_i+0x118>
 8007980:	6813      	ldr	r3, [r2, #0]
 8007982:	1d19      	adds	r1, r3, #4
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	681d      	ldr	r5, [r3, #0]
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	2100      	movs	r1, #0
 800798c:	4628      	mov	r0, r5
 800798e:	f000 f86b 	bl	8007a68 <memchr>
 8007992:	b108      	cbz	r0, 8007998 <_printf_i+0x1bc>
 8007994:	1b40      	subs	r0, r0, r5
 8007996:	6060      	str	r0, [r4, #4]
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a2:	e7a7      	b.n	80078f4 <_printf_i+0x118>
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	462a      	mov	r2, r5
 80079a8:	4639      	mov	r1, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0aa      	beq.n	8007908 <_printf_i+0x12c>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	079b      	lsls	r3, r3, #30
 80079b6:	d413      	bmi.n	80079e0 <_printf_i+0x204>
 80079b8:	68e0      	ldr	r0, [r4, #12]
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	4298      	cmp	r0, r3
 80079be:	bfb8      	it	lt
 80079c0:	4618      	movlt	r0, r3
 80079c2:	e7a3      	b.n	800790c <_printf_i+0x130>
 80079c4:	2301      	movs	r3, #1
 80079c6:	464a      	mov	r2, r9
 80079c8:	4639      	mov	r1, r7
 80079ca:	4630      	mov	r0, r6
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d09a      	beq.n	8007908 <_printf_i+0x12c>
 80079d2:	3501      	adds	r5, #1
 80079d4:	68e3      	ldr	r3, [r4, #12]
 80079d6:	9a03      	ldr	r2, [sp, #12]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	42ab      	cmp	r3, r5
 80079dc:	dcf2      	bgt.n	80079c4 <_printf_i+0x1e8>
 80079de:	e7eb      	b.n	80079b8 <_printf_i+0x1dc>
 80079e0:	2500      	movs	r5, #0
 80079e2:	f104 0919 	add.w	r9, r4, #25
 80079e6:	e7f5      	b.n	80079d4 <_printf_i+0x1f8>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ac      	bne.n	8007946 <_printf_i+0x16a>
 80079ec:	7803      	ldrb	r3, [r0, #0]
 80079ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f6:	e76c      	b.n	80078d2 <_printf_i+0xf6>
 80079f8:	0800c955 	.word	0x0800c955
 80079fc:	0800c966 	.word	0x0800c966

08007a00 <_read_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4605      	mov	r5, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4c05      	ldr	r4, [pc, #20]	; (8007a20 <_read_r+0x20>)
 8007a0c:	6022      	str	r2, [r4, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7f8 ffac 	bl	800096c <_read>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_read_r+0x1e>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_read_r+0x1e>
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	200018b0 	.word	0x200018b0

08007a24 <_fstat_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	2300      	movs	r3, #0
 8007a28:	4c06      	ldr	r4, [pc, #24]	; (8007a44 <_fstat_r+0x20>)
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	f7f8 ffdf 	bl	80009f4 <_fstat>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d102      	bne.n	8007a40 <_fstat_r+0x1c>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	b103      	cbz	r3, 8007a40 <_fstat_r+0x1c>
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	bd38      	pop	{r3, r4, r5, pc}
 8007a42:	bf00      	nop
 8007a44:	200018b0 	.word	0x200018b0

08007a48 <_isatty_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4c05      	ldr	r4, [pc, #20]	; (8007a64 <_isatty_r+0x1c>)
 8007a4e:	4605      	mov	r5, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	f7f8 ffdd 	bl	8000a12 <_isatty>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_isatty_r+0x1a>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_isatty_r+0x1a>
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	200018b0 	.word	0x200018b0

08007a68 <memchr>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	b2c9      	uxtb	r1, r1
 8007a6c:	4402      	add	r2, r0
 8007a6e:	4290      	cmp	r0, r2
 8007a70:	4603      	mov	r3, r0
 8007a72:	d101      	bne.n	8007a78 <memchr+0x10>
 8007a74:	2300      	movs	r3, #0
 8007a76:	e003      	b.n	8007a80 <memchr+0x18>
 8007a78:	781c      	ldrb	r4, [r3, #0]
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	428c      	cmp	r4, r1
 8007a7e:	d1f6      	bne.n	8007a6e <memchr+0x6>
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd10      	pop	{r4, pc}

08007a84 <memmove>:
 8007a84:	4288      	cmp	r0, r1
 8007a86:	b510      	push	{r4, lr}
 8007a88:	eb01 0302 	add.w	r3, r1, r2
 8007a8c:	d807      	bhi.n	8007a9e <memmove+0x1a>
 8007a8e:	1e42      	subs	r2, r0, #1
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d00a      	beq.n	8007aaa <memmove+0x26>
 8007a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a9c:	e7f8      	b.n	8007a90 <memmove+0xc>
 8007a9e:	4283      	cmp	r3, r0
 8007aa0:	d9f5      	bls.n	8007a8e <memmove+0xa>
 8007aa2:	1881      	adds	r1, r0, r2
 8007aa4:	1ad2      	subs	r2, r2, r3
 8007aa6:	42d3      	cmn	r3, r2
 8007aa8:	d100      	bne.n	8007aac <memmove+0x28>
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ab4:	e7f7      	b.n	8007aa6 <memmove+0x22>

08007ab6 <_realloc_r>:
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	4607      	mov	r7, r0
 8007aba:	4614      	mov	r4, r2
 8007abc:	460e      	mov	r6, r1
 8007abe:	b921      	cbnz	r1, 8007aca <_realloc_r+0x14>
 8007ac0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	f7fe bebf 	b.w	8006848 <_malloc_r>
 8007aca:	b922      	cbnz	r2, 8007ad6 <_realloc_r+0x20>
 8007acc:	f7fe fe70 	bl	80067b0 <_free_r>
 8007ad0:	4625      	mov	r5, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad6:	f000 f814 	bl	8007b02 <_malloc_usable_size_r>
 8007ada:	42a0      	cmp	r0, r4
 8007adc:	d20f      	bcs.n	8007afe <_realloc_r+0x48>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7fe feb1 	bl	8006848 <_malloc_r>
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0f2      	beq.n	8007ad2 <_realloc_r+0x1c>
 8007aec:	4631      	mov	r1, r6
 8007aee:	4622      	mov	r2, r4
 8007af0:	f7fe fe4a 	bl	8006788 <memcpy>
 8007af4:	4631      	mov	r1, r6
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7fe fe5a 	bl	80067b0 <_free_r>
 8007afc:	e7e9      	b.n	8007ad2 <_realloc_r+0x1c>
 8007afe:	4635      	mov	r5, r6
 8007b00:	e7e7      	b.n	8007ad2 <_realloc_r+0x1c>

08007b02 <_malloc_usable_size_r>:
 8007b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b06:	1f18      	subs	r0, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfbc      	itt	lt
 8007b0c:	580b      	ldrlt	r3, [r1, r0]
 8007b0e:	18c0      	addlt	r0, r0, r3
 8007b10:	4770      	bx	lr
	...

08007b14 <_init>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr

08007b20 <_fini>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr
